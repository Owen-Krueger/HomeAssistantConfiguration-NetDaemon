//------------------------------------------------------------------------------
// <auto-generated>
// Generated using NetDaemon CodeGenerator nd-codegen v24.37.1.0
//   At: 2024-10-09T08:55:21.4094451-05:00
//
// *** Make sure the version of the codegen tool and your nugets Joysoftware.NetDaemon.* have the same version.***
// You can use following command to keep it up to date with the latest version:
//   dotnet tool update NetDaemon.HassModel.CodeGen
//
// To update this file with latest entities run this command in your project directory:
//   dotnet tool run nd-codegen
//
// In the template projects we provided a convenience powershell script that will update
// the codegen and nugets to latest versions update_all_dependencies.ps1.
//
// For more information: https://netdaemon.xyz/docs/user/hass_model/hass_model_codegen
// For more information about NetDaemon: https://netdaemon.xyz/
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using System.Text.Json;
using System.Text.Json.Serialization;
using NetDaemon.HassModel;
using NetDaemon.HassModel.Entities;
using NetDaemon.HassModel.Entities.Core;

namespace HomeAssistantGenerated;
public static class GeneratedExtensions
{
    ///<summary>Registers all injectable generated types in the serviceCollection</summary>
    public static IServiceCollection AddHomeAssistantGenerated(this IServiceCollection serviceCollection)
    {
        serviceCollection.AddTransient<Entities>();
        serviceCollection.AddTransient<LightEntities>();
        serviceCollection.AddTransient<MediaPlayerEntities>();
        serviceCollection.AddTransient<AutomationEntities>();
        serviceCollection.AddTransient<BinarySensorEntities>();
        serviceCollection.AddTransient<ButtonEntities>();
        serviceCollection.AddTransient<CameraEntities>();
        serviceCollection.AddTransient<ClimateEntities>();
        serviceCollection.AddTransient<ConversationEntities>();
        serviceCollection.AddTransient<CoverEntities>();
        serviceCollection.AddTransient<DeviceTrackerEntities>();
        serviceCollection.AddTransient<EventEntities>();
        serviceCollection.AddTransient<GroupEntities>();
        serviceCollection.AddTransient<InputBooleanEntities>();
        serviceCollection.AddTransient<InputDatetimeEntities>();
        serviceCollection.AddTransient<InputNumberEntities>();
        serviceCollection.AddTransient<InputSelectEntities>();
        serviceCollection.AddTransient<LockEntities>();
        serviceCollection.AddTransient<NumberEntities>();
        serviceCollection.AddTransient<PersonEntities>();
        serviceCollection.AddTransient<RemoteEntities>();
        serviceCollection.AddTransient<SceneEntities>();
        serviceCollection.AddTransient<ScriptEntities>();
        serviceCollection.AddTransient<SelectEntities>();
        serviceCollection.AddTransient<SensorEntities>();
        serviceCollection.AddTransient<SttEntities>();
        serviceCollection.AddTransient<SunEntities>();
        serviceCollection.AddTransient<SwitchEntities>();
        serviceCollection.AddTransient<TextEntities>();
        serviceCollection.AddTransient<TimerEntities>();
        serviceCollection.AddTransient<TtsEntities>();
        serviceCollection.AddTransient<UpdateEntities>();
        serviceCollection.AddTransient<WeatherEntities>();
        serviceCollection.AddTransient<ZoneEntities>();
        serviceCollection.AddTransient<Services>();
        serviceCollection.AddTransient<AlarmControlPanelServices>();
        serviceCollection.AddTransient<AlexaMediaServices>();
        serviceCollection.AddTransient<AutomationServices>();
        serviceCollection.AddTransient<ButtonServices>();
        serviceCollection.AddTransient<CameraServices>();
        serviceCollection.AddTransient<CastServices>();
        serviceCollection.AddTransient<ClimateServices>();
        serviceCollection.AddTransient<CloudServices>();
        serviceCollection.AddTransient<ConversationServices>();
        serviceCollection.AddTransient<CounterServices>();
        serviceCollection.AddTransient<CoverServices>();
        serviceCollection.AddTransient<DeviceTrackerServices>();
        serviceCollection.AddTransient<ElgatoServices>();
        serviceCollection.AddTransient<EsphomeServices>();
        serviceCollection.AddTransient<FanServices>();
        serviceCollection.AddTransient<FfmpegServices>();
        serviceCollection.AddTransient<FrontendServices>();
        serviceCollection.AddTransient<GroupServices>();
        serviceCollection.AddTransient<HassioServices>();
        serviceCollection.AddTransient<HomeassistantServices>();
        serviceCollection.AddTransient<InputBooleanServices>();
        serviceCollection.AddTransient<InputButtonServices>();
        serviceCollection.AddTransient<InputDatetimeServices>();
        serviceCollection.AddTransient<InputNumberServices>();
        serviceCollection.AddTransient<InputSelectServices>();
        serviceCollection.AddTransient<InputTextServices>();
        serviceCollection.AddTransient<LightServices>();
        serviceCollection.AddTransient<LocalFileServices>();
        serviceCollection.AddTransient<LockServices>();
        serviceCollection.AddTransient<LogbookServices>();
        serviceCollection.AddTransient<LoggerServices>();
        serviceCollection.AddTransient<MediaPlayerServices>();
        serviceCollection.AddTransient<NetdaemonServices>();
        serviceCollection.AddTransient<NotifyServices>();
        serviceCollection.AddTransient<NumberServices>();
        serviceCollection.AddTransient<PersistentNotificationServices>();
        serviceCollection.AddTransient<PersonServices>();
        serviceCollection.AddTransient<PiHoleServices>();
        serviceCollection.AddTransient<RecorderServices>();
        serviceCollection.AddTransient<RemoteServices>();
        serviceCollection.AddTransient<SceneServices>();
        serviceCollection.AddTransient<ScheduleServices>();
        serviceCollection.AddTransient<ScriptServices>();
        serviceCollection.AddTransient<SelectServices>();
        serviceCollection.AddTransient<SirenServices>();
        serviceCollection.AddTransient<SwitchServices>();
        serviceCollection.AddTransient<SystemLogServices>();
        serviceCollection.AddTransient<TemplateServices>();
        serviceCollection.AddTransient<TextServices>();
        serviceCollection.AddTransient<TimerServices>();
        serviceCollection.AddTransient<TruenasServices>();
        serviceCollection.AddTransient<TtsServices>();
        serviceCollection.AddTransient<UnifiServices>();
        serviceCollection.AddTransient<UnifiprotectServices>();
        serviceCollection.AddTransient<UpdateServices>();
        serviceCollection.AddTransient<WakeOnLanServices>();
        serviceCollection.AddTransient<WeatherServices>();
        serviceCollection.AddTransient<WorkdayServices>();
        serviceCollection.AddTransient<ZhaServices>();
        serviceCollection.AddTransient<ZoneServices>();
        serviceCollection.AddTransient<ZwaveJsServices>();
        return serviceCollection;
    }
}

public interface IEntities
{
    LightEntities Light { get; }

    MediaPlayerEntities MediaPlayer { get; }

    AutomationEntities Automation { get; }

    BinarySensorEntities BinarySensor { get; }

    ButtonEntities Button { get; }

    CameraEntities Camera { get; }

    ClimateEntities Climate { get; }

    ConversationEntities Conversation { get; }

    CoverEntities Cover { get; }

    DeviceTrackerEntities DeviceTracker { get; }

    EventEntities Event { get; }

    GroupEntities Group { get; }

    InputBooleanEntities InputBoolean { get; }

    InputDatetimeEntities InputDatetime { get; }

    InputNumberEntities InputNumber { get; }

    InputSelectEntities InputSelect { get; }

    LockEntities Lock { get; }

    NumberEntities Number { get; }

    PersonEntities Person { get; }

    RemoteEntities Remote { get; }

    SceneEntities Scene { get; }

    ScriptEntities Script { get; }

    SelectEntities Select { get; }

    SensorEntities Sensor { get; }

    SttEntities Stt { get; }

    SunEntities Sun { get; }

    SwitchEntities Switch { get; }

    TextEntities Text { get; }

    TimerEntities Timer { get; }

    TtsEntities Tts { get; }

    UpdateEntities Update { get; }

    WeatherEntities Weather { get; }

    ZoneEntities Zone { get; }
}

public partial class Entities : IEntities
{
    private readonly IHaContext _haContext;
    public Entities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public LightEntities Light => new(_haContext);
    public MediaPlayerEntities MediaPlayer => new(_haContext);
    public AutomationEntities Automation => new(_haContext);
    public BinarySensorEntities BinarySensor => new(_haContext);
    public ButtonEntities Button => new(_haContext);
    public CameraEntities Camera => new(_haContext);
    public ClimateEntities Climate => new(_haContext);
    public ConversationEntities Conversation => new(_haContext);
    public CoverEntities Cover => new(_haContext);
    public DeviceTrackerEntities DeviceTracker => new(_haContext);
    public EventEntities Event => new(_haContext);
    public GroupEntities Group => new(_haContext);
    public InputBooleanEntities InputBoolean => new(_haContext);
    public InputDatetimeEntities InputDatetime => new(_haContext);
    public InputNumberEntities InputNumber => new(_haContext);
    public InputSelectEntities InputSelect => new(_haContext);
    public LockEntities Lock => new(_haContext);
    public NumberEntities Number => new(_haContext);
    public PersonEntities Person => new(_haContext);
    public RemoteEntities Remote => new(_haContext);
    public SceneEntities Scene => new(_haContext);
    public ScriptEntities Script => new(_haContext);
    public SelectEntities Select => new(_haContext);
    public SensorEntities Sensor => new(_haContext);
    public SttEntities Stt => new(_haContext);
    public SunEntities Sun => new(_haContext);
    public SwitchEntities Switch => new(_haContext);
    public TextEntities Text => new(_haContext);
    public TimerEntities Timer => new(_haContext);
    public TtsEntities Tts => new(_haContext);
    public UpdateEntities Update => new(_haContext);
    public WeatherEntities Weather => new(_haContext);
    public ZoneEntities Zone => new(_haContext);
}

public partial class LightEntities
{
    private readonly IHaContext _haContext;
    public LightEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all light entities currently registered (at runtime) in Home Assistant as LightEntity</summary>
    public IEnumerable<LightEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("light.")).Select(e => new LightEntity(e));
    ///<summary>Allison Bedroom Lamp Light</summary>
    public LightEntity AllisonBedroomLamp => new(_haContext, "light.allison_bedroom_lamp");
    ///<summary>Bedroom Lamps</summary>
    public LightEntity BedroomLamps => new(_haContext, "light.bedroom_lamps");
    ///<summary>Bedroom Lights Basic</summary>
    public LightEntity BedroomLightsBasic => new(_haContext, "light.bedroom_lights_basic");
    ///<summary>Cat Camera Down Smart Plug Blue LED</summary>
    public LightEntity CatCameraDownSmartPlugBlueLed => new(_haContext, "light.cat_camera_down_smart_plug_blue_led");
    ///<summary>Cat Camera Down Smart Plug Red LED</summary>
    public LightEntity CatCameraDownSmartPlugRedLed => new(_haContext, "light.cat_camera_down_smart_plug_red_led");
    ///<summary>Cat Camera Up Smart Plug Blue LED</summary>
    public LightEntity CatCameraUpSmartPlugBlueLed => new(_haContext, "light.cat_camera_up_smart_plug_blue_led");
    ///<summary>Cat Camera Up Smart Plug Red LED</summary>
    public LightEntity CatCameraUpSmartPlugRedLed => new(_haContext, "light.cat_camera_up_smart_plug_red_led");
    ///<summary>Counter Lights Basic</summary>
    public LightEntity CounterLightsBasic => new(_haContext, "light.counter_lights_basic");
    ///<summary>Dining Room Lights Basic</summary>
    public LightEntity DiningRoomLightsBasic => new(_haContext, "light.dining_room_lights_basic");
    ///<summary>Downstairs Lights</summary>
    public LightEntity DownstairsLights => new(_haContext, "light.downstairs_lights");
    ///<summary>Downstairs Lights Basic</summary>
    public LightEntity DownstairsLightsBasic => new(_haContext, "light.downstairs_lights_basic");
    ///<summary>Elgato Key Light Left</summary>
    public LightEntity ElgatoKeyLightLeft => new(_haContext, "light.elgato_key_light_left");
    ///<summary>Elgato Key Light Right</summary>
    public LightEntity ElgatoKeyLightRight => new(_haContext, "light.elgato_key_light_right");
    ///<summary>Front Porch Lights Basic</summary>
    public LightEntity FrontPorchLightsBasic => new(_haContext, "light.front_porch_lights_basic");
    ///<summary>Garage Lights Basic</summary>
    public LightEntity GarageLightsBasic => new(_haContext, "light.garage_lights_basic");
    ///<summary>Kitchen Lights Basic</summary>
    public LightEntity KitchenLightsBasic => new(_haContext, "light.kitchen_lights_basic");
    ///<summary>Basic</summary>
    public LightEntity LaundryRoomLightsBasic => new(_haContext, "light.laundry_room_lights_basic");
    ///<summary>Office Keylights</summary>
    public LightEntity OfficeKeylights => new(_haContext, "light.office_keylights");
    ///<summary>Office Lamp Light</summary>
    public LightEntity OfficeLamp => new(_haContext, "light.office_lamp");
    ///<summary>Office Lights Basic</summary>
    public LightEntity OfficeLightsBasic => new(_haContext, "light.office_lights_basic");
    ///<summary>Owen Bedroom Lamp Light</summary>
    public LightEntity OwenBedroomLamp => new(_haContext, "light.owen_bedroom_lamp");
    ///<summary>Garage-Door-Primary Light</summary>
    public LightEntity PrimaryGarageDoorLight => new(_haContext, "light.primary_garage_door_light");
    ///<summary>Stairway Lights Basic</summary>
    public LightEntity StairwayLightsBasic => new(_haContext, "light.stairway_lights_basic");
    ///<summary>Utility Room Lights Basic</summary>
    public LightEntity UtilityRoomLightsBasic => new(_haContext, "light.utility_room_lights_basic");
}

public partial class MediaPlayerEntities
{
    private readonly IHaContext _haContext;
    public MediaPlayerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all media_player entities currently registered (at runtime) in Home Assistant as MediaPlayerEntity</summary>
    public IEnumerable<MediaPlayerEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("media_player.")).Select(e => new MediaPlayerEntity(e));
    ///<summary>Bedroom Bedside Echo Show</summary>
    public MediaPlayerEntity BedroomBedsideEchoShow => new(_haContext, "media_player.bedroom_bedside_echo_show");
    ///<summary>Cat Camera Downstairs Speaker</summary>
    public MediaPlayerEntity CatCameraDownstairsSpeaker => new(_haContext, "media_player.cat_camera_downstairs_speaker");
    ///<summary>Cat Camera Upstairs Speaker</summary>
    public MediaPlayerEntity CatCameraUpstairsSpeaker => new(_haContext, "media_player.cat_camera_upstairs_speaker");
    ///<summary>Downstairs TV</summary>
    public MediaPlayerEntity ChromecastDownstairsTv => new(_haContext, "media_player.chromecast_downstairs_tv");
    ///<summary>Upstairs TV</summary>
    public MediaPlayerEntity ChromecastUpstairsTv => new(_haContext, "media_player.chromecast_upstairs_tv");
    ///<summary>Downstairs Echo Dot</summary>
    public MediaPlayerEntity DownstairsEchoDot => new(_haContext, "media_player.downstairs_echo_dot");
    ///<summary>Downstairs TV</summary>
    public MediaPlayerEntity DownstairsTv => new(_haContext, "media_player.downstairs_tv");
    ///<summary>Everywhere</summary>
    public MediaPlayerEntity Everywhere => new(_haContext, "media_player.everywhere");
    ///<summary>G4 Doorbell Pro Speaker</summary>
    public MediaPlayerEntity G4DoorbellProSpeaker => new(_haContext, "media_player.g4_doorbell_pro_speaker");
    ///<summary>Kitchen Echo Show</summary>
    public MediaPlayerEntity KitchenEchoShow => new(_haContext, "media_player.kitchen_echo_show");
    ///<summary>Living Room Echo</summary>
    public MediaPlayerEntity LivingRoomEcho => new(_haContext, "media_player.living_room_echo");
    ///<summary>Office Desk Echo Show</summary>
    public MediaPlayerEntity OfficeDeskEchoShow => new(_haContext, "media_player.office_desk_echo_show");
    ///<summary>Sound System</summary>
    public MediaPlayerEntity SoundSystem => new(_haContext, "media_player.sound_system");
    ///<summary>Spotify Owen</summary>
    public MediaPlayerEntity SpotifyOwen => new(_haContext, "media_player.spotify_owen");
    ///<summary>This Device</summary>
    public MediaPlayerEntity ThisDevice => new(_haContext, "media_player.this_device");
    ///<summary>This Device</summary>
    public MediaPlayerEntity ThisDevice2 => new(_haContext, "media_player.this_device_2");
}

public partial class AutomationEntities
{
    private readonly IHaContext _haContext;
    public AutomationEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all automation entities currently registered (at runtime) in Home Assistant as AutomationEntity</summary>
    public IEnumerable<AutomationEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("automation.")).Select(e => new AutomationEntity(e));
    ///<summary>Android Action - Climate Away Temp</summary>
    public AutomationEntity AndroidActionClimateOff => new(_haContext, "automation.android_action_climate_off");
    ///<summary>Android Action - Close Garage Door</summary>
    public AutomationEntity AndroidActionCloseGarageDoor => new(_haContext, "automation.android_action_close_garage_door");
    ///<summary>Battery Devices - Notify if battery device offline</summary>
    public AutomationEntity BatteryDevicesNotifyIfBateryDeviceOffline => new(_haContext, "automation.battery_devices_notify_if_batery_device_offline");
    ///<summary>Battery Devices - Notify if battery is below 20%</summary>
    public AutomationEntity BatteryDevicesNotifyIfBateryIsBelow20 => new(_haContext, "automation.battery_devices_notify_if_batery_is_below_20");
    ///<summary>Climate - Away from Home Notification</summary>
    public AutomationEntity ClimateAwayFromHomeNotification => new(_haContext, "automation.climate_away_from_home_notification");
    ///<summary>Climate - Away from Home Notification - Test</summary>
    public AutomationEntity ClimateAwayFromHomeNotificationTest => new(_haContext, "automation.climate_away_from_home_notification_test");
    ///<summary>Climate - Bedroom Fan When Warm</summary>
    public AutomationEntity ClimateBedroomFanWhenWarm => new(_haContext, "automation.climate_bedroom_fan_when_warm");
    ///<summary>Climate - Coming Back Home</summary>
    public AutomationEntity ClimateComingBackHome => new(_haContext, "automation.climate_coming_back_home");
    ///<summary>Climate - Gone Mode Off</summary>
    public AutomationEntity ClimateGoneModeOff => new(_haContext, "automation.climate_gone_mode_off");
    ///<summary>Climate - Gone Mode On</summary>
    public AutomationEntity ClimateGoneModeOn => new(_haContext, "automation.climate_gone_mode_on");
    ///<summary>Climate - People Gone</summary>
    public AutomationEntity ClimatePeopleGone => new(_haContext, "automation.climate_people_gone");
    ///<summary>Climate - People in Cambridge</summary>
    public AutomationEntity ClimatePeopleInCambridge => new(_haContext, "automation.climate_people_in_cambridge");
    ///<summary>Climate - People Near Home</summary>
    public AutomationEntity ClimatePeopleNearHome => new(_haContext, "automation.climate_people_near_home");
    ///<summary>Climate - Temperature Too Far From Set Temperature</summary>
    public AutomationEntity ClimateTemperatureTooFarFromSetTemperature => new(_haContext, "automation.climate_temperature_too_far_from_set_temperature");
    ///<summary>Climate - Temperature Too Hot or Cold</summary>
    public AutomationEntity ClimateTemperatureTooHotOrCold => new(_haContext, "automation.climate_temperature_too_hot_or_cold");
    ///<summary>Echos - Restart Living Room Echo</summary>
    public AutomationEntity EchosRestartLivingRoomEcho => new(_haContext, "automation.echos_restart_living_room_echo");
    ///<summary>Garage - Open While Away</summary>
    public AutomationEntity GarageOpenWhileAway => new(_haContext, "automation.garage_open_while_away");
    ///<summary>Holiday - Turn off Christmas tree</summary>
    public AutomationEntity HolidayTurnOffChristmasTree => new(_haContext, "automation.holiday_turn_off_christmas_tree");
    ///<summary>Holiday - Turn off holiday lights</summary>
    public AutomationEntity HolidayTurnOffHolidayLights => new(_haContext, "automation.holiday_turn_off_holiday_lights");
    ///<summary>Holiday - Turn on Christmas tree</summary>
    public AutomationEntity HolidayTurnOnChristmasTree => new(_haContext, "automation.holiday_turn_on_christmas_tree");
    ///<summary>Holiday - Turn on holiday lights</summary>
    public AutomationEntity HolidayTurnOnHolidayLights => new(_haContext, "automation.holiday_turn_on_holiday_lights");
    ///<summary>Laundry - Notify on Washer or Dryer Completion</summary>
    public AutomationEntity LaundryNotifyOnWasherOrDryerCompletion => new(_haContext, "automation.laundry_notify_on_washer_or_dryer_completion");
    ///<summary>Lights - Turn off all lights when nobody is home</summary>
    public AutomationEntity LightsTurnOffAllLightsWhenNobodyIsHome => new(_haContext, "automation.lights_turn_off_all_lights_when_nobody_is_home");
    ///<summary>Lights - Turn off bedroom lights when vacant</summary>
    public AutomationEntity LightsTurnOffBedroomLightsWhenVacant => new(_haContext, "automation.lights_turn_off_bedroom_lights_when_vacant");
    ///<summary>Lights - Turn off front porch lights</summary>
    public AutomationEntity LightsTurnOffFrontPorchLights => new(_haContext, "automation.lights_turn_off_front_porch_lights");
    ///<summary>Lights - Turn off garage lights when garage door closed or no motion</summary>
    public AutomationEntity LightsTurnOffGarageLightsWhenGarageDoorClosedOrNoMotion => new(_haContext, "automation.lights_turn_off_garage_lights_when_garage_door_closed_or_no_motion");
    ///<summary>Lights - Turn off garage lights when vacant</summary>
    public AutomationEntity LightsTurnOffGarageLightsWhenVacant => new(_haContext, "automation.lights_turn_off_garage_lights_when_vacant");
    ///<summary>Lights - Turn off living room automation when philips hue switch dimmer</summary>
    public AutomationEntity LightsTurnOffLivingRoomAutomationWhenPhilipsHueSwitchDimmer => new(_haContext, "automation.lights_turn_off_living_room_automation_when_philips_hue_switch_dimmer");
    ///<summary>Lights - Turn off living room lights at night when not watching TV</summary>
    public AutomationEntity LightsTurnOffLivingRoomLightsAtNightWhenNotWatchingTv => new(_haContext, "automation.lights_turn_off_living_room_lights_at_night_when_not_watching_tv");
    ///<summary>Lights - Turn off living room lights when not watching TV</summary>
    public AutomationEntity LightsTurnOffLivingRoomLightsWhenNotWatchingTv => new(_haContext, "automation.lights_turn_off_living_room_lights_when_not_watching_tv");
    ///<summary>Lights - Turn off living room lights when not watching TV at Night</summary>
    public AutomationEntity LightsTurnOffLivingRoomLightsWhenNotWatchingTvAtNight => new(_haContext, "automation.lights_turn_off_living_room_lights_when_not_watching_tv_at_night");
    ///<summary>Lights - Turn off living room lights when philips hue switch off</summary>
    public AutomationEntity LightsTurnOffLivingRoomLightsWhenPhilipsHueSwitchOff => new(_haContext, "automation.lights_turn_off_living_room_lights_when_philips_hue_switch_off");
    ///<summary>Lights - Turn on bedroom lamps with motion at night</summary>
    public AutomationEntity LightsTurnOnBedroomLampsWithMotionAtNight => new(_haContext, "automation.lights_turn_on_bedroom_lamps_with_motion_at_night");
    ///<summary>Lights - Turn on bedroom lights with motion</summary>
    public AutomationEntity LightsTurnOnBedroomLightsWithMotion => new(_haContext, "automation.lights_turn_on_bedroom_lights_with_motion");
    ///<summary>Lights - Turn on front porch lights</summary>
    public AutomationEntity LightsTurnOnFrontPorchLights => new(_haContext, "automation.lights_turn_on_front_porch_lights");
    ///<summary>Lights - Turn on garage lights when garage door opening or motion</summary>
    public AutomationEntity LightsTurnOnGarageLightsWhenGarageDoorOpeningOrMotion => new(_haContext, "automation.lights_turn_on_garage_lights_when_garage_door_opening_or_motion");
    ///<summary>Lights - Turn on garage lights with motion</summary>
    public AutomationEntity LightsTurnOnGarageLightsWithMotion => new(_haContext, "automation.lights_turn_on_garage_lights_with_motion");
    ///<summary>Lights - Turn on living room automation when philips hue switch brighter</summary>
    public AutomationEntity LightsTurnOnLivingRoomAutomationWhenPhilipsHueSwitchBrighter => new(_haContext, "automation.lights_turn_on_living_room_automation_when_philips_hue_switch_brighter");
    ///<summary>Lights - Turn on living room lights when philips hue switch on</summary>
    public AutomationEntity LightsTurnOnLivingRoomLightsWhenPhilipsHueSwitchOn => new(_haContext, "automation.lights_turn_on_living_room_lights_when_philips_hue_switch_on");
    ///<summary>Lights - Turn on living room lights when watching TV</summary>
    public AutomationEntity LightsTurnOnLivingRoomLightsWhenWatchingTv => new(_haContext, "automation.lights_turn_on_living_room_lights_when_watching_tv");
    ///<summary>Climate - Set Temperature to Day Temperature</summary>
    public AutomationEntity SetTemperatureToDayTemperature => new(_haContext, "automation.set_temperature_to_day_temperature");
    ///<summary>Climate - Set Temperature to Night Temperature</summary>
    public AutomationEntity SetTemperatureToNightTemperature => new(_haContext, "automation.set_temperature_to_night_temperature");
    ///<summary>Sleep - Sleep lighting and audio</summary>
    public AutomationEntity SleepSleepLightingAndAudio => new(_haContext, "automation.sleep_sleep_lighting_and_audio");
    ///<summary>Sleep - Turn off lights when charging phone</summary>
    public AutomationEntity SleepTurnOffLightsWhenChargingPhone => new(_haContext, "automation.sleep_turn_off_lights_when_charging_phone");
    ///<summary>Lights - Turn off bedroom lamps after alarm</summary>
    public AutomationEntity TurnOffBedroomLampsAfterAlarm => new(_haContext, "automation.turn_off_bedroom_lamps_after_alarm");
    ///<summary>Lights - Turn on bedroom lamps with alarm</summary>
    public AutomationEntity TurnOnBedroomLampsWithAlarm => new(_haContext, "automation.turn_on_bedroom_lamps_with_alarm");
    ///<summary>Lights - Turn on bedroom lights before work</summary>
    public AutomationEntity TurnOnBedroomLightsBeforeWork => new(_haContext, "automation.turn_on_bedroom_lights_before_work");
    ///<summary>Vacation - Turn off bedroom lamps</summary>
    public AutomationEntity VacationTurnOffBedroomLamps => new(_haContext, "automation.vacation_turn_off_bedroom_lamps");
    ///<summary>Vacation - Turn off bedroom lamps at night</summary>
    public AutomationEntity VacationTurnOffBedroomLampsAtNightDuringVacation => new(_haContext, "automation.vacation_turn_off_bedroom_lamps_at_night_during_vacation");
    ///<summary>Vacation - Turn off downstairs lights and turn on bedroom lamps</summary>
    public AutomationEntity VacationTurnOffDownstairsLightsAndTurnOnBedroomLamps => new(_haContext, "automation.vacation_turn_off_downstairs_lights_and_turn_on_bedroom_lamps");
    ///<summary>Vacation - Turn off kitchen lights and turn on downstairs lights</summary>
    public AutomationEntity VacationTurnOffKitchenLightsAndTurnOnDownstairsLights => new(_haContext, "automation.vacation_turn_off_kitchen_lights_and_turn_on_downstairs_lights");
    ///<summary>Vacation - Turn off living room lamps and turn on bedroom lamps at night</summary>
    public AutomationEntity VacationTurnOffLivingRoomLampsAndTurnOnBedroomLampsAtNightDuringVacation => new(_haContext, "automation.vacation_turn_off_living_room_lamps_and_turn_on_bedroom_lamps_at_night_during_vacation");
    ///<summary>Vacation - Turn on kitchen lights</summary>
    public AutomationEntity VacationTurnOnKitchenLights => new(_haContext, "automation.vacation_turn_on_kitchen_lights");
    ///<summary>Vacation - Turn on living room lamps in evening</summary>
    public AutomationEntity VacationTurnOnLivingRoomLampsInEveningDuringVacation => new(_haContext, "automation.vacation_turn_on_living_room_lamps_in_evening_during_vacation");
    ///<summary>Zone - People Gone</summary>
    public AutomationEntity ZonePeopleGone => new(_haContext, "automation.zone_people_gone");
    ///<summary>Zone - People in Cambridge (Climate)</summary>
    public AutomationEntity ZonePeopleInCambridgeClimate => new(_haContext, "automation.zone_people_in_cambridge_climate");
    ///<summary>Zone - People Near Home</summary>
    public AutomationEntity ZonePeopleNearHome => new(_haContext, "automation.zone_people_near_home");
}

public partial class BinarySensorEntities
{
    private readonly IHaContext _haContext;
    public BinarySensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all binary_sensor entities currently registered (at runtime) in Home Assistant as BinarySensorEntity</summary>
    public IEnumerable<BinarySensorEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("binary_sensor.")).Select(e => new BinarySensorEntity(e));
    ///<summary>TrueNAS Services afp</summary>
    public BinarySensorEntity Afp => new(_haContext, "binary_sensor.afp");
    ///<summary>Allison Phone (10) Focus</summary>
    public BinarySensorEntity AllisonPhone10Focus => new(_haContext, "binary_sensor.allison_phone_10_focus");
    ///<summary>Cloud connection</summary>
    public BinarySensorEntity BackOutsidePlugsCloudConnection => new(_haContext, "binary_sensor.back_outside_plugs_cloud_connection");
    ///<summary>Backups Stale</summary>
    public BinarySensorEntity BackupsStale => new(_haContext, "binary_sensor.backups_stale");
    ///<summary>Cat Camera Down Smart Plug Button</summary>
    public BinarySensorEntity CatCameraDownSmartPlugButton => new(_haContext, "binary_sensor.cat_camera_down_smart_plug_button");
    ///<summary>Cat Camera Down Smart Plug Status</summary>
    public BinarySensorEntity CatCameraDownSmartPlugStatus => new(_haContext, "binary_sensor.cat_camera_down_smart_plug_status");
    ///<summary>Cat Camera Downstairs Is Dark</summary>
    public BinarySensorEntity CatCameraDownstairsIsDark => new(_haContext, "binary_sensor.cat_camera_downstairs_is_dark");
    ///<summary>Cat Camera Downstairs Motion</summary>
    public BinarySensorEntity CatCameraDownstairsMotion => new(_haContext, "binary_sensor.cat_camera_downstairs_motion");
    ///<summary>Cat Camera Up Smart Plug Button</summary>
    public BinarySensorEntity CatCameraUpSmartPlugButton => new(_haContext, "binary_sensor.cat_camera_up_smart_plug_button");
    ///<summary>Cat Camera Up Smart Plug Status</summary>
    public BinarySensorEntity CatCameraUpSmartPlugStatus => new(_haContext, "binary_sensor.cat_camera_up_smart_plug_status");
    ///<summary>Cat Camera Upstairs Is Dark</summary>
    public BinarySensorEntity CatCameraUpstairsIsDark => new(_haContext, "binary_sensor.cat_camera_upstairs_is_dark");
    ///<summary>Cat Camera Upstairs Motion</summary>
    public BinarySensorEntity CatCameraUpstairsMotion => new(_haContext, "binary_sensor.cat_camera_upstairs_motion");
    ///<summary>Christmas Tree Smart Plug Button</summary>
    public BinarySensorEntity ChristmasTreeSmartPlugButton => new(_haContext, "binary_sensor.christmas_tree_smart_plug_button");
    ///<summary>Christmas Tree Smart Plug Status</summary>
    public BinarySensorEntity ChristmasTreeSmartPlugStatus => new(_haContext, "binary_sensor.christmas_tree_smart_plug_status");
    ///<summary>TrueNAS Services cifs</summary>
    public BinarySensorEntity Cifs => new(_haContext, "binary_sensor.cifs");
    ///<summary>Downstairs TV on</summary>
    public BinarySensorEntity DownstairsTvOn => new(_haContext, "binary_sensor.downstairs_tv_on");
    ///<summary>Downstairs TV Smart Plug Button</summary>
    public BinarySensorEntity DownstairsTvSmartPlugButton => new(_haContext, "binary_sensor.downstairs_tv_smart_plug_button");
    ///<summary>Downstairs TV Smart Plug Status</summary>
    public BinarySensorEntity DownstairsTvSmartPlugStatus => new(_haContext, "binary_sensor.downstairs_tv_smart_plug_status");
    ///<summary>TrueNAS Services dynamicdns</summary>
    public BinarySensorEntity Dynamicdns => new(_haContext, "binary_sensor.dynamicdns");
    ///<summary>System Eve healthy</summary>
    public BinarySensorEntity EveHealthy => new(_haContext, "binary_sensor.eve_healthy");
    ///<summary>System freenas-boot healthy</summary>
    public BinarySensorEntity FreenasBootHealthy => new(_haContext, "binary_sensor.freenas_boot_healthy");
    ///<summary>Front Door Lock Current status of the door</summary>
    public BinarySensorEntity FrontDoorLockCurrentStatusOfTheDoor => new(_haContext, "binary_sensor.front_door_lock_current_status_of_the_door");
    ///<summary>Front Door Lock Intrusion</summary>
    public BinarySensorEntity FrontDoorLockIntrusion => new(_haContext, "binary_sensor.front_door_lock_intrusion");
    ///<summary>Front Door Lock Keypad temporary disabled</summary>
    public BinarySensorEntity FrontDoorLockKeypadTemporaryDisabled => new(_haContext, "binary_sensor.front_door_lock_keypad_temporary_disabled");
    ///<summary>Front Door Lock Lock jammed</summary>
    public BinarySensorEntity FrontDoorLockLockJammed => new(_haContext, "binary_sensor.front_door_lock_lock_jammed");
    ///<summary>Front Door Lock Low battery level</summary>
    public BinarySensorEntity FrontDoorLockLowBatteryLevel => new(_haContext, "binary_sensor.front_door_lock_low_battery_level");
    ///<summary>Front Door Lock Replace battery now</summary>
    public BinarySensorEntity FrontDoorLockReplaceBatteryNow => new(_haContext, "binary_sensor.front_door_lock_replace_battery_now");
    ///<summary>Front Door Lock Replace battery soon</summary>
    public BinarySensorEntity FrontDoorLockReplaceBatterySoon => new(_haContext, "binary_sensor.front_door_lock_replace_battery_soon");
    ///<summary>Front Door Lock System hardware failure</summary>
    public BinarySensorEntity FrontDoorLockSystemHardwareFailure => new(_haContext, "binary_sensor.front_door_lock_system_hardware_failure");
    ///<summary>Front Outside Plugs Cloud connection</summary>
    public BinarySensorEntity FrontOutsidePlugsCloudConnection => new(_haContext, "binary_sensor.front_outside_plugs_cloud_connection");
    ///<summary>TrueNAS Services ftp</summary>
    public BinarySensorEntity Ftp => new(_haContext, "binary_sensor.ftp");
    ///<summary>G4 Doorbell Pro Animal detected</summary>
    public BinarySensorEntity G4DoorbellProAnimalDetected => new(_haContext, "binary_sensor.g4_doorbell_pro_animal_detected");
    ///<summary>G4 Doorbell Pro Audio object detected</summary>
    public BinarySensorEntity G4DoorbellProAudioObjectDetected => new(_haContext, "binary_sensor.g4_doorbell_pro_audio_object_detected");
    ///<summary>G4 Doorbell Pro CO alarm detected</summary>
    public BinarySensorEntity G4DoorbellProCoAlarmDetected => new(_haContext, "binary_sensor.g4_doorbell_pro_co_alarm_detected");
    ///<summary>G4 Doorbell Pro Doorbell</summary>
    public BinarySensorEntity G4DoorbellProDoorbell => new(_haContext, "binary_sensor.g4_doorbell_pro_doorbell");
    ///<summary>G4 Doorbell Pro Is dark</summary>
    public BinarySensorEntity G4DoorbellProIsDark => new(_haContext, "binary_sensor.g4_doorbell_pro_is_dark");
    ///<summary>G4 Doorbell Pro Motion</summary>
    public BinarySensorEntity G4DoorbellProMotion => new(_haContext, "binary_sensor.g4_doorbell_pro_motion");
    ///<summary>G4 Doorbell Pro Object detected</summary>
    public BinarySensorEntity G4DoorbellProObjectDetected => new(_haContext, "binary_sensor.g4_doorbell_pro_object_detected");
    ///<summary>G4 Doorbell Pro Package detected</summary>
    public BinarySensorEntity G4DoorbellProPackageDetected => new(_haContext, "binary_sensor.g4_doorbell_pro_package_detected");
    ///<summary>G4 Doorbell Pro Person detected</summary>
    public BinarySensorEntity G4DoorbellProPersonDetected => new(_haContext, "binary_sensor.g4_doorbell_pro_person_detected");
    ///<summary>G4 Doorbell Pro Smoke alarm detected</summary>
    public BinarySensorEntity G4DoorbellProSmokeAlarmDetected => new(_haContext, "binary_sensor.g4_doorbell_pro_smoke_alarm_detected");
    ///<summary>G4 Doorbell Pro Vehicle detected</summary>
    public BinarySensorEntity G4DoorbellProVehicleDetected => new(_haContext, "binary_sensor.g4_doorbell_pro_vehicle_detected");
    ///<summary>Garage Door Sensor: Access Control - Window/door is open</summary>
    public BinarySensorEntity GarageDoorSensorDoorIsOpen => new(_haContext, "binary_sensor.garage_door_sensor_door_is_open");
    ///<summary>Garage Door Sensor: Home Security - Tampering, product cover removed</summary>
    public BinarySensorEntity GarageDoorSensorHomeSecurityTamperingProductCoverRemoved => new(_haContext, "binary_sensor.garage_door_sensor_home_security_tampering_product_cover_removed");
    ///<summary>Garage Door Sensor: Low battery level</summary>
    public BinarySensorEntity GarageDoorSensorLowBatteryLevel => new(_haContext, "binary_sensor.garage_door_sensor_low_battery_level");
    ///<summary>Garage Door Sensor: Power Management - Replace battery now</summary>
    public BinarySensorEntity GarageDoorSensorPowerManagementReplaceBatteryNow => new(_haContext, "binary_sensor.garage_door_sensor_power_management_replace_battery_now");
    ///<summary>Garage Door Sensor Window/door is open</summary>
    public BinarySensorEntity GarageDoorSensorWindowDoorIsOpen => new(_haContext, "binary_sensor.garage_door_sensor_window_door_is_open");
    ///<summary>Garage Lights: Motion detection</summary>
    public BinarySensorEntity GarageLightsMotionDetection => new(_haContext, "binary_sensor.garage_lights_motion_detection");
    ///<summary>Internet Modem Smart Plug Button</summary>
    public BinarySensorEntity InternetModemSmartPlugButton => new(_haContext, "binary_sensor.internet_modem_smart_plug_button");
    ///<summary>Internet Modem Smart Plug Status</summary>
    public BinarySensorEntity InternetModemSmartPlugStatus => new(_haContext, "binary_sensor.internet_modem_smart_plug_status");
    ///<summary>Internet Up</summary>
    public BinarySensorEntity InternetUp => new(_haContext, "binary_sensor.internet_up");
    ///<summary>TrueNAS Services iscsitarget</summary>
    public BinarySensorEntity Iscsitarget => new(_haContext, "binary_sensor.iscsitarget");
    ///<summary>Living Room Echo Cloud connection</summary>
    public BinarySensorEntity LivingRoomEchoCloudConnection => new(_haContext, "binary_sensor.living_room_echo_cloud_connection");
    ///<summary>TrueNAS Services lldp</summary>
    public BinarySensorEntity Lldp => new(_haContext, "binary_sensor.lldp");
    ///<summary>Main Thermostat AC mains re-connected</summary>
    public BinarySensorEntity MainAcMainsReConnected => new(_haContext, "binary_sensor.main_ac_mains_re_connected");
    ///<summary>Main Thermostat Low battery level</summary>
    public BinarySensorEntity MainLowBatteryLevel => new(_haContext, "binary_sensor.main_low_battery_level");
    ///<summary>nextcloud-2023</summary>
    public BinarySensorEntity Nextcloud2023 => new(_haContext, "binary_sensor.nextcloud_2023");
    ///<summary>TrueNAS Services nfs</summary>
    public BinarySensorEntity Nfs => new(_haContext, "binary_sensor.nfs");
    ///<summary>TrueNAS Services openvpn_client</summary>
    public BinarySensorEntity OpenvpnClient => new(_haContext, "binary_sensor.openvpn_client");
    ///<summary>TrueNAS Services openvpn_server</summary>
    public BinarySensorEntity OpenvpnServer => new(_haContext, "binary_sensor.openvpn_server");
    ///<summary>Owen Computer active</summary>
    public BinarySensorEntity OwenComputerActive => new(_haContext, "binary_sensor.owen_computer_active");
    ///<summary>Owen Computer Smart Plug Button</summary>
    public BinarySensorEntity OwenComputerSmartPlugButton => new(_haContext, "binary_sensor.owen_computer_smart_plug_button");
    ///<summary>Owen Computer Smart Plug Status</summary>
    public BinarySensorEntity OwenComputerSmartPlugStatus => new(_haContext, "binary_sensor.owen_computer_smart_plug_status");
    ///<summary>Owen Phone Is Charging</summary>
    public BinarySensorEntity OwenPhoneIsCharging => new(_haContext, "binary_sensor.owen_phone_is_charging");
    ///<summary>Philips RWL020 Binary input</summary>
    public BinarySensorEntity PhilipsRwl020BinaryInput => new(_haContext, "binary_sensor.philips_rwl020_binary_input");
    ///<summary>Plex-Plugin</summary>
    public BinarySensorEntity PlexPlugin => new(_haContext, "binary_sensor.plex_plugin");
    ///<summary>Garage-Door-Primary Button</summary>
    public BinarySensorEntity PrimaryGarageDoorButton => new(_haContext, "binary_sensor.primary_garage_door_button");
    ///<summary>Garage-Door-Primary Dry contact close</summary>
    public BinarySensorEntity PrimaryGarageDoorDryContactClose => new(_haContext, "binary_sensor.primary_garage_door_dry_contact_close");
    ///<summary>Garage-Door-Primary Dry contact light</summary>
    public BinarySensorEntity PrimaryGarageDoorDryContactLight => new(_haContext, "binary_sensor.primary_garage_door_dry_contact_light");
    ///<summary>Garage-Door-Primary Dry contact open</summary>
    public BinarySensorEntity PrimaryGarageDoorDryContactOpen => new(_haContext, "binary_sensor.primary_garage_door_dry_contact_open");
    ///<summary>Garage-Door-Primary Motion</summary>
    public BinarySensorEntity PrimaryGarageDoorMotion => new(_haContext, "binary_sensor.primary_garage_door_motion");
    ///<summary>Garage-Door-Primary Motor</summary>
    public BinarySensorEntity PrimaryGarageDoorMotor => new(_haContext, "binary_sensor.primary_garage_door_motor");
    ///<summary>Garage-Door-Primary Obstruction</summary>
    public BinarySensorEntity PrimaryGarageDoorObstruction => new(_haContext, "binary_sensor.primary_garage_door_obstruction");
    ///<summary>Primary Pi-Hole Status</summary>
    public BinarySensorEntity PrimaryPiHole => new(_haContext, "binary_sensor.primary_pi_hole");
    ///<summary>Core Update Available</summary>
    public BinarySensorEntity PrimaryPiHoleCoreUpdateAvailable => new(_haContext, "binary_sensor.primary_pi_hole_core_update_available");
    ///<summary>FTL Update Available</summary>
    public BinarySensorEntity PrimaryPiHoleFtlUpdateAvailable => new(_haContext, "binary_sensor.primary_pi_hole_ftl_update_available");
    ///<summary>Web Update Available</summary>
    public BinarySensorEntity PrimaryPiHoleWebUpdateAvailable => new(_haContext, "binary_sensor.primary_pi_hole_web_update_available");
    ///<summary>Remote UI</summary>
    public BinarySensorEntity RemoteUi => new(_haContext, "binary_sensor.remote_ui");
    ///<summary>RPi Power status</summary>
    public BinarySensorEntity RpiPowerStatus => new(_haContext, "binary_sensor.rpi_power_status");
    ///<summary>TrueNAS Services rsync</summary>
    public BinarySensorEntity Rsync => new(_haContext, "binary_sensor.rsync");
    ///<summary>TrueNAS Services s3</summary>
    public BinarySensorEntity S3 => new(_haContext, "binary_sensor.s3");
    ///<summary>Secondary Pi-Hole Status</summary>
    public BinarySensorEntity SecondaryPiHole => new(_haContext, "binary_sensor.secondary_pi_hole");
    ///<summary>Core Update Available</summary>
    public BinarySensorEntity SecondaryPiHoleCoreUpdateAvailable => new(_haContext, "binary_sensor.secondary_pi_hole_core_update_available");
    ///<summary>FTL Update Available</summary>
    public BinarySensorEntity SecondaryPiHoleFtlUpdateAvailable => new(_haContext, "binary_sensor.secondary_pi_hole_ftl_update_available");
    ///<summary>Web Update Available</summary>
    public BinarySensorEntity SecondaryPiHoleWebUpdateAvailable => new(_haContext, "binary_sensor.secondary_pi_hole_web_update_available");
    ///<summary>TrueNAS Services smartd</summary>
    public BinarySensorEntity Smartd => new(_haContext, "binary_sensor.smartd");
    ///<summary>TrueNAS Services snmp</summary>
    public BinarySensorEntity Snmp => new(_haContext, "binary_sensor.snmp");
    ///<summary>TrueNAS Services ssh</summary>
    public BinarySensorEntity Ssh => new(_haContext, "binary_sensor.ssh");
    ///<summary>Sullivan Security HDD 1</summary>
    public BinarySensorEntity SullivanSecurityHdd1 => new(_haContext, "binary_sensor.sullivan_security_hdd_1");
    ///<summary>TrueNAS Services tftp</summary>
    public BinarySensorEntity Tftp => new(_haContext, "binary_sensor.tftp");
    ///<summary>Treadmill active</summary>
    public BinarySensorEntity TreadmillActive => new(_haContext, "binary_sensor.treadmill_active");
    ///<summary>Treadmill Smart Plug Button</summary>
    public BinarySensorEntity TreadmillSmartPlugButton => new(_haContext, "binary_sensor.treadmill_smart_plug_button");
    ///<summary>Treadmill Smart Plug Status</summary>
    public BinarySensorEntity TreadmillSmartPlugStatus => new(_haContext, "binary_sensor.treadmill_smart_plug_status");
    ///<summary>TrueNAS Jails nextcloud-2023</summary>
    public BinarySensorEntity TruenasJailsNextcloud2023 => new(_haContext, "binary_sensor.truenas_jails_nextcloud_2023");
    ///<summary>Plex-Plugin</summary>
    public BinarySensorEntity TruenasJailsPlexPlugin => new(_haContext, "binary_sensor.truenas_jails_plex_plugin");
    ///<summary>Updater</summary>
    public BinarySensorEntity Updater => new(_haContext, "binary_sensor.updater");
    ///<summary>TrueNAS Services ups</summary>
    public BinarySensorEntity Ups => new(_haContext, "binary_sensor.ups");
    ///<summary>Upstairs TV on</summary>
    public BinarySensorEntity UpstairsTvOn => new(_haContext, "binary_sensor.upstairs_tv_on");
    ///<summary>Upstairs TV Smart Plug Button</summary>
    public BinarySensorEntity UpstairsTvSmartPlugButton => new(_haContext, "binary_sensor.upstairs_tv_smart_plug_button");
    ///<summary>Upstairs TV Smart Plug Status</summary>
    public BinarySensorEntity UpstairsTvSmartPlugStatus => new(_haContext, "binary_sensor.upstairs_tv_smart_plug_status");
    ///<summary>Utility Room Lights: Home Security - Motion detection</summary>
    public BinarySensorEntity UtilityRoomLightsMotionDetection => new(_haContext, "binary_sensor.utility_room_lights_motion_detection");
    ///<summary>TrueNAS Services webdav</summary>
    public BinarySensorEntity Webdav => new(_haContext, "binary_sensor.webdav");
    ///<summary>Workday Sensor</summary>
    public BinarySensorEntity WorkdaySensor => new(_haContext, "binary_sensor.workday_sensor");
}

public partial class ButtonEntities
{
    private readonly IHaContext _haContext;
    public ButtonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all button entities currently registered (at runtime) in Home Assistant as ButtonEntity</summary>
    public IEnumerable<ButtonEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("button.")).Select(e => new ButtonEntity(e));
    ///<summary>Allison Living Room Lamp Button Identify</summary>
    public ButtonEntity AllisonLivingRoomLampButtonIdentify => new(_haContext, "button.allison_living_room_lamp_button_identify");
    ///<summary>Allison Living Room Lamp: Ping</summary>
    public ButtonEntity AllisonLivingRoomLampPing => new(_haContext, "button.allison_living_room_lamp_ping");
    ///<summary>Bedroom Lights Ping</summary>
    public ButtonEntity BedroomLightsPing => new(_haContext, "button.bedroom_lights_ping");
    ///<summary>Bedroom Temperature Sensor Identify</summary>
    public ButtonEntity BedroomTemperatureSensorIdentify => new(_haContext, "button.bedroom_temperature_sensor_identify");
    ///<summary>Counter Lights Ping</summary>
    public ButtonEntity CounterLightsPing => new(_haContext, "button.counter_lights_ping");
    ///<summary>Identify</summary>
    public ButtonEntity DeckStringLightsIdentify => new(_haContext, "button.deck_string_lights_identify");
    ///<summary>Deck String Lights Ping</summary>
    public ButtonEntity DeckStringLightsPing => new(_haContext, "button.deck_string_lights_ping");
    ///<summary>Restart</summary>
    public ButtonEntity DefaultRestart => new(_haContext, "button.default_restart");
    ///<summary>Dining Room Lights Ping</summary>
    public ButtonEntity DiningRoomLightsPing => new(_haContext, "button.dining_room_lights_ping");
    ///<summary>Downstairs Lights Ping</summary>
    public ButtonEntity DownstairsLightsPing => new(_haContext, "button.downstairs_lights_ping");
    ///<summary>Elgato Key Light Left Restart</summary>
    public ButtonEntity ElgatoKeyLightLeftRestart => new(_haContext, "button.elgato_key_light_left_restart");
    ///<summary>Elgato Key Light Right Restart</summary>
    public ButtonEntity ElgatoKeyLightRightRestart => new(_haContext, "button.elgato_key_light_right_restart");
    ///<summary>Front Door Lock Idle Access Control Keypad state</summary>
    public ButtonEntity FrontDoorLockIdleAccessControlKeypadState => new(_haContext, "button.front_door_lock_idle_access_control_keypad_state");
    ///<summary>Front Door Lock Idle Access Control Lock state</summary>
    public ButtonEntity FrontDoorLockIdleAccessControlLockState => new(_haContext, "button.front_door_lock_idle_access_control_lock_state");
    ///<summary>Front Door Lock Idle Home Security Sensor status</summary>
    public ButtonEntity FrontDoorLockIdleHomeSecuritySensorStatus => new(_haContext, "button.front_door_lock_idle_home_security_sensor_status");
    ///<summary>Front Door Lock Idle Power Management Battery maintenance status</summary>
    public ButtonEntity FrontDoorLockIdlePowerManagementBatteryMaintenanceStatus => new(_haContext, "button.front_door_lock_idle_power_management_battery_maintenance_status");
    ///<summary>Front Door Lock Idle System Hardware status</summary>
    public ButtonEntity FrontDoorLockIdleSystemHardwareStatus => new(_haContext, "button.front_door_lock_idle_system_hardware_status");
    ///<summary>Front Door Lock Ping</summary>
    public ButtonEntity FrontDoorLockPing => new(_haContext, "button.front_door_lock_ping");
    ///<summary>Front Porch Lights Ping</summary>
    public ButtonEntity FrontPorchLightsPing => new(_haContext, "button.front_porch_lights_ping");
    ///<summary>Garage Door Sensor Idle Power Management Battery maintenance status</summary>
    public ButtonEntity GarageDoorSensorIdleBatteryMaintenanceStatus => new(_haContext, "button.garage_door_sensor_idle_battery_maintenance_status");
    ///<summary>Garage Door Sensor Idle Home Security Cover status</summary>
    public ButtonEntity GarageDoorSensorIdleCoverStatus => new(_haContext, "button.garage_door_sensor_idle_cover_status");
    ///<summary>Garage Lights Idle Home Security Motion sensor status</summary>
    public ButtonEntity GarageLightsIdleMotionSensorStatus => new(_haContext, "button.garage_lights_idle_motion_sensor_status");
    ///<summary>Garage Lights: Ping</summary>
    public ButtonEntity GarageLightsPing => new(_haContext, "button.garage_lights_ping");
    ///<summary>Elgato Key Light Left Identify</summary>
    public ButtonEntity Identify => new(_haContext, "button.identify");
    ///<summary>Elgato Key Light Right Identify</summary>
    public ButtonEntity Identify2 => new(_haContext, "button.identify_2");
    ///<summary>Kitchen Lights Ping</summary>
    public ButtonEntity KitchenLights => new(_haContext, "button.kitchen_lights");
    ///<summary>Laundry Room Lights Ping</summary>
    public ButtonEntity LaundryRoomLightsPing => new(_haContext, "button.laundry_room_lights_ping");
    ///<summary>Main Thermostat Identify</summary>
    public ButtonEntity MainIdentify => new(_haContext, "button.main_identify");
    ///<summary>Node 15 Ping</summary>
    public ButtonEntity Node15Ping => new(_haContext, "button.node_15_ping");
    ///<summary>Node 21 Ping</summary>
    public ButtonEntity Node21Ping => new(_haContext, "button.node_21_ping");
    ///<summary>Bedroom Fan Ping</summary>
    public ButtonEntity Node23Ping => new(_haContext, "button.node_23_ping");
    ///<summary>Deck Lights Ping</summary>
    public ButtonEntity Node24Ping => new(_haContext, "button.node_24_ping");
    ///<summary>Main Thermostat Ping</summary>
    public ButtonEntity Node25Ping => new(_haContext, "button.node_25_ping");
    ///<summary>Garage Door Sensor: Ping</summary>
    public ButtonEntity Node4Ping => new(_haContext, "button.node_4_ping");
    ///<summary>Office Lights Ping</summary>
    public ButtonEntity OfficeLightsPing => new(_haContext, "button.office_lights_ping");
    ///<summary>Restart</summary>
    public ButtonEntity OfficeSwitchRestart => new(_haContext, "button.office_switch_restart");
    ///<summary>Office Temperature Sensor Identify</summary>
    public ButtonEntity OfficeTemperatureSensorIdentify => new(_haContext, "button.office_temperature_sensor_identify");
    ///<summary>Owen Living Room Lamp Button Identify</summary>
    public ButtonEntity OwenLivingRoomLampButtonIdentify2 => new(_haContext, "button.owen_living_room_lamp_button_identify_2");
    ///<summary>Owen Living Room Lamp: Ping</summary>
    public ButtonEntity OwenLivingRoomLampPing => new(_haContext, "button.owen_living_room_lamp_ping");
    ///<summary>Philips RWL020 Identify</summary>
    public ButtonEntity PhilipsRwl020Identify => new(_haContext, "button.philips_rwl020_identify");
    ///<summary>Garage-Door-Primary Query openings</summary>
    public ButtonEntity PrimaryGarageDoorQueryOpenings => new(_haContext, "button.primary_garage_door_query_openings");
    ///<summary>Garage-Door-Primary Query status</summary>
    public ButtonEntity PrimaryGarageDoorQueryStatus => new(_haContext, "button.primary_garage_door_query_status");
    ///<summary>Garage-Door-Primary Restart</summary>
    public ButtonEntity PrimaryGarageDoorRestart => new(_haContext, "button.primary_garage_door_restart");
    ///<summary>Garage-Door-Primary Safe mode boot</summary>
    public ButtonEntity PrimaryGarageDoorSafeModeBoot => new(_haContext, "button.primary_garage_door_safe_mode_boot");
    ///<summary>Garage-Door-Primary Sync</summary>
    public ButtonEntity PrimaryGarageDoorSync => new(_haContext, "button.primary_garage_door_sync");
    ///<summary>Garage-Door-Primary Toggle door</summary>
    public ButtonEntity PrimaryGarageDoorToggleDoor => new(_haContext, "button.primary_garage_door_toggle_door");
    ///<summary>Port 1 Power Cycle</summary>
    public ButtonEntity RackSwitchPort1PowerCycle => new(_haContext, "button.rack_switch_port_1_power_cycle");
    ///<summary>Port 10 Power Cycle</summary>
    public ButtonEntity RackSwitchPort10PowerCycle => new(_haContext, "button.rack_switch_port_10_power_cycle");
    ///<summary>Port 11 Power Cycle</summary>
    public ButtonEntity RackSwitchPort11PowerCycle => new(_haContext, "button.rack_switch_port_11_power_cycle");
    ///<summary>Port 12 Power Cycle</summary>
    public ButtonEntity RackSwitchPort12PowerCycle => new(_haContext, "button.rack_switch_port_12_power_cycle");
    ///<summary>Port 13 Power Cycle</summary>
    public ButtonEntity RackSwitchPort13PowerCycle => new(_haContext, "button.rack_switch_port_13_power_cycle");
    ///<summary>Port 14 Power Cycle</summary>
    public ButtonEntity RackSwitchPort14PowerCycle => new(_haContext, "button.rack_switch_port_14_power_cycle");
    ///<summary>Port 15 Power Cycle</summary>
    public ButtonEntity RackSwitchPort15PowerCycle => new(_haContext, "button.rack_switch_port_15_power_cycle");
    ///<summary>Port 16 Power Cycle</summary>
    public ButtonEntity RackSwitchPort16PowerCycle => new(_haContext, "button.rack_switch_port_16_power_cycle");
    ///<summary>Port 2 Power Cycle</summary>
    public ButtonEntity RackSwitchPort2PowerCycle => new(_haContext, "button.rack_switch_port_2_power_cycle");
    ///<summary>Port 3 Power Cycle</summary>
    public ButtonEntity RackSwitchPort3PowerCycle => new(_haContext, "button.rack_switch_port_3_power_cycle");
    ///<summary>Port 4 Power Cycle</summary>
    public ButtonEntity RackSwitchPort4PowerCycle => new(_haContext, "button.rack_switch_port_4_power_cycle");
    ///<summary>Port 5 Power Cycle</summary>
    public ButtonEntity RackSwitchPort5PowerCycle => new(_haContext, "button.rack_switch_port_5_power_cycle");
    ///<summary>Port 6 Power Cycle</summary>
    public ButtonEntity RackSwitchPort6PowerCycle => new(_haContext, "button.rack_switch_port_6_power_cycle");
    ///<summary>Port 7 Power Cycle</summary>
    public ButtonEntity RackSwitchPort7PowerCycle => new(_haContext, "button.rack_switch_port_7_power_cycle");
    ///<summary>Port 8 Power Cycle</summary>
    public ButtonEntity RackSwitchPort8PowerCycle => new(_haContext, "button.rack_switch_port_8_power_cycle");
    ///<summary>Port 9 Power Cycle</summary>
    public ButtonEntity RackSwitchPort9PowerCycle => new(_haContext, "button.rack_switch_port_9_power_cycle");
    ///<summary>Restart</summary>
    public ButtonEntity RackSwitchRestart => new(_haContext, "button.rack_switch_restart");
    ///<summary>Restart</summary>
    public ButtonEntity RaptureCentralControlRestart => new(_haContext, "button.rapture_central_control_restart");
    ///<summary>Restart</summary>
    public ButtonEntity RaptureCentralControlRestart2 => new(_haContext, "button.rapture_central_control_restart_2");
    ///<summary>Router Smart Plug Identify</summary>
    public ButtonEntity RouterSmartPlugIdentify => new(_haContext, "button.router_smart_plug_identify");
    ///<summary>Allison Bedroom Lamp Identify</summary>
    public ButtonEntity SignifyNetherlandsBVLtw015Identify => new(_haContext, "button.signify_netherlands_b_v_ltw015_identify");
    ///<summary>Owen Bedroom Lamp Identify</summary>
    public ButtonEntity SignifyNetherlandsBVLtw015Identify2 => new(_haContext, "button.signify_netherlands_b_v_ltw015_identify_2");
    ///<summary>Office Lamp Identify</summary>
    public ButtonEntity SignifyNetherlandsBVLwa003Identify => new(_haContext, "button.signify_netherlands_b_v_lwa003_identify");
    ///<summary>Stairway Lights Ping</summary>
    public ButtonEntity StairwayLightsPing => new(_haContext, "button.stairway_lights_ping");
    ///<summary>Restart</summary>
    public ButtonEntity TvSwitchRestart => new(_haContext, "button.tv_switch_restart");
    ///<summary>Restart</summary>
    public ButtonEntity Us860wRestart => new(_haContext, "button.us_8_60w_restart");
    ///<summary>Utility Room Lights Idle Home Security Motion sensor status</summary>
    public ButtonEntity UtilityRoomLightsIdleMotionSensorStatus => new(_haContext, "button.utility_room_lights_idle_motion_sensor_status");
    ///<summary>Utility Room Lights Ping</summary>
    public ButtonEntity UtilityRoomLightsPing => new(_haContext, "button.utility_room_lights_ping");
    ///<summary>Wake on LAN Owen Desktop</summary>
    public ButtonEntity WakeOnLanOwenDesktop => new(_haContext, "button.wake_on_lan_owen_desktop");
}

public partial class CameraEntities
{
    private readonly IHaContext _haContext;
    public CameraEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all camera entities currently registered (at runtime) in Home Assistant as CameraEntity</summary>
    public IEnumerable<CameraEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("camera.")).Select(e => new CameraEntity(e));
    ///<summary>Cat Camera Downstairs High</summary>
    public CameraEntity CatCameraDownstairsHigh => new(_haContext, "camera.cat_camera_downstairs_high");
    ///<summary>Cat Camera Upstairs High</summary>
    public CameraEntity CatCameraUpstairsHigh => new(_haContext, "camera.cat_camera_upstairs_high");
    ///<summary>floor_plan_garage</summary>
    public CameraEntity FloorPlanGarage => new(_haContext, "camera.floor_plan_garage");
    ///<summary>floor_plan_lower</summary>
    public CameraEntity FloorPlanLower => new(_haContext, "camera.floor_plan_lower");
    ///<summary>floor_plan_upper</summary>
    public CameraEntity FloorPlanUpper => new(_haContext, "camera.floor_plan_upper");
    ///<summary>G4 Doorbell Pro High resolution channel</summary>
    public CameraEntity G4DoorbellProHigh => new(_haContext, "camera.g4_doorbell_pro_high");
    ///<summary>G4 Doorbell Pro Package Camera</summary>
    public CameraEntity G4DoorbellProPackageCamera => new(_haContext, "camera.g4_doorbell_pro_package_camera");
}

public partial class ClimateEntities
{
    private readonly IHaContext _haContext;
    public ClimateEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all climate entities currently registered (at runtime) in Home Assistant as ClimateEntity</summary>
    public IEnumerable<ClimateEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("climate.")).Select(e => new ClimateEntity(e));
    public ClimateEntity KitchenThermostat => new(_haContext, "climate.kitchen_thermostat");
    ///<summary>Main Thermostat </summary>
    public ClimateEntity Main => new(_haContext, "climate.main");
}

public partial class ConversationEntities
{
    private readonly IHaContext _haContext;
    public ConversationEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all conversation entities currently registered (at runtime) in Home Assistant as ConversationEntity</summary>
    public IEnumerable<ConversationEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("conversation.")).Select(e => new ConversationEntity(e));
    ///<summary>Home Assistant</summary>
    public ConversationEntity HomeAssistant => new(_haContext, "conversation.home_assistant");
}

public partial class CoverEntities
{
    private readonly IHaContext _haContext;
    public CoverEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all cover entities currently registered (at runtime) in Home Assistant as CoverEntity</summary>
    public IEnumerable<CoverEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("cover.")).Select(e => new CoverEntity(e));
    ///<summary>Garage-Door-Primary Door</summary>
    public CoverEntity PrimaryGarageDoor => new(_haContext, "cover.primary_garage_door");
}

public partial class DeviceTrackerEntities
{
    private readonly IHaContext _haContext;
    public DeviceTrackerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all device_tracker entities currently registered (at runtime) in Home Assistant as DeviceTrackerEntity</summary>
    public IEnumerable<DeviceTrackerEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("device_tracker.")).Select(e => new DeviceTrackerEntity(e));
    ///<summary>Allison iPad Air</summary>
    public DeviceTrackerEntity AllisonIpadAir => new(_haContext, "device_tracker.allison_ipad_air");
    ///<summary>Allison</summary>
    public DeviceTrackerEntity AllisonPhone10 => new(_haContext, "device_tracker.allison_phone_10");
    ///<summary>Bedroom Echo Show</summary>
    public DeviceTrackerEntity BedroomEchoShow => new(_haContext, "device_tracker.bedroom_echo_show");
    ///<summary>Downstairs Chromecast</summary>
    public DeviceTrackerEntity DownstairsChromecast => new(_haContext, "device_tracker.downstairs_chromecast");
    ///<summary>Downstairs Echo Dot</summary>
    public DeviceTrackerEntity DownstairsEchoDot => new(_haContext, "device_tracker.downstairs_echo_dot");
    ///<summary>Dowstairs TV Smart Plug</summary>
    public DeviceTrackerEntity DowstairsTvSmartPlug => new(_haContext, "device_tracker.dowstairs_tv_smart_plug");
    ///<summary>Echo Show</summary>
    public DeviceTrackerEntity EchoShow => new(_haContext, "device_tracker.echo_show");
    ///<summary>Echo Sub</summary>
    public DeviceTrackerEntity EchoSub => new(_haContext, "device_tracker.echo_sub");
    ///<summary>Epson Printer</summary>
    public DeviceTrackerEntity EpsonPrinter => new(_haContext, "device_tracker.epson_printer");
    ///<summary>Galaxy Watch6 Classic (4H5R)</summary>
    public DeviceTrackerEntity GalaxyWatch6Classic4h5r => new(_haContext, "device_tracker.galaxy_watch6_classic_4h5r");
    ///<summary>HDHomeRun TV Tuner</summary>
    public DeviceTrackerEntity HdhomerunTvTuner => new(_haContext, "device_tracker.hdhomerun_tv_tuner");
    ///<summary>homeassistant</summary>
    public DeviceTrackerEntity Homeassistant => new(_haContext, "device_tracker.homeassistant");
    ///<summary>Living Room Echo</summary>
    public DeviceTrackerEntity LivingRoomEcho => new(_haContext, "device_tracker.living_room_echo");
    ///<summary>Living Room Echo Smart Plug</summary>
    public DeviceTrackerEntity LivingRoomEchoSmartPlug => new(_haContext, "device_tracker.living_room_echo_smart_plug");
    ///<summary>Modem Smart Plug</summary>
    public DeviceTrackerEntity ModemSmartPlug => new(_haContext, "device_tracker.modem_smart_plug");
    ///<summary>Nest Thermostat</summary>
    public DeviceTrackerEntity NestThermostat => new(_haContext, "device_tracker.nest_thermostat");
    ///<summary>NextCloud</summary>
    public DeviceTrackerEntity Nextcloud => new(_haContext, "device_tracker.nextcloud");
    ///<summary>Nintendo Switch Dock</summary>
    public DeviceTrackerEntity NintendoSwitchDock => new(_haContext, "device_tracker.nintendo_switch_dock");
    ///<summary>Office Echo Show</summary>
    public DeviceTrackerEntity OfficeEchoShow => new(_haContext, "device_tracker.office_echo_show");
    ///<summary>Outside Plugs 1</summary>
    public DeviceTrackerEntity OutsidePlugs1 => new(_haContext, "device_tracker.outside_plugs_1");
    ///<summary>Owen Computer Smart Plug</summary>
    public DeviceTrackerEntity OwenComputerSmartPlug => new(_haContext, "device_tracker.owen_computer_smart_plug");
    ///<summary>Owen Desktop</summary>
    public DeviceTrackerEntity OwenDesktop => new(_haContext, "device_tracker.owen_desktop");
    ///<summary>Owen</summary>
    public DeviceTrackerEntity OwenPhone => new(_haContext, "device_tracker.owen_phone");
    ///<summary>Owen Pixel 7</summary>
    public DeviceTrackerEntity OwenPixel7 => new(_haContext, "device_tracker.owen_pixel_7");
    ///<summary>Primary Garage Door</summary>
    public DeviceTrackerEntity PrimaryGarageDoor => new(_haContext, "device_tracker.primary_garage_door");
    ///<summary>Primary Pi-Hole</summary>
    public DeviceTrackerEntity PrimaryPiHole => new(_haContext, "device_tracker.primary_pi_hole");
    ///<summary>Rack Switch</summary>
    public DeviceTrackerEntity RackSwitch => new(_haContext, "device_tracker.rack_switch");
    ///<summary>Rapture Central Control</summary>
    public DeviceTrackerEntity RaptureCentralControl => new(_haContext, "device_tracker.rapture_central_control");
    ///<summary>Rapture Central Control</summary>
    public DeviceTrackerEntity Rapturecentralcontrol => new(_haContext, "device_tracker.rapturecentralcontrol");
    ///<summary>Samsung</summary>
    public DeviceTrackerEntity Samsung => new(_haContext, "device_tracker.samsung");
    ///<summary>Samsung-Dryer</summary>
    public DeviceTrackerEntity SamsungDryer => new(_haContext, "device_tracker.samsung_dryer");
    ///<summary>Samsung-Washer</summary>
    public DeviceTrackerEntity SamsungWasher => new(_haContext, "device_tracker.samsung_washer");
    ///<summary>Secondary Pi-Hole</summary>
    public DeviceTrackerEntity SecondaryPiHole => new(_haContext, "device_tracker.secondary_pi_hole");
    ///<summary>Office Switch</summary>
    public DeviceTrackerEntity SecondaryRackSwitch => new(_haContext, "device_tracker.secondary_rack_switch");
    ///<summary>TrueNas</summary>
    public DeviceTrackerEntity Truenas => new(_haContext, "device_tracker.truenas");
    ///<summary>TV Switch</summary>
    public DeviceTrackerEntity TvSwitch => new(_haContext, "device_tracker.tv_switch");
    ///<summary>U6+</summary>
    public DeviceTrackerEntity Uapl6 => new(_haContext, "device_tracker.uapl6");
    public DeviceTrackerEntity Unifi00E421D2BbB8Default => new(_haContext, "device_tracker.unifi_00_e4_21_d2_bb_b8_default");
    public DeviceTrackerEntity Unifi3c6a9d1a4222Default => new(_haContext, "device_tracker.unifi_3c_6a_9d_1a_42_22_default");
    public DeviceTrackerEntity Unifi3c6a9d1a4223Default => new(_haContext, "device_tracker.unifi_3c_6a_9d_1a_42_23_default");
    public DeviceTrackerEntity UnifiD250993eE576Default => new(_haContext, "device_tracker.unifi_d2_50_99_3e_e5_76_default");
    ///<summary>Upstairs Chromecast</summary>
    public DeviceTrackerEntity UpstairsChromecast => new(_haContext, "device_tracker.upstairs_chromecast");
    ///<summary>Upstairs TV Smart Plug</summary>
    public DeviceTrackerEntity UpstairsTvSmartPlug => new(_haContext, "device_tracker.upstairs_tv_smart_plug");
    ///<summary>US-8-60W</summary>
    public DeviceTrackerEntity Us8p60 => new(_haContext, "device_tracker.us8p60");
}

public partial class EventEntities
{
    private readonly IHaContext _haContext;
    public EventEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all event entities currently registered (at runtime) in Home Assistant as EventEntity</summary>
    public IEnumerable<EventEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("event.")).Select(e => new EventEntity(e));
    ///<summary>Bedroom Fan Event value</summary>
    public EventEntity BedroomFanEventValue => new(_haContext, "event.bedroom_fan_event_value");
    ///<summary>Bedroom Fan Scene 001</summary>
    public EventEntity BedroomFanScene001 => new(_haContext, "event.bedroom_fan_scene_001");
    ///<summary>Bedroom Fan Scene 002</summary>
    public EventEntity BedroomFanScene002 => new(_haContext, "event.bedroom_fan_scene_002");
    ///<summary>Bedroom Fan Scene ID</summary>
    public EventEntity BedroomFanSceneId => new(_haContext, "event.bedroom_fan_scene_id");
    ///<summary>Bedroom Lights Event value</summary>
    public EventEntity BedroomLightsEventValue => new(_haContext, "event.bedroom_lights_event_value");
    ///<summary>Bedroom Lights Scene 001</summary>
    public EventEntity BedroomLightsScene001 => new(_haContext, "event.bedroom_lights_scene_001");
    ///<summary>Bedroom Lights Scene 002</summary>
    public EventEntity BedroomLightsScene002 => new(_haContext, "event.bedroom_lights_scene_002");
    ///<summary>Counter Lights Event value</summary>
    public EventEntity CounterLightsEventValue => new(_haContext, "event.counter_lights_event_value");
    ///<summary>Counter Lights Scene 001</summary>
    public EventEntity CounterLightsScene001 => new(_haContext, "event.counter_lights_scene_001");
    ///<summary>Counter Lights Scene 002</summary>
    public EventEntity CounterLightsScene002 => new(_haContext, "event.counter_lights_scene_002");
    ///<summary>Deck Lights Event value</summary>
    public EventEntity DeckLightsEventValue => new(_haContext, "event.deck_lights_event_value");
    ///<summary>Deck Lights Scene 001</summary>
    public EventEntity DeckLightsScene001 => new(_haContext, "event.deck_lights_scene_001");
    ///<summary>Deck Lights Scene 002</summary>
    public EventEntity DeckLightsScene002 => new(_haContext, "event.deck_lights_scene_002");
    ///<summary>Deck Lights Scene ID</summary>
    public EventEntity DeckLightsSceneId => new(_haContext, "event.deck_lights_scene_id");
    ///<summary>Dining Room Lights Event value</summary>
    public EventEntity DiningRoomLightsEventValue => new(_haContext, "event.dining_room_lights_event_value");
    ///<summary>Dining Room Lights Scene 001</summary>
    public EventEntity DiningRoomLightsScene001 => new(_haContext, "event.dining_room_lights_scene_001");
    ///<summary>Dining Room Lights Scene 002</summary>
    public EventEntity DiningRoomLightsScene002 => new(_haContext, "event.dining_room_lights_scene_002");
    ///<summary>Downstairs Lights Event value</summary>
    public EventEntity DownstairsLightsEventValue => new(_haContext, "event.downstairs_lights_event_value");
    ///<summary>Downstairs Lights Scene 001</summary>
    public EventEntity DownstairsLightsScene001 => new(_haContext, "event.downstairs_lights_scene_001");
    ///<summary>Downstairs Lights Scene 002</summary>
    public EventEntity DownstairsLightsScene002 => new(_haContext, "event.downstairs_lights_scene_002");
    ///<summary>Front Porch Lights Event value</summary>
    public EventEntity FrontPorchLightsEventValue => new(_haContext, "event.front_porch_lights_event_value");
    ///<summary>Front Porch Lights Scene 001</summary>
    public EventEntity FrontPorchLightsScene001 => new(_haContext, "event.front_porch_lights_scene_001");
    ///<summary>Front Porch Lights Scene 002</summary>
    public EventEntity FrontPorchLightsScene002 => new(_haContext, "event.front_porch_lights_scene_002");
    ///<summary>G4 Doorbell Pro Doorbell</summary>
    public EventEntity G4DoorbellProDoorbell => new(_haContext, "event.g4_doorbell_pro_doorbell");
    ///<summary>Garage Lights Event value</summary>
    public EventEntity GarageLightsEventValue => new(_haContext, "event.garage_lights_event_value");
    ///<summary>Kitchen Lights Event value</summary>
    public EventEntity KitchenLightsEventValue => new(_haContext, "event.kitchen_lights_event_value");
    ///<summary>Kitchen Lights Scene 001</summary>
    public EventEntity KitchenLightsScene001 => new(_haContext, "event.kitchen_lights_scene_001");
    ///<summary>Kitchen Lights Scene 002</summary>
    public EventEntity KitchenLightsScene002 => new(_haContext, "event.kitchen_lights_scene_002");
    ///<summary>Laundry Room Lights Event value</summary>
    public EventEntity LaundryRoomLightsEventValue => new(_haContext, "event.laundry_room_lights_event_value");
    ///<summary>Laundry Room Lights Scene 001</summary>
    public EventEntity LaundryRoomLightsScene001 => new(_haContext, "event.laundry_room_lights_scene_001");
    ///<summary>Laundry Room Lights Scene 002</summary>
    public EventEntity LaundryRoomLightsScene002 => new(_haContext, "event.laundry_room_lights_scene_002");
    ///<summary>Laundry Room Lights Scene ID</summary>
    public EventEntity LaundryRoomLightsSceneId => new(_haContext, "event.laundry_room_lights_scene_id");
    ///<summary>Scene 001</summary>
    public EventEntity Node21Scene001 => new(_haContext, "event.node_21_scene_001");
    ///<summary>Scene 002</summary>
    public EventEntity Node21Scene002 => new(_haContext, "event.node_21_scene_002");
    ///<summary>Scene ID</summary>
    public EventEntity Node21SceneId => new(_haContext, "event.node_21_scene_id");
    ///<summary>Office Lights Event value</summary>
    public EventEntity OfficeLightsEventValue => new(_haContext, "event.office_lights_event_value");
    ///<summary>Office Lights Scene 001</summary>
    public EventEntity OfficeLightsScene001 => new(_haContext, "event.office_lights_scene_001");
    ///<summary>Office Lights Scene 002</summary>
    public EventEntity OfficeLightsScene002 => new(_haContext, "event.office_lights_scene_002");
    ///<summary>Stairway Lights Event value</summary>
    public EventEntity StairwayLightsEventValue => new(_haContext, "event.stairway_lights_event_value");
    ///<summary>Stairway Lights Scene 001</summary>
    public EventEntity StairwayLightsScene001 => new(_haContext, "event.stairway_lights_scene_001");
    ///<summary>Stairway Lights Scene 002</summary>
    public EventEntity StairwayLightsScene002 => new(_haContext, "event.stairway_lights_scene_002");
    ///<summary>Utility Room Lights Event value</summary>
    public EventEntity UtilityRoomLightsEventValue => new(_haContext, "event.utility_room_lights_event_value");
}

public partial class GroupEntities
{
    private readonly IHaContext _haContext;
    public GroupEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all group entities currently registered (at runtime) in Home Assistant as GroupEntity</summary>
    public IEnumerable<GroupEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("group.")).Select(e => new GroupEntity(e));
    ///<summary>Device Batteries</summary>
    public GroupEntity DeviceBatteries => new(_haContext, "group.device_batteries");
    ///<summary>Downstairs Active</summary>
    public GroupEntity DownstairsActive => new(_haContext, "group.downstairs_active");
    ///<summary>Holiday Lights</summary>
    public GroupEntity HolidayLights => new(_haContext, "group.holiday_lights");
    ///<summary>Interior Lights</summary>
    public GroupEntity InteriorLights => new(_haContext, "group.interior_lights");
    ///<summary>Living Room Lamps</summary>
    public GroupEntity LivingRoomLamps => new(_haContext, "group.living_room_lamps");
    ///<summary>Upstairs Active</summary>
    public GroupEntity UpstairsActive => new(_haContext, "group.upstairs_active");
}

public partial class InputBooleanEntities
{
    private readonly IHaContext _haContext;
    public InputBooleanEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all input_boolean entities currently registered (at runtime) in Home Assistant as InputBooleanEntity</summary>
    public IEnumerable<InputBooleanEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("input_boolean.")).Select(e => new InputBooleanEntity(e));
    ///<summary>Cat Cameras On</summary>
    public InputBooleanEntity CatCamerasOn => new(_haContext, "input_boolean.cat_cameras_on");
    ///<summary>Climate Notify (Location Based)</summary>
    public InputBooleanEntity ClimateNotifyLocationBased => new(_haContext, "input_boolean.climate_notify_location_based");
    ///<summary>Climate Notify (Time Based)</summary>
    public InputBooleanEntity ClimateNotifyTimeBased => new(_haContext, "input_boolean.climate_notify_time_based");
    ///<summary>Holiday Mode</summary>
    public InputBooleanEntity HolidayMode => new(_haContext, "input_boolean.holiday_mode");
    ///<summary>Laundry Start Washer Automatically</summary>
    public InputBooleanEntity LaundryStartWasherAutomatically => new(_haContext, "input_boolean.laundry_start_washer_automatically");
    ///<summary>Automatically Dim Downstairs Lights</summary>
    public InputBooleanEntity LightAutomaticallyDimDownstairsLights => new(_haContext, "input_boolean.light_automatically_dim_downstairs_lights");
    ///<summary>Clo</summary>
    public InputBooleanEntity LightCloseToHome => new(_haContext, "input_boolean.light_close_to_home");
    ///<summary>Override Front Porch Off Time</summary>
    public InputBooleanEntity LightOverrideFrontPorchOff => new(_haContext, "input_boolean.light_override_front_porch_off");
    ///<summary>Bedroom Light Automations</summary>
    public InputBooleanEntity LightsBedroomAutomations => new(_haContext, "input_boolean.lights_bedroom_automations");
    ///<summary>Turn off bedroom lamps after alarm</summary>
    public InputBooleanEntity LightsBedroomLampsOffAfterAlarm => new(_haContext, "input_boolean.lights_bedroom_lamps_off_after_alarm");
    ///<summary>Turn on bedroom lamps with alarm</summary>
    public InputBooleanEntity LightsBedroomLampsOnWithAlarm => new(_haContext, "input_boolean.lights_bedroom_lamps_on_with_alarm");
    ///<summary>Living Room Light Automations</summary>
    public InputBooleanEntity LightsLivingRoomAutomations => new(_haContext, "input_boolean.lights_living_room_automations");
    ///<summary>Turn Off Lights When Nobody is Home</summary>
    public InputBooleanEntity LightsTurnOffLightsWhenNobodyHome => new(_haContext, "input_boolean.lights_turn_off_lights_when_nobody_home");
    ///<summary>Guest Mode</summary>
    public InputBooleanEntity ModeGuest => new(_haContext, "input_boolean.mode_guest");
    ///<summary>Vacation Mode</summary>
    public InputBooleanEntity ModeVacation => new(_haContext, "input_boolean.mode_vacation");
    ///<summary>netdaemon_net_daemon_apps_cameras_cat_cameras</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsCamerasCatCameras => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_cameras_cat_cameras");
    ///<summary>netdaemon_net_daemon_apps_climate_climate_away</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsClimateClimateAway => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_climate_climate_away");
    ///<summary>netdaemon_net_daemon_apps_climate_climate_home</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsClimateClimateHome => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_climate_climate_home");
    ///<summary>netdaemon_net_daemon_apps_climate_climate_state</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsClimateClimateState => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_climate_climate_state");
    ///<summary>netdaemon_net_daemon_apps_devices_unavailable_devices</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsDevicesUnavailableDevices => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_devices_unavailable_devices");
    ///<summary>netdaemon_net_daemon_apps_internet_internet</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsInternetInternet => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_internet_internet");
    ///<summary>netdaemon_net_daemon_apps_internet_mobile_data</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsInternetMobileData => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_internet_mobile_data");
    ///<summary>netdaemon_net_daemon_apps_laundry_laundry</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsLaundryLaundry => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_laundry_laundry");
    ///<summary>netdaemon_net_daemon_apps_lighting_bedroom_lighting</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsLightingBedroomLighting => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_lighting_bedroom_lighting");
    ///<summary>netdaemon_net_daemon_apps_lighting_downstairs_sun</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsLightingDownstairsSun => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_lighting_downstairs_sun");
    ///<summary>netdaemon_net_daemon_apps_lighting_garage_lighting</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsLightingGarageLighting => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_lighting_garage_lighting");
    ///<summary>netdaemon_net_daemon_apps_lighting_holiday_lighting</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsLightingHolidayLighting => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_lighting_holiday_lighting");
    ///<summary>netdaemon_net_daemon_apps_lighting_off_lighting</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsLightingOffLighting => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_lighting_off_lighting");
    ///<summary>netdaemon_net_daemon_apps_lighting_outside_lighting</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsLightingOutsideLighting => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_lighting_outside_lighting");
    ///<summary>netdaemon_net_daemon_apps_lighting_television_lighting</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsLightingTelevisionLighting => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_lighting_television_lighting");
    ///<summary>netdaemon_net_daemon_apps_lighting_toggleable_lighting</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsLightingToggleableLighting => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_lighting_toggleable_lighting");
    ///<summary>netdaemon_net_daemon_apps_lighting_work_lighting</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsLightingWorkLighting => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_lighting_work_lighting");
    ///<summary>netdaemon_net_daemon_apps_security_front_door_security</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsSecurityFrontDoorSecurity => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_security_front_door_security");
    ///<summary>netdaemon_net_daemon_apps_security_garage_security</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsSecurityGarageSecurity => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_security_garage_security");
    ///<summary>netdaemon_net_daemon_apps_work_work</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsWorkWork => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_work_work");
    ///<summary>Night Automations</summary>
    public InputBooleanEntity NightAutomations => new(_haContext, "input_boolean.night_automations");
    ///<summary>Automate lights while on vacation</summary>
    public InputBooleanEntity VacationLightingAutomation => new(_haContext, "input_boolean.vacation_lighting_automation");
}

public partial class InputDatetimeEntities
{
    private readonly IHaContext _haContext;
    public InputDatetimeEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all input_datetime entities currently registered (at runtime) in Home Assistant as InputDatetimeEntity</summary>
    public IEnumerable<InputDatetimeEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("input_datetime.")).Select(e => new InputDatetimeEntity(e));
    ///<summary>Bedroom Lamp Off Time</summary>
    public InputDatetimeEntity BedroomLampOff => new(_haContext, "input_datetime.bedroom_lamp_off");
    ///<summary>Day Temperature Start Time</summary>
    public InputDatetimeEntity ClimateDayStart => new(_haContext, "input_datetime.climate_day_start");
    ///<summary>Night Temperature Start Time</summary>
    public InputDatetimeEntity ClimateNightStart => new(_haContext, "input_datetime.climate_night_start");
    ///<summary>Bedroom Motion Day Lighting Start Time</summary>
    public InputDatetimeEntity LightBedroomMotionDaytime => new(_haContext, "input_datetime.light_bedroom_motion_daytime");
    ///<summary>Bedroom Motion Night Lighting Start Time</summary>
    public InputDatetimeEntity LightBedroomMotionNighttime => new(_haContext, "input_datetime.light_bedroom_motion_nighttime");
    ///<summary>Front Porch Off Time</summary>
    public InputDatetimeEntity LightFrontPorchOffTime => new(_haContext, "input_datetime.light_front_porch_off_time");
    ///<summary>Morning Alarm Time</summary>
    public InputDatetimeEntity MorningAlarm => new(_haContext, "input_datetime.morning_alarm");
}

public partial class InputNumberEntities
{
    private readonly IHaContext _haContext;
    public InputNumberEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all input_number entities currently registered (at runtime) in Home Assistant as InputNumberEntity</summary>
    public IEnumerable<InputNumberEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("input_number.")).Select(e => new InputNumberEntity(e));
    ///<summary>Away Minutes</summary>
    public InputNumberEntity ClimateAwayMinutes => new(_haContext, "input_number.climate_away_minutes");
    ///<summary>Away Temperature Offset</summary>
    public InputNumberEntity ClimateAwayOffset => new(_haContext, "input_number.climate_away_offset");
    ///<summary>Away Temperature</summary>
    public InputNumberEntity ClimateAwayTemp => new(_haContext, "input_number.climate_away_temp");
    ///<summary>Day Temperature</summary>
    public InputNumberEntity ClimateDayTemp => new(_haContext, "input_number.climate_day_temp");
    ///<summary>Gone Temperature Offset</summary>
    public InputNumberEntity ClimateGoneOffset => new(_haContext, "input_number.climate_gone_offset");
    ///<summary>Night Temperature Offset</summary>
    public InputNumberEntity ClimateNightOffset => new(_haContext, "input_number.climate_night_offset");
    ///<summary>Vacation Offset</summary>
    public InputNumberEntity ClimateVacationOffset => new(_haContext, "input_number.climate_vacation_offset");
    ///<summary>Vacation Temperature</summary>
    public InputNumberEntity ClimateVacationTemp => new(_haContext, "input_number.climate_vacation_temp");
    ///<summary>Motion Lights Timeout Seconds</summary>
    public InputNumberEntity LightsMotionTimeoutSeconds => new(_haContext, "input_number.lights_motion_timeout_seconds");
}

public partial class InputSelectEntities
{
    private readonly IHaContext _haContext;
    public InputSelectEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all input_select entities currently registered (at runtime) in Home Assistant as InputSelectEntity</summary>
    public IEnumerable<InputSelectEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("input_select.")).Select(e => new InputSelectEntity(e));
    ///<summary>Thermostat State</summary>
    public InputSelectEntity ThermostatState => new(_haContext, "input_select.thermostat_state");
}

public partial class LockEntities
{
    private readonly IHaContext _haContext;
    public LockEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all lock entities currently registered (at runtime) in Home Assistant as LockEntity</summary>
    public IEnumerable<LockEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("lock.")).Select(e => new LockEntity(e));
    ///<summary>Front Door Lock </summary>
    public LockEntity FrontDoorLock => new(_haContext, "lock.front_door_lock");
    ///<summary>Garage-Door-Primary Lock remotes</summary>
    public LockEntity PrimaryGarageDoorLockRemotes => new(_haContext, "lock.primary_garage_door_lock_remotes");
}

public partial class NumberEntities
{
    private readonly IHaContext _haContext;
    public NumberEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all number entities currently registered (at runtime) in Home Assistant as NumberEntity</summary>
    public IEnumerable<NumberEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("number.")).Select(e => new NumberEntity(e));
    ///<summary>Cat Camera Downstairs Infrared custom lux trigger</summary>
    public NumberEntity CatCameraDownstairsInfraredCustomLuxTrigger => new(_haContext, "number.cat_camera_downstairs_infrared_custom_lux_trigger");
    ///<summary>Cat Camera Downstairs Microphone Level</summary>
    public NumberEntity CatCameraDownstairsMicrophoneLevel => new(_haContext, "number.cat_camera_downstairs_microphone_level");
    ///<summary>Cat Camera Upstairs Infrared custom lux trigger</summary>
    public NumberEntity CatCameraUpstairsInfraredCustomLuxTrigger => new(_haContext, "number.cat_camera_upstairs_infrared_custom_lux_trigger");
    ///<summary>Cat Camera Upstairs Microphone Level</summary>
    public NumberEntity CatCameraUpstairsMicrophoneLevel => new(_haContext, "number.cat_camera_upstairs_microphone_level");
    ///<summary>Indicator value</summary>
    public NumberEntity DeckStringLightsIndicatorValue => new(_haContext, "number.deck_string_lights_indicator_value");
    ///<summary>Front Door Lock Indicator value</summary>
    public NumberEntity FrontDoorLockIndicatorValue => new(_haContext, "number.front_door_lock_indicator_value");
    ///<summary>G4 Doorbell Pro Chime duration</summary>
    public NumberEntity G4DoorbellProChimeDuration => new(_haContext, "number.g4_doorbell_pro_chime_duration");
    ///<summary>G4 Doorbell Pro Infrared custom lux trigger</summary>
    public NumberEntity G4DoorbellProInfraredCustomLuxTrigger => new(_haContext, "number.g4_doorbell_pro_infrared_custom_lux_trigger");
    ///<summary>G4 Doorbell Pro Microphone level</summary>
    public NumberEntity G4DoorbellProMicrophoneLevel => new(_haContext, "number.g4_doorbell_pro_microphone_level");
    ///<summary>G4 Doorbell Pro Wide Dynamic Range</summary>
    public NumberEntity G4DoorbellProWideDynamicRange => new(_haContext, "number.g4_doorbell_pro_wide_dynamic_range");
    ///<summary>Main Thermostat Indicator value</summary>
    public NumberEntity MainIndicatorValue => new(_haContext, "number.main_indicator_value");
    ///<summary>Main Thermostat Ready</summary>
    public NumberEntity MainReady => new(_haContext, "number.main_ready");
    ///<summary>Garage-Door-Primary Client ID</summary>
    public NumberEntity PrimaryGarageDoorClientId => new(_haContext, "number.primary_garage_door_client_id");
    ///<summary>Garage-Door-Primary Closing duration</summary>
    public NumberEntity PrimaryGarageDoorClosingDuration => new(_haContext, "number.primary_garage_door_closing_duration");
    ///<summary>Garage-Door-Primary Opening duration</summary>
    public NumberEntity PrimaryGarageDoorOpeningDuration => new(_haContext, "number.primary_garage_door_opening_duration");
    ///<summary>Garage-Door-Primary Rolling code counter</summary>
    public NumberEntity PrimaryGarageDoorRollingCodeCounter => new(_haContext, "number.primary_garage_door_rolling_code_counter");
    ///<summary>Allison Bedroom Lamp Start-up color temperature</summary>
    public NumberEntity SignifyNetherlandsBVLtw015StartUpColorTemperature => new(_haContext, "number.signify_netherlands_b_v_ltw015_start_up_color_temperature");
    ///<summary>Owen Bedroom Lamp Start-up color temperature</summary>
    public NumberEntity SignifyNetherlandsBVLtw015StartUpColorTemperature2 => new(_haContext, "number.signify_netherlands_b_v_ltw015_start_up_color_temperature_2");
    ///<summary>Allison Bedroom Lamp Start-up current level</summary>
    public NumberEntity SignifyNetherlandsBVLtw015StartUpCurrentLevel => new(_haContext, "number.signify_netherlands_b_v_ltw015_start_up_current_level");
    ///<summary>Owen Bedroom Lamp Start-up current level</summary>
    public NumberEntity SignifyNetherlandsBVLtw015StartUpCurrentLevel2 => new(_haContext, "number.signify_netherlands_b_v_ltw015_start_up_current_level_2");
    ///<summary>Office Lamp Start-up current level</summary>
    public NumberEntity SignifyNetherlandsBVLwa003StartUpCurrentLevel => new(_haContext, "number.signify_netherlands_b_v_lwa003_start_up_current_level");
}

public partial class PersonEntities
{
    private readonly IHaContext _haContext;
    public PersonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all person entities currently registered (at runtime) in Home Assistant as PersonEntity</summary>
    public IEnumerable<PersonEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("person.")).Select(e => new PersonEntity(e));
    ///<summary>Allison</summary>
    public PersonEntity Allison => new(_haContext, "person.allison");
    ///<summary>Owen</summary>
    public PersonEntity Owen => new(_haContext, "person.owen");
}

public partial class RemoteEntities
{
    private readonly IHaContext _haContext;
    public RemoteEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all remote entities currently registered (at runtime) in Home Assistant as RemoteEntity</summary>
    public IEnumerable<RemoteEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("remote.")).Select(e => new RemoteEntity(e));
    ///<summary>Downstairs TV</summary>
    public RemoteEntity DownstairsTv => new(_haContext, "remote.downstairs_tv");
}

public partial class SceneEntities
{
    private readonly IHaContext _haContext;
    public SceneEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all scene entities currently registered (at runtime) in Home Assistant as SceneEntity</summary>
    public IEnumerable<SceneEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("scene.")).Select(e => new SceneEntity(e));
    ///<summary>All Off</summary>
    public SceneEntity AllOff => new(_haContext, "scene.all_off");
    ///<summary>All Off (Dynamic)</summary>
    public SceneEntity AllOffDynamic => new(_haContext, "scene.all_off_dynamic");
    ///<summary>Bedroom Lamps Off </summary>
    public SceneEntity BedroomLampsOff => new(_haContext, "scene.bedroom_lamps_off");
    ///<summary>Dim Bedroom</summary>
    public SceneEntity DimBedroom => new(_haContext, "scene.dim_bedroom");
    ///<summary>Night Lighting</summary>
    public SceneEntity NightLighting => new(_haContext, "scene.night_lighting");
    ///<summary>Upstairs Living Area Off</summary>
    public SceneEntity UpstairsLivingAreaOff => new(_haContext, "scene.upstairs_living_area_off");
}

public partial class ScriptEntities
{
    private readonly IHaContext _haContext;
    public ScriptEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all script entities currently registered (at runtime) in Home Assistant as ScriptEntity</summary>
    public IEnumerable<ScriptEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("script.")).Select(e => new ScriptEntity(e));
    ///<summary>Beto - Run Beto on command</summary>
    public ScriptEntity BetoRunOnCommand => new(_haContext, "script.beto_run_on_command");
    ///<summary>Lights - Dim Bedroom Lamps</summary>
    public ScriptEntity DimBedroomLamps => new(_haContext, "script.dim_bedroom_lamps");
    ///<summary>Lights - Nap Mode</summary>
    public ScriptEntity NapMode => new(_haContext, "script.nap_mode");
    ///<summary>Lights - Night Lighting</summary>
    public ScriptEntity NightLighting => new(_haContext, "script.night_lighting");
    ///<summary>Disable Pi-Holes for 30 Seconds</summary>
    public ScriptEntity PiholeDisableBothFor30Seconds => new(_haContext, "script.pihole_disable_both_for_30_seconds");
    ///<summary>Pi-Hole - Temporarily Disable</summary>
    public ScriptEntity PiholeTemporarilyDisable => new(_haContext, "script.pihole_temporarily_disable");
    ///<summary>Modem - Restart</summary>
    public ScriptEntity RestartModem => new(_haContext, "script.restart_modem");
    ///<summary>Restart Nextcloud</summary>
    public ScriptEntity RestartNextcloud => new(_haContext, "script.restart_nextcloud");
    ///<summary>Lights - Turn off all interior lights</summary>
    public ScriptEntity TurnOffAllInteriorLights => new(_haContext, "script.turn_off_all_interior_lights");
    ///<summary>Lights - Turn off bedroom lamps</summary>
    public ScriptEntity TurnOffBedroomLamps => new(_haContext, "script.turn_off_bedroom_lamps");
    ///<summary>Lights - Turn on all living room</summary>
    public ScriptEntity TurnOnAllLivingRoom => new(_haContext, "script.turn_on_all_living_room");
}

public partial class SelectEntities
{
    private readonly IHaContext _haContext;
    public SelectEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all select entities currently registered (at runtime) in Home Assistant as SelectEntity</summary>
    public IEnumerable<SelectEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("select.")).Select(e => new SelectEntity(e));
    ///<summary>Cat Camera Downstairs HDR mode</summary>
    public SelectEntity CatCameraDownstairsHdrMode => new(_haContext, "select.cat_camera_downstairs_hdr_mode");
    ///<summary>Cat Camera Downstairs Infrared Mode</summary>
    public SelectEntity CatCameraDownstairsInfraredMode => new(_haContext, "select.cat_camera_downstairs_infrared_mode");
    ///<summary>Cat Camera Downstairs Recording Mode</summary>
    public SelectEntity CatCameraDownstairsRecordingMode => new(_haContext, "select.cat_camera_downstairs_recording_mode");
    ///<summary>Cat Camera Upstairs HDR mode</summary>
    public SelectEntity CatCameraUpstairsHdrMode => new(_haContext, "select.cat_camera_upstairs_hdr_mode");
    ///<summary>Cat Camera Upstairs Infrared Mode</summary>
    public SelectEntity CatCameraUpstairsInfraredMode => new(_haContext, "select.cat_camera_upstairs_infrared_mode");
    ///<summary>Cat Camera Upstairs Recording Mode</summary>
    public SelectEntity CatCameraUpstairsRecordingMode => new(_haContext, "select.cat_camera_upstairs_recording_mode");
    ///<summary>Front Door Lock Current lock mode</summary>
    public SelectEntity FrontDoorLockCurrentLockMode => new(_haContext, "select.front_door_lock_current_lock_mode");
    ///<summary>G4 Doorbell Pro Chime type</summary>
    public SelectEntity G4DoorbellProChimeType => new(_haContext, "select.g4_doorbell_pro_chime_type");
    ///<summary>G4 Doorbell Pro Doorbell text</summary>
    public SelectEntity G4DoorbellProDoorbellText => new(_haContext, "select.g4_doorbell_pro_doorbell_text");
    ///<summary>G4 Doorbell Pro HDR mode</summary>
    public SelectEntity G4DoorbellProHdrMode => new(_haContext, "select.g4_doorbell_pro_hdr_mode");
    ///<summary>G4 Doorbell Pro Infrared mode</summary>
    public SelectEntity G4DoorbellProInfraredMode => new(_haContext, "select.g4_doorbell_pro_infrared_mode");
    ///<summary>G4 Doorbell Pro Recording mode</summary>
    public SelectEntity G4DoorbellProRecordingMode => new(_haContext, "select.g4_doorbell_pro_recording_mode");
    ///<summary>Allison Bedroom Lamp Start-up behavior</summary>
    public SelectEntity SignifyNetherlandsBVLtw015StartUpBehavior => new(_haContext, "select.signify_netherlands_b_v_ltw015_start_up_behavior");
    ///<summary>Owen Bedroom Lamp Start-up behavior</summary>
    public SelectEntity SignifyNetherlandsBVLtw015StartUpBehavior2 => new(_haContext, "select.signify_netherlands_b_v_ltw015_start_up_behavior_2");
    ///<summary>Office Lamp Start-up behavior</summary>
    public SelectEntity SignifyNetherlandsBVLwa003StartUpBehavior => new(_haContext, "select.signify_netherlands_b_v_lwa003_start_up_behavior");
}

public partial class SensorEntities
{
    private readonly IHaContext _haContext;
    public SensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all sensor entities currently registered (at runtime) in Home Assistant as SensorEntity</summary>
    public IEnumerable<SensorEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("sensor.")).Select(e => new SensorEntity(e));
    /// <summary>Enumerates all non-numeric sensor entities currently registered (at runtime) in Home Assistant as SensorEntity</summary>
    public IEnumerable<SensorEntity> EnumerateAllNonNumeric() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("sensor.") && !(e.EntityState?.AttributesJson?.TryGetProperty("unit_of_measurement", out _) ?? false)).Select(e => new SensorEntity(e));
    /// <summary>Enumerates all numeric sensor entities currently registered (at runtime) in Home Assistant as NumericSensorEntity</summary>
    public IEnumerable<NumericSensorEntity> EnumerateAllNumeric() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("sensor.") && (e.EntityState?.AttributesJson?.TryGetProperty("unit_of_measurement", out _) ?? false)).Select(e => new NumericSensorEntity(e));
    ///<summary>Allison Living Room Lamp Last seen</summary>
    public SensorEntity AllisonLivingRoomLampLastSeen => new(_haContext, "sensor.allison_living_room_lamp_last_seen");
    ///<summary>Allison Phone (10) Activity</summary>
    public SensorEntity AllisonPhone10Activity => new(_haContext, "sensor.allison_phone_10_activity");
    ///<summary>Allison Phone (10) Battery State</summary>
    public SensorEntity AllisonPhone10BatteryState => new(_haContext, "sensor.allison_phone_10_battery_state");
    ///<summary>Allison Phone (10) BSSID</summary>
    public SensorEntity AllisonPhone10Bssid => new(_haContext, "sensor.allison_phone_10_bssid");
    ///<summary>Allison Phone (10) Connection Type</summary>
    public SensorEntity AllisonPhone10ConnectionType => new(_haContext, "sensor.allison_phone_10_connection_type");
    ///<summary>Allison Phone (10) Geocoded Location</summary>
    public SensorEntity AllisonPhone10GeocodedLocation => new(_haContext, "sensor.allison_phone_10_geocoded_location");
    ///<summary>Allison Phone (10) Last Update Trigger</summary>
    public SensorEntity AllisonPhone10LastUpdateTrigger => new(_haContext, "sensor.allison_phone_10_last_update_trigger");
    ///<summary>Allison Phone (10) SIM 1</summary>
    public SensorEntity AllisonPhone10Sim1 => new(_haContext, "sensor.allison_phone_10_sim_1");
    ///<summary>Allison Phone (10) SIM 2</summary>
    public SensorEntity AllisonPhone10Sim2 => new(_haContext, "sensor.allison_phone_10_sim_2");
    ///<summary>Allison Phone (10) SSID</summary>
    public SensorEntity AllisonPhone10Ssid => new(_haContext, "sensor.allison_phone_10_ssid");
    ///<summary>Allison’s phone App Version</summary>
    public SensorEntity AllisonsPhoneAppVersion => new(_haContext, "sensor.allisons_phone_app_version");
    ///<summary>Allison’s phone Location permission</summary>
    public SensorEntity AllisonsPhoneLocationPermission => new(_haContext, "sensor.allisons_phone_location_permission");
    ///<summary>ARC ratio</summary>
    public SensorEntity ArcRatio => new(_haContext, "sensor.arc_ratio");
    public SensorEntity Arcadia => new(_haContext, "sensor.arcadia");
    ///<summary>Backup State</summary>
    public SensorEntity BackupState => new(_haContext, "sensor.backup_state");
    ///<summary>Bedroom Bedside Echo Show next Alarm</summary>
    public SensorEntity BedroomBedsideEchoShowNextAlarm => new(_haContext, "sensor.bedroom_bedside_echo_show_next_alarm");
    ///<summary>Bedroom Bedside Echo Show next Reminder</summary>
    public SensorEntity BedroomBedsideEchoShowNextReminder => new(_haContext, "sensor.bedroom_bedside_echo_show_next_reminder");
    ///<summary>Bedroom Bedside Echo Show next Timer</summary>
    public SensorEntity BedroomBedsideEchoShowNextTimer => new(_haContext, "sensor.bedroom_bedside_echo_show_next_timer");
    ///<summary>Bedroom Fan Basic</summary>
    public SensorEntity BedroomFanBasic => new(_haContext, "sensor.bedroom_fan_basic");
    ///<summary>Bedroom Fan Last seen</summary>
    public SensorEntity BedroomFanLastSeen => new(_haContext, "sensor.bedroom_fan_last_seen");
    ///<summary>Bedroom Lights Last seen</summary>
    public SensorEntity BedroomLightsLastSeen => new(_haContext, "sensor.bedroom_lights_last_seen");
    ///<summary>Cat Camera Down Smart Plug ESPHome Version</summary>
    public SensorEntity CatCameraDownSmartPlugEsphomeVersion => new(_haContext, "sensor.cat_camera_down_smart_plug_esphome_version");
    ///<summary>Cat Camera Up Smart Plug ESPHome Version</summary>
    public SensorEntity CatCameraUpSmartPlugEsphomeVersion => new(_haContext, "sensor.cat_camera_up_smart_plug_esphome_version");
    ///<summary>Counter Lights Last seen</summary>
    public SensorEntity CounterLightsLastSeen => new(_haContext, "sensor.counter_lights_last_seen");
    ///<summary>System CPU load longterm</summary>
    public SensorEntity CpuLoadLongterm => new(_haContext, "sensor.cpu_load_longterm");
    ///<summary>System CPU load midterm</summary>
    public SensorEntity CpuLoadMidterm => new(_haContext, "sensor.cpu_load_midterm");
    ///<summary>System CPU load shortterm</summary>
    public SensorEntity CpuLoadShortterm => new(_haContext, "sensor.cpu_load_shortterm");
    ///<summary>Deck Lights Basic</summary>
    public SensorEntity DeckLightsBasic => new(_haContext, "sensor.deck_lights_basic");
    ///<summary>Deck Lights Last seen</summary>
    public SensorEntity DeckLightsLastSeen => new(_haContext, "sensor.deck_lights_last_seen");
    ///<summary>Deck String Lights Last seen</summary>
    public SensorEntity DeckStringLightsLastSeen => new(_haContext, "sensor.deck_string_lights_last_seen");
    ///<summary>Dining Room Lights Last seen</summary>
    public SensorEntity DiningRoomLightsLastSeen => new(_haContext, "sensor.dining_room_lights_last_seen");
    ///<summary>Dining Room Lights Node status</summary>
    public SensorEntity DiningRoomLightsNodeStatus => new(_haContext, "sensor.dining_room_lights_node_status");
    ///<summary>Downstairs Lights Last seen</summary>
    public SensorEntity DownstairsLightsLastSeen => new(_haContext, "sensor.downstairs_lights_last_seen");
    ///<summary>Dryer Dryer Completion Time</summary>
    public SensorEntity DryerDryerCompletionTime => new(_haContext, "sensor.dryer_dryer_completion_time");
    ///<summary>Dryer Dryer Job State</summary>
    public SensorEntity DryerDryerJobState => new(_haContext, "sensor.dryer_dryer_job_state");
    ///<summary>Dryer Dryer Machine State</summary>
    public SensorEntity DryerDryerMachineState => new(_haContext, "sensor.dryer_dryer_machine_state");
    ///<summary>EPSON ET-3760 Series</summary>
    public SensorEntity EpsonEt3760Series => new(_haContext, "sensor.epson_et_3760_series");
    ///<summary>TrueNAS Snapshot tasks Eve</summary>
    public SensorEntity Eve2 => new(_haContext, "sensor.eve_2");
    ///<summary>TrueNAS Snapshot tasks Eve/iocage/jails</summary>
    public SensorEntity EveIocageJails2 => new(_haContext, "sensor.eve_iocage_jails_2");
    ///<summary>TrueNAS Snapshot tasks Eve/iocage/jails/nextcloud-2023</summary>
    public SensorEntity EveIocageJailsNextcloud20232 => new(_haContext, "sensor.eve_iocage_jails_nextcloud_2023_2");
    ///<summary>TrueNAS Snapshot tasks Eve/iocage/jails/Plex-Plugin</summary>
    public SensorEntity EveIocageJailsPlexPlugin2 => new(_haContext, "sensor.eve_iocage_jails_plex_plugin_2");
    ///<summary>TrueNAS Snapshot tasks Eve/Krueger Backup</summary>
    public SensorEntity EveKruegerBackup2 => new(_haContext, "sensor.eve_krueger_backup_2");
    ///<summary>TrueNAS Snapshot tasks Eve/NAS/Allison</summary>
    public SensorEntity EveNasAllison2 => new(_haContext, "sensor.eve_nas_allison_2");
    ///<summary>TrueNAS Snapshot tasks Eve/NAS/Family</summary>
    public SensorEntity EveNasFamily2 => new(_haContext, "sensor.eve_nas_family_2");
    ///<summary>TrueNAS Snapshot tasks Eve/NAS/Owen</summary>
    public SensorEntity EveNasOwen2 => new(_haContext, "sensor.eve_nas_owen_2");
    ///<summary>TrueNAS Snapshot tasks Eve/NAS/Pictures</summary>
    public SensorEntity EveNasPictures2 => new(_haContext, "sensor.eve_nas_pictures_2");
    ///<summary>TrueNAS Snapshot tasks Eve/NAS/Vault</summary>
    public SensorEntity EveNasVault2 => new(_haContext, "sensor.eve_nas_vault_2");
    ///<summary>TrueNAS Snapshot tasks Eve/NAS/Videos</summary>
    public SensorEntity EveNasVideos2 => new(_haContext, "sensor.eve_nas_videos_2");
    ///<summary>Front Porch Lights Last seen</summary>
    public SensorEntity FrontPorchLightsLastSeen => new(_haContext, "sensor.front_porch_lights_last_seen");
    ///<summary>Galaxy Watch6 Classic (4H5R) Battery state</summary>
    public SensorEntity GalaxyWatch6Classic4h5rBatteryState => new(_haContext, "sensor.galaxy_watch6_classic_4h5r_battery_state");
    ///<summary>Galaxy Watch6 Classic (4H5R) Charger type</summary>
    public SensorEntity GalaxyWatch6Classic4h5rChargerType => new(_haContext, "sensor.galaxy_watch6_classic_4h5r_charger_type");
    ///<summary>Garage Door Sensor Basic</summary>
    public SensorEntity GarageDoorSensorBasic => new(_haContext, "sensor.garage_door_sensor_basic");
    ///<summary>Garage Door Sensor Last seen</summary>
    public SensorEntity GarageDoorSensorLastSeen => new(_haContext, "sensor.garage_door_sensor_last_seen");
    ///<summary>Garage Lights Last seen</summary>
    public SensorEntity GarageLightsLastSeen => new(_haContext, "sensor.garage_lights_last_seen");
    ///<summary>TrueNAS Cloudsync Google Drive</summary>
    public SensorEntity GoogleDrive => new(_haContext, "sensor.google_drive");
    ///<summary>Downstairs Echo Dot next Alarm</summary>
    public SensorEntity HallwayEchoDotNextAlarm => new(_haContext, "sensor.hallway_echo_dot_next_alarm");
    ///<summary>Downstairs Echo Dot next Reminder</summary>
    public SensorEntity HallwayEchoDotNextReminder => new(_haContext, "sensor.hallway_echo_dot_next_reminder");
    ///<summary>Downstairs Echo Dot next Timer</summary>
    public SensorEntity HallwayEchoDotNextTimer => new(_haContext, "sensor.hallway_echo_dot_next_timer");
    ///<summary>Home Allison Direction of travel</summary>
    public SensorEntity HomeAllisonDirectionOfTravel => new(_haContext, "sensor.home_allison_direction_of_travel");
    ///<summary>Home Nearest device</summary>
    public SensorEntity HomeNearestDevice => new(_haContext, "sensor.home_nearest_device");
    ///<summary>Home Nearest direction of travel</summary>
    public SensorEntity HomeNearestDirectionOfTravel => new(_haContext, "sensor.home_nearest_direction_of_travel");
    ///<summary>Home Owen Direction of travel</summary>
    public SensorEntity HomeOwenDirectionOfTravel => new(_haContext, "sensor.home_owen_direction_of_travel");
    ///<summary>Kitchen Echo Show next Alarm</summary>
    public SensorEntity KitchenEchoShowNextAlarm => new(_haContext, "sensor.kitchen_echo_show_next_alarm");
    ///<summary>Kitchen Echo Show next Reminder</summary>
    public SensorEntity KitchenEchoShowNextReminder => new(_haContext, "sensor.kitchen_echo_show_next_reminder");
    ///<summary>Kitchen Echo Show next Timer</summary>
    public SensorEntity KitchenEchoShowNextTimer => new(_haContext, "sensor.kitchen_echo_show_next_timer");
    ///<summary>Kitchen Lights Last seen</summary>
    public SensorEntity KitchenLightsLastSeen => new(_haContext, "sensor.kitchen_lights_last_seen");
    ///<summary>L2ARC ratio</summary>
    public SensorEntity L2arcRatio => new(_haContext, "sensor.l2arc_ratio");
    ///<summary>Laundry Room Lights Basic</summary>
    public SensorEntity LaundryRoomLightsBasic => new(_haContext, "sensor.laundry_room_lights_basic");
    ///<summary>Laundry Room Lights Last seen</summary>
    public SensorEntity LaundryRoomLightsLastSeen => new(_haContext, "sensor.laundry_room_lights_last_seen");
    ///<summary>Living Room Echo next Alarm</summary>
    public SensorEntity LivingRoomEchoNextAlarm => new(_haContext, "sensor.living_room_echo_next_alarm");
    ///<summary>Living Room Echo next Reminder</summary>
    public SensorEntity LivingRoomEchoNextReminder => new(_haContext, "sensor.living_room_echo_next_reminder");
    ///<summary>Living Room Echo next Timer</summary>
    public SensorEntity LivingRoomEchoNextTimer => new(_haContext, "sensor.living_room_echo_next_timer");
    public SensorEntity Neptune => new(_haContext, "sensor.neptune");
    ///<summary>Downstairs Lights Node status</summary>
    public SensorEntity Node10NodeStatus => new(_haContext, "sensor.node_10_node_status");
    ///<summary>Stairway Lights Node status</summary>
    public SensorEntity Node11NodeStatus => new(_haContext, "sensor.node_11_node_status");
    ///<summary>Kitchen Lights Node status</summary>
    public SensorEntity Node12NodeStatus => new(_haContext, "sensor.node_12_node_status");
    ///<summary>Front Porch Lights Node status</summary>
    public SensorEntity Node13NodeStatus => new(_haContext, "sensor.node_13_node_status");
    ///<summary>Bedroom Lights Node status</summary>
    public SensorEntity Node14NodeStatus => new(_haContext, "sensor.node_14_node_status");
    ///<summary>Node 15 Last seen</summary>
    public SensorEntity Node15LastSeen => new(_haContext, "sensor.node_15_last_seen");
    ///<summary>Node 15 Node status</summary>
    public SensorEntity Node15NodeStatus => new(_haContext, "sensor.node_15_node_status");
    ///<summary>Office Lights Node status</summary>
    public SensorEntity Node19NodeStatus => new(_haContext, "sensor.node_19_node_status");
    ///<summary>Deck String Lights Node status</summary>
    public SensorEntity Node20NodeStatus => new(_haContext, "sensor.node_20_node_status");
    ///<summary>Node 21 Last seen</summary>
    public SensorEntity Node21LastSeen => new(_haContext, "sensor.node_21_last_seen");
    ///<summary>Node 21 Node status</summary>
    public SensorEntity Node21NodeStatus => new(_haContext, "sensor.node_21_node_status");
    ///<summary>Bedroom Fan Node status</summary>
    public SensorEntity Node23NodeStatus => new(_haContext, "sensor.node_23_node_status");
    ///<summary>Deck Lights Node status</summary>
    public SensorEntity Node24NodeStatus => new(_haContext, "sensor.node_24_node_status");
    ///<summary>Main Thermostat Last seen</summary>
    public SensorEntity Node25LastSeen => new(_haContext, "sensor.node_25_last_seen");
    ///<summary>Main Thermostat Node status</summary>
    public SensorEntity Node25NodeStatus => new(_haContext, "sensor.node_25_node_status");
    ///<summary>Front Door Lock Last seen</summary>
    public SensorEntity Node26LastSeen => new(_haContext, "sensor.node_26_last_seen");
    ///<summary>Front Door Lock Node status</summary>
    public SensorEntity Node26NodeStatus => new(_haContext, "sensor.node_26_node_status");
    ///<summary>Garage Lights: Node Status</summary>
    public SensorEntity Node3NodeStatus => new(_haContext, "sensor.node_3_node_status");
    ///<summary>Garage Door Sensor: Node Status</summary>
    public SensorEntity Node4NodeStatus => new(_haContext, "sensor.node_4_node_status");
    ///<summary>Laundry Room Lights Node status</summary>
    public SensorEntity Node5NodeStatus => new(_haContext, "sensor.node_5_node_status");
    ///<summary>Counter Lights Node status</summary>
    public SensorEntity Node6NodeStatus => new(_haContext, "sensor.node_6_node_status");
    ///<summary>Utility Room Lights Node status</summary>
    public SensorEntity Node7NodeStatus => new(_haContext, "sensor.node_7_node_status");
    ///<summary>Allison Living Room Lamp: Node Status</summary>
    public SensorEntity Node8NodeStatus => new(_haContext, "sensor.node_8_node_status");
    ///<summary>Owen Living Room Lamp: Node Status</summary>
    public SensorEntity Node9NodeStatus => new(_haContext, "sensor.node_9_node_status");
    ///<summary>Office Desk Echo Show next Alarm</summary>
    public SensorEntity OfficeDeskEchoShowNextAlarm => new(_haContext, "sensor.office_desk_echo_show_next_alarm");
    ///<summary>Office Desk Echo Show next Reminder</summary>
    public SensorEntity OfficeDeskEchoShowNextReminder => new(_haContext, "sensor.office_desk_echo_show_next_reminder");
    ///<summary>Office Desk Echo Show next Timer</summary>
    public SensorEntity OfficeDeskEchoShowNextTimer => new(_haContext, "sensor.office_desk_echo_show_next_timer");
    ///<summary>Office Lights Last seen</summary>
    public SensorEntity OfficeLightsLastSeen => new(_haContext, "sensor.office_lights_last_seen");
    ///<summary>State</summary>
    public SensorEntity OfficeSwitchState => new(_haContext, "sensor.office_switch_state");
    ///<summary>Uptime</summary>
    public SensorEntity OfficeSwitchUptime => new(_haContext, "sensor.office_switch_uptime");
    public SensorEntity Olympus => new(_haContext, "sensor.olympus");
    ///<summary>Owen Living Room Lamp Last seen</summary>
    public SensorEntity OwenLivingRoomLampLastSeen => new(_haContext, "sensor.owen_living_room_lamp_last_seen");
    ///<summary>Owen Phone Battery Health</summary>
    public SensorEntity OwenPhoneBatteryHealth => new(_haContext, "sensor.owen_phone_battery_health");
    ///<summary>Owen Phone Battery State</summary>
    public SensorEntity OwenPhoneBatteryState => new(_haContext, "sensor.owen_phone_battery_state");
    ///<summary>Owen Phone Charger Type</summary>
    public SensorEntity OwenPhoneChargerType => new(_haContext, "sensor.owen_phone_charger_type");
    ///<summary>Pixel 7 Network type</summary>
    public SensorEntity OwenPhoneNetworkType => new(_haContext, "sensor.owen_phone_network_type");
    ///<summary>Pixel 7 Next alarm</summary>
    public SensorEntity OwenPhoneNextAlarm => new(_haContext, "sensor.owen_phone_next_alarm");
    public SensorEntity Persephone => new(_haContext, "sensor.persephone");
    ///<summary>Garage-Door-Primary Paired Devices</summary>
    public SensorEntity PrimaryGarageDoorPairedDevices => new(_haContext, "sensor.primary_garage_door_paired_devices");
    ///<summary>State</summary>
    public SensorEntity RackSwitchState => new(_haContext, "sensor.rack_switch_state");
    ///<summary>Uptime</summary>
    public SensorEntity RackSwitchUptime => new(_haContext, "sensor.rack_switch_uptime");
    ///<summary>State</summary>
    public SensorEntity RaptureCentralControlState => new(_haContext, "sensor.rapture_central_control_state");
    ///<summary>Uptime</summary>
    public SensorEntity RaptureCentralControlUptime => new(_haContext, "sensor.rapture_central_control_uptime");
    ///<summary>Uptime</summary>
    public SensorEntity RaptureCentralControlUptime2 => new(_haContext, "sensor.rapture_central_control_uptime_2");
    ///<summary>Replicate Jails</summary>
    public SensorEntity ReplicateJails => new(_haContext, "sensor.replicate_jails");
    ///<summary>Stairway Lights Last seen</summary>
    public SensorEntity StairwayLightsLastSeen => new(_haContext, "sensor.stairway_lights_last_seen");
    ///<summary>Sullivan Security Uptime</summary>
    public SensorEntity SullivanSecurityUptime => new(_haContext, "sensor.sullivan_security_uptime");
    ///<summary>Sun Next dawn</summary>
    public SensorEntity SunNextDawn => new(_haContext, "sensor.sun_next_dawn");
    ///<summary>Sun Next dusk</summary>
    public SensorEntity SunNextDusk => new(_haContext, "sensor.sun_next_dusk");
    ///<summary>Sun Next midnight</summary>
    public SensorEntity SunNextMidnight => new(_haContext, "sensor.sun_next_midnight");
    ///<summary>Sun Next noon</summary>
    public SensorEntity SunNextNoon => new(_haContext, "sensor.sun_next_noon");
    ///<summary>Sun Next rising</summary>
    public SensorEntity SunNextRising => new(_haContext, "sensor.sun_next_rising");
    ///<summary>Sun Next setting</summary>
    public SensorEntity SunNextSetting => new(_haContext, "sensor.sun_next_setting");
    ///<summary>This Device next Alarm</summary>
    public SensorEntity ThisDeviceNextAlarm => new(_haContext, "sensor.this_device_next_alarm");
    ///<summary>This Device next Reminder</summary>
    public SensorEntity ThisDeviceNextReminder => new(_haContext, "sensor.this_device_next_reminder");
    ///<summary>This Device next Timer</summary>
    public SensorEntity ThisDeviceNextTimer => new(_haContext, "sensor.this_device_next_timer");
    ///<summary>[TV] Samsung 8 Series (55) Media Input Source</summary>
    public SensorEntity TvSamsung8Series55MediaInputSource => new(_haContext, "sensor.tv_samsung_8_series_55_media_input_source");
    ///<summary>[TV] Samsung 8 Series (55) Media Playback Status</summary>
    public SensorEntity TvSamsung8Series55MediaPlaybackStatus => new(_haContext, "sensor.tv_samsung_8_series_55_media_playback_status");
    ///<summary>[TV] Samsung 8 Series (55) Tv Channel</summary>
    public SensorEntity TvSamsung8Series55TvChannel => new(_haContext, "sensor.tv_samsung_8_series_55_tv_channel");
    ///<summary>[TV] Samsung 8 Series (55) Tv Channel Name</summary>
    public SensorEntity TvSamsung8Series55TvChannelName => new(_haContext, "sensor.tv_samsung_8_series_55_tv_channel_name");
    ///<summary>State</summary>
    public SensorEntity TvSwitchState => new(_haContext, "sensor.tv_switch_state");
    ///<summary>Uptime</summary>
    public SensorEntity TvSwitchUptime => new(_haContext, "sensor.tv_switch_uptime");
    ///<summary>State</summary>
    public SensorEntity U6State => new(_haContext, "sensor.u6_state");
    ///<summary>Uptime</summary>
    public SensorEntity U6Uptime => new(_haContext, "sensor.u6_uptime");
    ///<summary>System Uptime</summary>
    public SensorEntity Uptime13 => new(_haContext, "sensor.uptime_13");
    ///<summary>Uptime</summary>
    public SensorEntity Us860wUptime => new(_haContext, "sensor.us_8_60w_uptime");
    ///<summary>Basic</summary>
    public SensorEntity UsbControllerBasic => new(_haContext, "sensor.usb_controller_basic");
    ///<summary>USB Controller Status</summary>
    public SensorEntity UsbControllerStatus => new(_haContext, "sensor.usb_controller_status");
    ///<summary>Utility Room Lights Last seen</summary>
    public SensorEntity UtilityRoomLightsLastSeen => new(_haContext, "sensor.utility_room_lights_last_seen");
    ///<summary>Washer Washer Completion Time</summary>
    public SensorEntity WasherWasherCompletionTime => new(_haContext, "sensor.washer_washer_completion_time");
    ///<summary>Washer Washer Job State</summary>
    public SensorEntity WasherWasherJobState => new(_haContext, "sensor.washer_washer_job_state");
    ///<summary>Washer Washer Machine State</summary>
    public SensorEntity WasherWasherMachineState => new(_haContext, "sensor.washer_washer_machine_state");
    ///<summary>ada0</summary>
    public NumericSensorEntity Ada0 => new(_haContext, "sensor.ada0");
    ///<summary>ada1</summary>
    public NumericSensorEntity Ada1 => new(_haContext, "sensor.ada1");
    ///<summary>ada2</summary>
    public NumericSensorEntity Ada2 => new(_haContext, "sensor.ada2");
    ///<summary>ada3</summary>
    public NumericSensorEntity Ada3 => new(_haContext, "sensor.ada3");
    ///<summary>ada4</summary>
    public NumericSensorEntity Ada4 => new(_haContext, "sensor.ada4");
    ///<summary>System alc0 RX</summary>
    public NumericSensorEntity Alc0Rx => new(_haContext, "sensor.alc0_rx");
    ///<summary>System alc0 TX</summary>
    public NumericSensorEntity Alc0Tx => new(_haContext, "sensor.alc0_tx");
    ///<summary>Allison Distance (Miles)</summary>
    public NumericSensorEntity AllisonDistanceMiles => new(_haContext, "sensor.allison_distance_miles");
    ///<summary>Allison Living Room Lamp Button Battery</summary>
    public NumericSensorEntity AllisonLivingRoomLampButtonBattery => new(_haContext, "sensor.allison_living_room_lamp_button_battery");
    ///<summary>Allison Phone (10) Average Active Pace</summary>
    public NumericSensorEntity AllisonPhone10AverageActivePace => new(_haContext, "sensor.allison_phone_10_average_active_pace");
    ///<summary>Allison Phone (10) Battery Level</summary>
    public NumericSensorEntity AllisonPhone10BatteryLevel => new(_haContext, "sensor.allison_phone_10_battery_level");
    ///<summary>Allison Phone (10) Distance</summary>
    public NumericSensorEntity AllisonPhone10Distance => new(_haContext, "sensor.allison_phone_10_distance");
    ///<summary>Allison Phone (10) Floors Ascended</summary>
    public NumericSensorEntity AllisonPhone10FloorsAscended => new(_haContext, "sensor.allison_phone_10_floors_ascended");
    ///<summary>Allison Phone (10) Floors Descended</summary>
    public NumericSensorEntity AllisonPhone10FloorsDescended => new(_haContext, "sensor.allison_phone_10_floors_descended");
    ///<summary>Allison Phone (10) Steps</summary>
    public NumericSensorEntity AllisonPhone10Steps => new(_haContext, "sensor.allison_phone_10_steps");
    ///<summary>Allison Phone (10) Storage</summary>
    public NumericSensorEntity AllisonPhone10Storage => new(_haContext, "sensor.allison_phone_10_storage");
    ///<summary>System ARC size</summary>
    public NumericSensorEntity ArcSize => new(_haContext, "sensor.arc_size");
    ///<summary>Bedroom Temperature Sensor Battery</summary>
    public NumericSensorEntity BedroomTemperatureSensorBattery => new(_haContext, "sensor.bedroom_temperature_sensor_battery");
    ///<summary>Bedroom Temperature Sensor Humidity</summary>
    public NumericSensorEntity BedroomTemperatureSensorHumidity => new(_haContext, "sensor.bedroom_temperature_sensor_humidity");
    ///<summary>Bedroom Temperature Sensor Pressure</summary>
    public NumericSensorEntity BedroomTemperatureSensorPressure => new(_haContext, "sensor.bedroom_temperature_sensor_pressure");
    ///<summary>Bedroom Temperature Sensor Temperature</summary>
    public NumericSensorEntity BedroomTemperatureSensorTemperature => new(_haContext, "sensor.bedroom_temperature_sensor_temperature");
    ///<summary>Cat Camera Down Smart Plug Current</summary>
    public NumericSensorEntity CatCameraDownSmartPlugCurrent => new(_haContext, "sensor.cat_camera_down_smart_plug_current");
    ///<summary>Cat Camera Down Smart Plug Power</summary>
    public NumericSensorEntity CatCameraDownSmartPlugPower => new(_haContext, "sensor.cat_camera_down_smart_plug_power");
    ///<summary>Cat Camera Down Smart Plug Signal</summary>
    public NumericSensorEntity CatCameraDownSmartPlugSignal => new(_haContext, "sensor.cat_camera_down_smart_plug_signal");
    ///<summary>Cat Camera Down Smart Plug Total Daily Energy</summary>
    public NumericSensorEntity CatCameraDownSmartPlugTotalDailyEnergy => new(_haContext, "sensor.cat_camera_down_smart_plug_total_daily_energy");
    ///<summary>Cat Camera Down Smart Plug Uptime</summary>
    public NumericSensorEntity CatCameraDownSmartPlugUptime => new(_haContext, "sensor.cat_camera_down_smart_plug_uptime");
    ///<summary>Cat Camera Down Smart Plug Voltage</summary>
    public NumericSensorEntity CatCameraDownSmartPlugVoltage => new(_haContext, "sensor.cat_camera_down_smart_plug_voltage");
    ///<summary>Cat Camera Downstairs Disk Write Rate</summary>
    public NumericSensorEntity CatCameraDownstairsDiskWriteRate => new(_haContext, "sensor.cat_camera_downstairs_disk_write_rate");
    ///<summary>Cat Camera Downstairs Storage Used</summary>
    public NumericSensorEntity CatCameraDownstairsStorageUsed => new(_haContext, "sensor.cat_camera_downstairs_storage_used");
    ///<summary>Cat Camera Up Smart Plug Current</summary>
    public NumericSensorEntity CatCameraUpSmartPlugCurrent => new(_haContext, "sensor.cat_camera_up_smart_plug_current");
    ///<summary>Cat Camera Up Smart Plug Power</summary>
    public NumericSensorEntity CatCameraUpSmartPlugPower => new(_haContext, "sensor.cat_camera_up_smart_plug_power");
    ///<summary>Cat Camera Up Smart Plug Signal</summary>
    public NumericSensorEntity CatCameraUpSmartPlugSignal => new(_haContext, "sensor.cat_camera_up_smart_plug_signal");
    ///<summary>Cat Camera Up Smart Plug Total Daily Energy</summary>
    public NumericSensorEntity CatCameraUpSmartPlugTotalDailyEnergy => new(_haContext, "sensor.cat_camera_up_smart_plug_total_daily_energy");
    ///<summary>Cat Camera Up Smart Plug Uptime</summary>
    public NumericSensorEntity CatCameraUpSmartPlugUptime => new(_haContext, "sensor.cat_camera_up_smart_plug_uptime");
    ///<summary>Cat Camera Up Smart Plug Voltage</summary>
    public NumericSensorEntity CatCameraUpSmartPlugVoltage => new(_haContext, "sensor.cat_camera_up_smart_plug_voltage");
    ///<summary>Cat Camera Upstairs Disk Write Rate</summary>
    public NumericSensorEntity CatCameraUpstairsDiskWriteRate => new(_haContext, "sensor.cat_camera_upstairs_disk_write_rate");
    ///<summary>Cat Camera Upstairs Storage Used</summary>
    public NumericSensorEntity CatCameraUpstairsStorageUsed => new(_haContext, "sensor.cat_camera_upstairs_storage_used");
    ///<summary>Christmas Tree Smart Plug Current</summary>
    public NumericSensorEntity ChristmasTreeSmartPlugCurrent => new(_haContext, "sensor.christmas_tree_smart_plug_current");
    ///<summary>Christmas Tree Smart Plug Daily Energy</summary>
    public NumericSensorEntity ChristmasTreeSmartPlugDailyEnergy => new(_haContext, "sensor.christmas_tree_smart_plug_daily_energy");
    ///<summary>Christmas Tree Smart Plug Power</summary>
    public NumericSensorEntity ChristmasTreeSmartPlugPower => new(_haContext, "sensor.christmas_tree_smart_plug_power");
    ///<summary>Christmas Tree Smart Plug Voltage</summary>
    public NumericSensorEntity ChristmasTreeSmartPlugVoltage => new(_haContext, "sensor.christmas_tree_smart_plug_voltage");
    ///<summary>Christmas Tree Smart Plug WiFi Signal</summary>
    public NumericSensorEntity ChristmasTreeSmartPlugWifiSignal => new(_haContext, "sensor.christmas_tree_smart_plug_wifi_signal");
    ///<summary>System CPU usage</summary>
    public NumericSensorEntity CpuUsage => new(_haContext, "sensor.cpu_usage");
    ///<summary>System Monitor Disk usage /home</summary>
    public NumericSensorEntity DiskUsePercentHome => new(_haContext, "sensor.disk_use_percent_home");
    ///<summary>Downstairs TV Smart Plug Current</summary>
    public NumericSensorEntity DownstairsTvSmartPlugCurrent => new(_haContext, "sensor.downstairs_tv_smart_plug_current");
    ///<summary>Downstairs TV Smart Plug Daily Energy</summary>
    public NumericSensorEntity DownstairsTvSmartPlugDailyEnergy => new(_haContext, "sensor.downstairs_tv_smart_plug_daily_energy");
    ///<summary>Downstairs TV Smart Plug Power</summary>
    public NumericSensorEntity DownstairsTvSmartPlugPower => new(_haContext, "sensor.downstairs_tv_smart_plug_power");
    ///<summary>Downstairs TV Smart Plug Voltage</summary>
    public NumericSensorEntity DownstairsTvSmartPlugVoltage => new(_haContext, "sensor.downstairs_tv_smart_plug_voltage");
    ///<summary>Downstairs TV Smart Plug WiFi Signal</summary>
    public NumericSensorEntity DownstairsTvSmartPlugWifiSignal => new(_haContext, "sensor.downstairs_tv_smart_plug_wifi_signal");
    ///<summary>Dryer deltaEnergy</summary>
    public NumericSensorEntity DryerDeltaenergy => new(_haContext, "sensor.dryer_deltaenergy");
    ///<summary>Dryer energy</summary>
    public NumericSensorEntity DryerEnergy => new(_haContext, "sensor.dryer_energy");
    ///<summary>Dryer Energy Meter</summary>
    public NumericSensorEntity DryerEnergyMeter => new(_haContext, "sensor.dryer_energy_meter");
    ///<summary>Dryer energySaved</summary>
    public NumericSensorEntity DryerEnergysaved => new(_haContext, "sensor.dryer_energysaved");
    ///<summary>Dryer power</summary>
    public NumericSensorEntity DryerPower => new(_haContext, "sensor.dryer_power");
    ///<summary>Dryer Power Meter</summary>
    public NumericSensorEntity DryerPowerMeter => new(_haContext, "sensor.dryer_power_meter");
    ///<summary>Dryer powerEnergy</summary>
    public NumericSensorEntity DryerPowerenergy => new(_haContext, "sensor.dryer_powerenergy");
    ///<summary>EPSON ET-3760 Series Black ink</summary>
    public NumericSensorEntity EpsonEt3760SeriesBlackInk => new(_haContext, "sensor.epson_et_3760_series_black_ink");
    ///<summary>EPSON ET-3760 Series Cyan ink</summary>
    public NumericSensorEntity EpsonEt3760SeriesCyanInk => new(_haContext, "sensor.epson_et_3760_series_cyan_ink");
    ///<summary>EPSON ET-3760 Series Magenta ink</summary>
    public NumericSensorEntity EpsonEt3760SeriesMagentaInk => new(_haContext, "sensor.epson_et_3760_series_magenta_ink");
    ///<summary>EPSON ET-3760 Series Yellow ink</summary>
    public NumericSensorEntity EpsonEt3760SeriesYellowInk => new(_haContext, "sensor.epson_et_3760_series_yellow_ink");
    ///<summary>TrueNAS Datasets Eve</summary>
    public NumericSensorEntity Eve => new(_haContext, "sensor.eve");
    ///<summary>Eve/.bhyve_containers</summary>
    public NumericSensorEntity EveBhyveContainers => new(_haContext, "sensor.eve_bhyve_containers");
    ///<summary>System Eve free</summary>
    public NumericSensorEntity EveFree => new(_haContext, "sensor.eve_free");
    ///<summary>Eve/iocage</summary>
    public NumericSensorEntity EveIocage => new(_haContext, "sensor.eve_iocage");
    ///<summary>Eve/iocage/download</summary>
    public NumericSensorEntity EveIocageDownload => new(_haContext, "sensor.eve_iocage_download");
    ///<summary>Eve/iocage/download/11.2-RELEASE</summary>
    public NumericSensorEntity EveIocageDownload112Release => new(_haContext, "sensor.eve_iocage_download_11_2_release");
    ///<summary>Eve/iocage/download/11.3-RELEASE</summary>
    public NumericSensorEntity EveIocageDownload113Release => new(_haContext, "sensor.eve_iocage_download_11_3_release");
    ///<summary>Eve/iocage/download/12.1-RELEASE</summary>
    public NumericSensorEntity EveIocageDownload121Release => new(_haContext, "sensor.eve_iocage_download_12_1_release");
    ///<summary>Eve/iocage/download/12.2-RELEASE</summary>
    public NumericSensorEntity EveIocageDownload122Release => new(_haContext, "sensor.eve_iocage_download_12_2_release");
    ///<summary>Eve/iocage/download/13.0-RELEASE</summary>
    public NumericSensorEntity EveIocageDownload130Release => new(_haContext, "sensor.eve_iocage_download_13_0_release");
    ///<summary>Eve/iocage/download/13.1-RELEASE</summary>
    public NumericSensorEntity EveIocageDownload131Release => new(_haContext, "sensor.eve_iocage_download_13_1_release");
    ///<summary>Eve/iocage/images</summary>
    public NumericSensorEntity EveIocageImages => new(_haContext, "sensor.eve_iocage_images");
    ///<summary>Eve/iocage/jails</summary>
    public NumericSensorEntity EveIocageJails => new(_haContext, "sensor.eve_iocage_jails");
    ///<summary>Eve/iocage/jails/nextcloud-2023</summary>
    public NumericSensorEntity EveIocageJailsNextcloud2023 => new(_haContext, "sensor.eve_iocage_jails_nextcloud_2023");
    ///<summary>Eve/iocage/jails/nextcloud-2023/root</summary>
    public NumericSensorEntity EveIocageJailsNextcloud2023Root => new(_haContext, "sensor.eve_iocage_jails_nextcloud_2023_root");
    ///<summary>Eve/iocage/jails/Plex-Plugin</summary>
    public NumericSensorEntity EveIocageJailsPlexPlugin => new(_haContext, "sensor.eve_iocage_jails_plex_plugin");
    ///<summary>Eve/iocage/jails/Plex-Plugin/root</summary>
    public NumericSensorEntity EveIocageJailsPlexPluginRoot => new(_haContext, "sensor.eve_iocage_jails_plex_plugin_root");
    ///<summary>Eve/iocage/log</summary>
    public NumericSensorEntity EveIocageLog => new(_haContext, "sensor.eve_iocage_log");
    ///<summary>Eve/iocage/releases</summary>
    public NumericSensorEntity EveIocageReleases => new(_haContext, "sensor.eve_iocage_releases");
    ///<summary>Eve/iocage/releases/11.2-RELEASE</summary>
    public NumericSensorEntity EveIocageReleases112Release => new(_haContext, "sensor.eve_iocage_releases_11_2_release");
    ///<summary>Eve/iocage/releases/11.2-RELEASE/root</summary>
    public NumericSensorEntity EveIocageReleases112ReleaseRoot => new(_haContext, "sensor.eve_iocage_releases_11_2_release_root");
    ///<summary>Eve/iocage/releases/11.3-RELEASE</summary>
    public NumericSensorEntity EveIocageReleases113Release => new(_haContext, "sensor.eve_iocage_releases_11_3_release");
    ///<summary>Eve/iocage/releases/11.3-RELEASE/root</summary>
    public NumericSensorEntity EveIocageReleases113ReleaseRoot => new(_haContext, "sensor.eve_iocage_releases_11_3_release_root");
    ///<summary>Eve/iocage/releases/12.1-RELEASE</summary>
    public NumericSensorEntity EveIocageReleases121Release => new(_haContext, "sensor.eve_iocage_releases_12_1_release");
    ///<summary>Eve/iocage/releases/12.1-RELEASE/root</summary>
    public NumericSensorEntity EveIocageReleases121ReleaseRoot => new(_haContext, "sensor.eve_iocage_releases_12_1_release_root");
    ///<summary>Eve/iocage/releases/12.2-RELEASE</summary>
    public NumericSensorEntity EveIocageReleases122Release => new(_haContext, "sensor.eve_iocage_releases_12_2_release");
    ///<summary>Eve/iocage/releases/12.2-RELEASE/root</summary>
    public NumericSensorEntity EveIocageReleases122ReleaseRoot => new(_haContext, "sensor.eve_iocage_releases_12_2_release_root");
    ///<summary>Eve/iocage/releases/13.0-RELEASE</summary>
    public NumericSensorEntity EveIocageReleases130Release => new(_haContext, "sensor.eve_iocage_releases_13_0_release");
    ///<summary>Eve/iocage/releases/13.0-RELEASE/root</summary>
    public NumericSensorEntity EveIocageReleases130ReleaseRoot => new(_haContext, "sensor.eve_iocage_releases_13_0_release_root");
    ///<summary>Eve/iocage/releases/13.1-RELEASE</summary>
    public NumericSensorEntity EveIocageReleases131Release => new(_haContext, "sensor.eve_iocage_releases_13_1_release");
    ///<summary>Eve/iocage/releases/13.1-RELEASE/root</summary>
    public NumericSensorEntity EveIocageReleases131ReleaseRoot => new(_haContext, "sensor.eve_iocage_releases_13_1_release_root");
    ///<summary>Eve/iocage/templates</summary>
    public NumericSensorEntity EveIocageTemplates => new(_haContext, "sensor.eve_iocage_templates");
    ///<summary>Eve/Krueger Backup</summary>
    public NumericSensorEntity EveKruegerBackup => new(_haContext, "sensor.eve_krueger_backup");
    ///<summary>Eve/NAS</summary>
    public NumericSensorEntity EveNas => new(_haContext, "sensor.eve_nas");
    ///<summary>Eve/NAS/Allison</summary>
    public NumericSensorEntity EveNasAllison => new(_haContext, "sensor.eve_nas_allison");
    ///<summary>Eve/NAS/Backups</summary>
    public NumericSensorEntity EveNasBackups => new(_haContext, "sensor.eve_nas_backups");
    ///<summary>Eve/NAS/Backups/nextcloud-2023</summary>
    public NumericSensorEntity EveNasBackupsNextcloud2023 => new(_haContext, "sensor.eve_nas_backups_nextcloud_2023");
    ///<summary>Eve/NAS/Backups/Plex-Plugin</summary>
    public NumericSensorEntity EveNasBackupsPlexPlugin => new(_haContext, "sensor.eve_nas_backups_plex_plugin");
    ///<summary>Eve/NAS/Family</summary>
    public NumericSensorEntity EveNasFamily => new(_haContext, "sensor.eve_nas_family");
    ///<summary>Eve/NAS/Owen</summary>
    public NumericSensorEntity EveNasOwen => new(_haContext, "sensor.eve_nas_owen");
    ///<summary>Eve/NAS/Pictures</summary>
    public NumericSensorEntity EveNasPictures => new(_haContext, "sensor.eve_nas_pictures");
    ///<summary>Eve/NAS/Vault</summary>
    public NumericSensorEntity EveNasVault => new(_haContext, "sensor.eve_nas_vault");
    ///<summary>Eve/NAS/Videos</summary>
    public NumericSensorEntity EveNasVideos => new(_haContext, "sensor.eve_nas_videos");
    ///<summary>Eve/Proxmox Backup</summary>
    public NumericSensorEntity EveProxmoxBackup => new(_haContext, "sensor.eve_proxmox_backup");
    ///<summary>Eve/Time-Machine</summary>
    public NumericSensorEntity EveTimeMachine => new(_haContext, "sensor.eve_time_machine");
    ///<summary>System freenas-boot free</summary>
    public NumericSensorEntity FreenasBootFree => new(_haContext, "sensor.freenas_boot_free");
    ///<summary>Front Door Lock Battery level</summary>
    public NumericSensorEntity FrontDoorLockBatteryLevel => new(_haContext, "sensor.front_door_lock_battery_level");
    ///<summary>G4 Doorbell Pro Disk write rate</summary>
    public NumericSensorEntity G4DoorbellProDiskWriteRate => new(_haContext, "sensor.g4_doorbell_pro_disk_write_rate");
    ///<summary>G4 Doorbell Pro Storage used</summary>
    public NumericSensorEntity G4DoorbellProStorageUsed => new(_haContext, "sensor.g4_doorbell_pro_storage_used");
    ///<summary>G4 Doorbell Pro Voltage</summary>
    public NumericSensorEntity G4DoorbellProVoltage => new(_haContext, "sensor.g4_doorbell_pro_voltage");
    ///<summary>Galaxy Watch6 Classic (4H5R) Battery level</summary>
    public NumericSensorEntity GalaxyWatch6Classic4h5rBatteryLevel => new(_haContext, "sensor.galaxy_watch6_classic_4h5r_battery_level");
    ///<summary>Garage Door Sensor: Battery level</summary>
    public NumericSensorEntity GarageDoorSensorBatteryLevel => new(_haContext, "sensor.garage_door_sensor_battery_level");
    ///<summary>Home Allison Distance</summary>
    public NumericSensorEntity HomeAllisonDistance => new(_haContext, "sensor.home_allison_distance");
    ///<summary>Home Nearest distance</summary>
    public NumericSensorEntity HomeNearestDistance => new(_haContext, "sensor.home_nearest_distance");
    ///<summary>Home Owen Distance</summary>
    public NumericSensorEntity HomeOwenDistance => new(_haContext, "sensor.home_owen_distance");
    ///<summary>Internet Modem Smart Plug Current</summary>
    public NumericSensorEntity InternetModemSmartPlugCurrent => new(_haContext, "sensor.internet_modem_smart_plug_current");
    ///<summary>Internet Modem Smart Plug Daily Energy</summary>
    public NumericSensorEntity InternetModemSmartPlugDailyEnergy => new(_haContext, "sensor.internet_modem_smart_plug_daily_energy");
    ///<summary>Internet Modem Smart Plug Power</summary>
    public NumericSensorEntity InternetModemSmartPlugPower => new(_haContext, "sensor.internet_modem_smart_plug_power");
    ///<summary>Internet Modem Smart Plug Voltage</summary>
    public NumericSensorEntity InternetModemSmartPlugVoltage => new(_haContext, "sensor.internet_modem_smart_plug_voltage");
    ///<summary>Internet Modem Smart Plug WiFi Signal</summary>
    public NumericSensorEntity InternetModemSmartPlugWifiSignal => new(_haContext, "sensor.internet_modem_smart_plug_wifi_signal");
    ///<summary>Humidity</summary>
    public NumericSensorEntity KitchenThermostatHumidity => new(_haContext, "sensor.kitchen_thermostat_humidity");
    ///<summary>Temperature</summary>
    public NumericSensorEntity KitchenThermostatTemperature => new(_haContext, "sensor.kitchen_thermostat_temperature");
    ///<summary>L2ARC size</summary>
    public NumericSensorEntity L2arcSize => new(_haContext, "sensor.l2arc_size");
    ///<summary>Dining Room Lights Button Battery</summary>
    public NumericSensorEntity LumiLumiSensorSwitBattery => new(_haContext, "sensor.lumi_lumi_sensor_swit_battery");
    ///<summary>Bedroom Lamps Button Battery</summary>
    public NumericSensorEntity LumiLumiSensorSwitBattery2 => new(_haContext, "sensor.lumi_lumi_sensor_swit_battery_2");
    ///<summary>Dining Room Lights Button Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorSwitDeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_swit_device_temperature");
    ///<summary>Bedroom Lamps Button Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorSwitDeviceTemperature2 => new(_haContext, "sensor.lumi_lumi_sensor_swit_device_temperature_2");
    ///<summary>Main Thermostat Air temperature</summary>
    public NumericSensorEntity MainAirTemperature => new(_haContext, "sensor.main_air_temperature");
    ///<summary>Main Thermostat Battery level</summary>
    public NumericSensorEntity MainBatteryLevel => new(_haContext, "sensor.main_battery_level");
    ///<summary>Main Thermostat Humidity</summary>
    public NumericSensorEntity MainHumidity => new(_haContext, "sensor.main_humidity");
    ///<summary>System Memory usage</summary>
    public NumericSensorEntity MemoryUsage => new(_haContext, "sensor.memory_usage");
    ///<summary>System Monitor Memory usage</summary>
    public NumericSensorEntity MemoryUsePercent => new(_haContext, "sensor.memory_use_percent");
    ///<summary>CPU utilization</summary>
    public NumericSensorEntity OfficeSwitchCpuUtilization => new(_haContext, "sensor.office_switch_cpu_utilization");
    ///<summary>Memory utilization</summary>
    public NumericSensorEntity OfficeSwitchMemoryUtilization => new(_haContext, "sensor.office_switch_memory_utilization");
    ///<summary>Office Temperature Sensor Battery</summary>
    public NumericSensorEntity OfficeTemperatureSensorBattery => new(_haContext, "sensor.office_temperature_sensor_battery");
    ///<summary>Office Temperature Sensor Humidity</summary>
    public NumericSensorEntity OfficeTemperatureSensorHumidity => new(_haContext, "sensor.office_temperature_sensor_humidity");
    ///<summary>Office Temperature Sensor Pressure</summary>
    public NumericSensorEntity OfficeTemperatureSensorPressure => new(_haContext, "sensor.office_temperature_sensor_pressure");
    ///<summary>Office Temperature Sensor Temperature</summary>
    public NumericSensorEntity OfficeTemperatureSensorTemperature => new(_haContext, "sensor.office_temperature_sensor_temperature");
    ///<summary>Owen Computer Smart Plug Current</summary>
    public NumericSensorEntity OwenComputerSmartPlugCurrent => new(_haContext, "sensor.owen_computer_smart_plug_current");
    ///<summary>Owen Computer Smart Plug Daily Energy</summary>
    public NumericSensorEntity OwenComputerSmartPlugDailyEnergy => new(_haContext, "sensor.owen_computer_smart_plug_daily_energy");
    ///<summary>Owen Computer Smart Plug Power</summary>
    public NumericSensorEntity OwenComputerSmartPlugPower => new(_haContext, "sensor.owen_computer_smart_plug_power");
    ///<summary>Owen Computer Smart Plug Voltage</summary>
    public NumericSensorEntity OwenComputerSmartPlugVoltage => new(_haContext, "sensor.owen_computer_smart_plug_voltage");
    ///<summary>Owen Computer Smart Plug WiFi Signal</summary>
    public NumericSensorEntity OwenComputerSmartPlugWifiSignal => new(_haContext, "sensor.owen_computer_smart_plug_wifi_signal");
    ///<summary>Owen Distance (Miles)</summary>
    public NumericSensorEntity OwenDistanceMiles => new(_haContext, "sensor.owen_distance_miles");
    ///<summary>Owen Living Room Lamp Button Battery</summary>
    public NumericSensorEntity OwenLivingRoomLampButtonBattery2 => new(_haContext, "sensor.owen_living_room_lamp_button_battery_2");
    ///<summary>Owen Phone Battery Level</summary>
    public NumericSensorEntity OwenPhoneBatteryLevel => new(_haContext, "sensor.owen_phone_battery_level");
    ///<summary>Philips RWL020 Battery</summary>
    public NumericSensorEntity PhilipsRwl020Battery => new(_haContext, "sensor.philips_rwl020_battery");
    ///<summary>Garage-Door-Primary Openings</summary>
    public NumericSensorEntity PrimaryGarageDoorOpenings => new(_haContext, "sensor.primary_garage_door_openings");
    ///<summary>Primary Pi-Hole Ads blocked today</summary>
    public NumericSensorEntity PrimaryPiHoleAdsBlockedToday => new(_haContext, "sensor.primary_pi_hole_ads_blocked_today");
    ///<summary>Primary Pi-Hole Ads percentage blocked today</summary>
    public NumericSensorEntity PrimaryPiHoleAdsPercentageBlockedToday => new(_haContext, "sensor.primary_pi_hole_ads_percentage_blocked_today");
    ///<summary>Primary Pi-Hole DNS queries cached</summary>
    public NumericSensorEntity PrimaryPiHoleDnsQueriesCached => new(_haContext, "sensor.primary_pi_hole_dns_queries_cached");
    ///<summary>Primary Pi-Hole DNS queries forwarded</summary>
    public NumericSensorEntity PrimaryPiHoleDnsQueriesForwarded => new(_haContext, "sensor.primary_pi_hole_dns_queries_forwarded");
    ///<summary>Primary Pi-Hole DNS queries today</summary>
    public NumericSensorEntity PrimaryPiHoleDnsQueriesToday => new(_haContext, "sensor.primary_pi_hole_dns_queries_today");
    ///<summary>Unique Clients</summary>
    public NumericSensorEntity PrimaryPiHoleDnsUniqueClients => new(_haContext, "sensor.primary_pi_hole_dns_unique_clients");
    ///<summary>Primary Pi-Hole DNS unique domains</summary>
    public NumericSensorEntity PrimaryPiHoleDnsUniqueDomains => new(_haContext, "sensor.primary_pi_hole_dns_unique_domains");
    ///<summary>Primary Pi-Hole Domains blocked</summary>
    public NumericSensorEntity PrimaryPiHoleDomainsBlocked => new(_haContext, "sensor.primary_pi_hole_domains_blocked");
    ///<summary>Primary Pi-Hole Seen clients</summary>
    public NumericSensorEntity PrimaryPiHoleSeenClients => new(_haContext, "sensor.primary_pi_hole_seen_clients");
    ///<summary>System Monitor Processor use</summary>
    public NumericSensorEntity ProcessorUsePercent => new(_haContext, "sensor.processor_use_percent");
    ///<summary>CPU utilization</summary>
    public NumericSensorEntity RackSwitchCpuUtilization => new(_haContext, "sensor.rack_switch_cpu_utilization");
    ///<summary>Memory utilization</summary>
    public NumericSensorEntity RackSwitchMemoryUtilization => new(_haContext, "sensor.rack_switch_memory_utilization");
    ///<summary>CPU utilization</summary>
    public NumericSensorEntity RaptureCentralControlCpuUtilization => new(_haContext, "sensor.rapture_central_control_cpu_utilization");
    ///<summary>Memory utilization</summary>
    public NumericSensorEntity RaptureCentralControlMemoryUtilization => new(_haContext, "sensor.rapture_central_control_memory_utilization");
    ///<summary>Secondary Pi-Hole Ads blocked today</summary>
    public NumericSensorEntity SecondaryPiHoleAdsBlockedToday => new(_haContext, "sensor.secondary_pi_hole_ads_blocked_today");
    ///<summary>Secondary Pi-Hole Ads percentage blocked today</summary>
    public NumericSensorEntity SecondaryPiHoleAdsPercentageBlockedToday => new(_haContext, "sensor.secondary_pi_hole_ads_percentage_blocked_today");
    ///<summary>Secondary Pi-Hole DNS queries cached</summary>
    public NumericSensorEntity SecondaryPiHoleDnsQueriesCached => new(_haContext, "sensor.secondary_pi_hole_dns_queries_cached");
    ///<summary>Secondary Pi-Hole DNS queries forwarded</summary>
    public NumericSensorEntity SecondaryPiHoleDnsQueriesForwarded => new(_haContext, "sensor.secondary_pi_hole_dns_queries_forwarded");
    ///<summary>Secondary Pi-Hole DNS queries today</summary>
    public NumericSensorEntity SecondaryPiHoleDnsQueriesToday => new(_haContext, "sensor.secondary_pi_hole_dns_queries_today");
    ///<summary>Secondary Pi-Hole DNS unique clients</summary>
    public NumericSensorEntity SecondaryPiHoleDnsUniqueClients => new(_haContext, "sensor.secondary_pi_hole_dns_unique_clients");
    ///<summary>Secondary Pi-Hole DNS unique domains</summary>
    public NumericSensorEntity SecondaryPiHoleDnsUniqueDomains => new(_haContext, "sensor.secondary_pi_hole_dns_unique_domains");
    ///<summary>Secondary Pi-Hole Domains blocked</summary>
    public NumericSensorEntity SecondaryPiHoleDomainsBlocked => new(_haContext, "sensor.secondary_pi_hole_domains_blocked");
    ///<summary>Secondary Pi-Hole Seen clients</summary>
    public NumericSensorEntity SecondaryPiHoleSeenClients => new(_haContext, "sensor.secondary_pi_hole_seen_clients");
    ///<summary>Sullivan Security Recording capacity</summary>
    public NumericSensorEntity SullivanSecurityRecordingCapacity => new(_haContext, "sensor.sullivan_security_recording_capacity");
    ///<summary>Sullivan Security Resolution: 4K video</summary>
    public NumericSensorEntity SullivanSecurityResolution4kVideo => new(_haContext, "sensor.sullivan_security_resolution_4k_video");
    ///<summary>Sullivan Security Resolution: free space</summary>
    public NumericSensorEntity SullivanSecurityResolutionFreeSpace => new(_haContext, "sensor.sullivan_security_resolution_free_space");
    ///<summary>Sullivan Security Resolution: HD video</summary>
    public NumericSensorEntity SullivanSecurityResolutionHdVideo => new(_haContext, "sensor.sullivan_security_resolution_hd_video");
    ///<summary>Sullivan Security Storage utilization</summary>
    public NumericSensorEntity SullivanSecurityStorageUtilization => new(_haContext, "sensor.sullivan_security_storage_utilization");
    ///<summary>Sullivan Security Type: continuous video</summary>
    public NumericSensorEntity SullivanSecurityTypeContinuousVideo => new(_haContext, "sensor.sullivan_security_type_continuous_video");
    ///<summary>Sullivan Security Type: detections video</summary>
    public NumericSensorEntity SullivanSecurityTypeDetectionsVideo => new(_haContext, "sensor.sullivan_security_type_detections_video");
    ///<summary>Sullivan Security Type: timelapse video</summary>
    public NumericSensorEntity SullivanSecurityTypeTimelapseVideo => new(_haContext, "sensor.sullivan_security_type_timelapse_video");
    ///<summary>System Temperature</summary>
    public NumericSensorEntity Temperature => new(_haContext, "sensor.temperature");
    ///<summary>Treadmill Smart Plug Current</summary>
    public NumericSensorEntity TreadmillSmartPlugCurrent => new(_haContext, "sensor.treadmill_smart_plug_current");
    ///<summary>Treadmill Smart Plug Daily Energy</summary>
    public NumericSensorEntity TreadmillSmartPlugDailyEnergy => new(_haContext, "sensor.treadmill_smart_plug_daily_energy");
    ///<summary>Treadmill Smart Plug Power</summary>
    public NumericSensorEntity TreadmillSmartPlugPower => new(_haContext, "sensor.treadmill_smart_plug_power");
    ///<summary>Treadmill Smart Plug Voltage</summary>
    public NumericSensorEntity TreadmillSmartPlugVoltage => new(_haContext, "sensor.treadmill_smart_plug_voltage");
    ///<summary>Treadmill Smart Plug WiFi Signal</summary>
    public NumericSensorEntity TreadmillSmartPlugWifiSignal => new(_haContext, "sensor.treadmill_smart_plug_wifi_signal");
    ///<summary>TrueNAS Datasets Eve/.bhyve_containers</summary>
    public NumericSensorEntity TruenasDatasetsEveBhyveContainers => new(_haContext, "sensor.truenas_datasets_eve_bhyve_containers");
    ///<summary>TrueNAS Datasets Eve/iocage</summary>
    public NumericSensorEntity TruenasDatasetsEveIocage => new(_haContext, "sensor.truenas_datasets_eve_iocage");
    ///<summary>TrueNAS Datasets Eve/iocage/download</summary>
    public NumericSensorEntity TruenasDatasetsEveIocageDownload => new(_haContext, "sensor.truenas_datasets_eve_iocage_download");
    ///<summary>TrueNAS Datasets Eve/iocage/download/11.2-RELEASE</summary>
    public NumericSensorEntity TruenasDatasetsEveIocageDownload112Release => new(_haContext, "sensor.truenas_datasets_eve_iocage_download_11_2_release");
    ///<summary>TrueNAS Datasets Eve/iocage/download/11.3-RELEASE</summary>
    public NumericSensorEntity TruenasDatasetsEveIocageDownload113Release => new(_haContext, "sensor.truenas_datasets_eve_iocage_download_11_3_release");
    ///<summary>TrueNAS Datasets Eve/iocage/download/12.1-RELEASE</summary>
    public NumericSensorEntity TruenasDatasetsEveIocageDownload121Release => new(_haContext, "sensor.truenas_datasets_eve_iocage_download_12_1_release");
    ///<summary>TrueNAS Datasets Eve/iocage/download/12.2-RELEASE</summary>
    public NumericSensorEntity TruenasDatasetsEveIocageDownload122Release => new(_haContext, "sensor.truenas_datasets_eve_iocage_download_12_2_release");
    ///<summary>TrueNAS Datasets Eve/iocage/download/13.0-RELEASE</summary>
    public NumericSensorEntity TruenasDatasetsEveIocageDownload130Release => new(_haContext, "sensor.truenas_datasets_eve_iocage_download_13_0_release");
    ///<summary>TrueNAS Datasets Eve/iocage/download/13.1-RELEASE</summary>
    public NumericSensorEntity TruenasDatasetsEveIocageDownload131Release => new(_haContext, "sensor.truenas_datasets_eve_iocage_download_13_1_release");
    ///<summary>TrueNAS Datasets Eve/iocage/images</summary>
    public NumericSensorEntity TruenasDatasetsEveIocageImages => new(_haContext, "sensor.truenas_datasets_eve_iocage_images");
    ///<summary>TrueNAS Datasets Eve/iocage/jails</summary>
    public NumericSensorEntity TruenasDatasetsEveIocageJails => new(_haContext, "sensor.truenas_datasets_eve_iocage_jails");
    ///<summary>TrueNAS Datasets Eve/iocage/jails/nextcloud-2023</summary>
    public NumericSensorEntity TruenasDatasetsEveIocageJailsNextcloud2023 => new(_haContext, "sensor.truenas_datasets_eve_iocage_jails_nextcloud_2023");
    ///<summary>TrueNAS Datasets Eve/iocage/jails/nextcloud-2023/root</summary>
    public NumericSensorEntity TruenasDatasetsEveIocageJailsNextcloud2023Root => new(_haContext, "sensor.truenas_datasets_eve_iocage_jails_nextcloud_2023_root");
    ///<summary>Eve/iocage/jails/Plex-Plugin</summary>
    public NumericSensorEntity TruenasDatasetsEveIocageJailsPlexPlugin => new(_haContext, "sensor.truenas_datasets_eve_iocage_jails_plex_plugin");
    ///<summary>Eve/iocage/jails/Plex-Plugin/root</summary>
    public NumericSensorEntity TruenasDatasetsEveIocageJailsPlexPluginRoot => new(_haContext, "sensor.truenas_datasets_eve_iocage_jails_plex_plugin_root");
    ///<summary>TrueNAS Datasets Eve/iocage/log</summary>
    public NumericSensorEntity TruenasDatasetsEveIocageLog => new(_haContext, "sensor.truenas_datasets_eve_iocage_log");
    ///<summary>TrueNAS Datasets Eve/iocage/releases</summary>
    public NumericSensorEntity TruenasDatasetsEveIocageReleases => new(_haContext, "sensor.truenas_datasets_eve_iocage_releases");
    ///<summary>TrueNAS Datasets Eve/iocage/releases/11.2-RELEASE</summary>
    public NumericSensorEntity TruenasDatasetsEveIocageReleases112Release => new(_haContext, "sensor.truenas_datasets_eve_iocage_releases_11_2_release");
    ///<summary>TrueNAS Datasets Eve/iocage/releases/11.2-RELEASE/root</summary>
    public NumericSensorEntity TruenasDatasetsEveIocageReleases112ReleaseRoot => new(_haContext, "sensor.truenas_datasets_eve_iocage_releases_11_2_release_root");
    ///<summary>TrueNAS Datasets Eve/iocage/releases/11.3-RELEASE</summary>
    public NumericSensorEntity TruenasDatasetsEveIocageReleases113Release => new(_haContext, "sensor.truenas_datasets_eve_iocage_releases_11_3_release");
    ///<summary>TrueNAS Datasets Eve/iocage/releases/11.3-RELEASE/root</summary>
    public NumericSensorEntity TruenasDatasetsEveIocageReleases113ReleaseRoot => new(_haContext, "sensor.truenas_datasets_eve_iocage_releases_11_3_release_root");
    ///<summary>TrueNAS Datasets Eve/iocage/releases/12.1-RELEASE</summary>
    public NumericSensorEntity TruenasDatasetsEveIocageReleases121Release => new(_haContext, "sensor.truenas_datasets_eve_iocage_releases_12_1_release");
    ///<summary>TrueNAS Datasets Eve/iocage/releases/12.1-RELEASE/root</summary>
    public NumericSensorEntity TruenasDatasetsEveIocageReleases121ReleaseRoot => new(_haContext, "sensor.truenas_datasets_eve_iocage_releases_12_1_release_root");
    ///<summary>TrueNAS Datasets Eve/iocage/releases/12.2-RELEASE</summary>
    public NumericSensorEntity TruenasDatasetsEveIocageReleases122Release => new(_haContext, "sensor.truenas_datasets_eve_iocage_releases_12_2_release");
    ///<summary>TrueNAS Datasets Eve/iocage/releases/12.2-RELEASE/root</summary>
    public NumericSensorEntity TruenasDatasetsEveIocageReleases122ReleaseRoot => new(_haContext, "sensor.truenas_datasets_eve_iocage_releases_12_2_release_root");
    ///<summary>TrueNAS Datasets Eve/iocage/releases/13.0-RELEASE</summary>
    public NumericSensorEntity TruenasDatasetsEveIocageReleases130Release => new(_haContext, "sensor.truenas_datasets_eve_iocage_releases_13_0_release");
    ///<summary>TrueNAS Datasets Eve/iocage/releases/13.0-RELEASE/root</summary>
    public NumericSensorEntity TruenasDatasetsEveIocageReleases130ReleaseRoot => new(_haContext, "sensor.truenas_datasets_eve_iocage_releases_13_0_release_root");
    ///<summary>TrueNAS Datasets Eve/iocage/releases/13.1-RELEASE</summary>
    public NumericSensorEntity TruenasDatasetsEveIocageReleases131Release => new(_haContext, "sensor.truenas_datasets_eve_iocage_releases_13_1_release");
    ///<summary>TrueNAS Datasets Eve/iocage/releases/13.1-RELEASE/root</summary>
    public NumericSensorEntity TruenasDatasetsEveIocageReleases131ReleaseRoot => new(_haContext, "sensor.truenas_datasets_eve_iocage_releases_13_1_release_root");
    ///<summary>TrueNAS Datasets Eve/iocage/templates</summary>
    public NumericSensorEntity TruenasDatasetsEveIocageTemplates => new(_haContext, "sensor.truenas_datasets_eve_iocage_templates");
    ///<summary>TrueNAS Datasets Eve/Krueger Backup</summary>
    public NumericSensorEntity TruenasDatasetsEveKruegerBackup => new(_haContext, "sensor.truenas_datasets_eve_krueger_backup");
    ///<summary>TrueNAS Datasets Eve/NAS</summary>
    public NumericSensorEntity TruenasDatasetsEveNas => new(_haContext, "sensor.truenas_datasets_eve_nas");
    ///<summary>TrueNAS Datasets Eve/NAS/Allison</summary>
    public NumericSensorEntity TruenasDatasetsEveNasAllison => new(_haContext, "sensor.truenas_datasets_eve_nas_allison");
    ///<summary>TrueNAS Datasets Eve/NAS/Backups</summary>
    public NumericSensorEntity TruenasDatasetsEveNasBackups => new(_haContext, "sensor.truenas_datasets_eve_nas_backups");
    ///<summary>TrueNAS Datasets Eve/NAS/Backups/nextcloud-2023</summary>
    public NumericSensorEntity TruenasDatasetsEveNasBackupsNextcloud2023 => new(_haContext, "sensor.truenas_datasets_eve_nas_backups_nextcloud_2023");
    ///<summary>TrueNAS Datasets Eve/NAS/Backups/Plex-Plugin</summary>
    public NumericSensorEntity TruenasDatasetsEveNasBackupsPlexPlugin => new(_haContext, "sensor.truenas_datasets_eve_nas_backups_plex_plugin");
    ///<summary>TrueNAS Datasets Eve/NAS/Family</summary>
    public NumericSensorEntity TruenasDatasetsEveNasFamily => new(_haContext, "sensor.truenas_datasets_eve_nas_family");
    ///<summary>TrueNAS Datasets Eve/NAS/ISOs</summary>
    public NumericSensorEntity TruenasDatasetsEveNasIsos => new(_haContext, "sensor.truenas_datasets_eve_nas_isos");
    ///<summary>TrueNAS Datasets Eve/NAS/Owen</summary>
    public NumericSensorEntity TruenasDatasetsEveNasOwen => new(_haContext, "sensor.truenas_datasets_eve_nas_owen");
    ///<summary>TrueNAS Datasets Eve/NAS/Pictures</summary>
    public NumericSensorEntity TruenasDatasetsEveNasPictures => new(_haContext, "sensor.truenas_datasets_eve_nas_pictures");
    ///<summary>TrueNAS Datasets Eve/NAS/Vault</summary>
    public NumericSensorEntity TruenasDatasetsEveNasVault => new(_haContext, "sensor.truenas_datasets_eve_nas_vault");
    ///<summary>TrueNAS Datasets Eve/NAS/Videos</summary>
    public NumericSensorEntity TruenasDatasetsEveNasVideos => new(_haContext, "sensor.truenas_datasets_eve_nas_videos");
    ///<summary>TrueNAS Datasets Eve/ProxmoxBackup</summary>
    public NumericSensorEntity TruenasDatasetsEveProxmoxbackup => new(_haContext, "sensor.truenas_datasets_eve_proxmoxbackup");
    ///<summary>TrueNAS Datasets Eve/Time-Machine</summary>
    public NumericSensorEntity TruenasDatasetsEveTimeMachine => new(_haContext, "sensor.truenas_datasets_eve_time_machine");
    ///<summary>TrueNAS Disks ada0</summary>
    public NumericSensorEntity TruenasDisksAda0 => new(_haContext, "sensor.truenas_disks_ada0");
    ///<summary>TrueNAS Disks ada1</summary>
    public NumericSensorEntity TruenasDisksAda1 => new(_haContext, "sensor.truenas_disks_ada1");
    ///<summary>TrueNAS Disks ada2</summary>
    public NumericSensorEntity TruenasDisksAda2 => new(_haContext, "sensor.truenas_disks_ada2");
    ///<summary>TrueNAS Disks ada3</summary>
    public NumericSensorEntity TruenasDisksAda3 => new(_haContext, "sensor.truenas_disks_ada3");
    ///<summary>TrueNAS Disks ada4</summary>
    public NumericSensorEntity TruenasDisksAda4 => new(_haContext, "sensor.truenas_disks_ada4");
    ///<summary>[TV] Samsung 8 Series (55) Energy Meter</summary>
    public NumericSensorEntity TvSamsung8Series55EnergyMeter => new(_haContext, "sensor.tv_samsung_8_series_55_energy_meter");
    ///<summary>[TV] Samsung 8 Series (55) Power Meter</summary>
    public NumericSensorEntity TvSamsung8Series55PowerMeter => new(_haContext, "sensor.tv_samsung_8_series_55_power_meter");
    ///<summary>[TV] Samsung 8 Series (55) Volume</summary>
    public NumericSensorEntity TvSamsung8Series55Volume => new(_haContext, "sensor.tv_samsung_8_series_55_volume");
    ///<summary>CPU utilization</summary>
    public NumericSensorEntity U6CpuUtilization => new(_haContext, "sensor.u6_cpu_utilization");
    ///<summary>Memory utilization</summary>
    public NumericSensorEntity U6MemoryUtilization => new(_haContext, "sensor.u6_memory_utilization");
    ///<summary>Upstairs TV Smart Plug Current</summary>
    public NumericSensorEntity UpstairsTvSmartPlugCurrent => new(_haContext, "sensor.upstairs_tv_smart_plug_current");
    ///<summary>Upstairs TV Smart Plug Daily Energy</summary>
    public NumericSensorEntity UpstairsTvSmartPlugDailyEnergy => new(_haContext, "sensor.upstairs_tv_smart_plug_daily_energy");
    ///<summary>Upstairs TV Smart Plug Power</summary>
    public NumericSensorEntity UpstairsTvSmartPlugPower => new(_haContext, "sensor.upstairs_tv_smart_plug_power");
    ///<summary>Upstairs TV Smart Plug Voltage</summary>
    public NumericSensorEntity UpstairsTvSmartPlugVoltage => new(_haContext, "sensor.upstairs_tv_smart_plug_voltage");
    ///<summary>Upstairs TV Smart Plug WiFi Signal</summary>
    public NumericSensorEntity UpstairsTvSmartPlugWifiSignal => new(_haContext, "sensor.upstairs_tv_smart_plug_wifi_signal");
    ///<summary>Washer deltaEnergy</summary>
    public NumericSensorEntity WasherDeltaenergy => new(_haContext, "sensor.washer_deltaenergy");
    ///<summary>Washer energy</summary>
    public NumericSensorEntity WasherEnergy => new(_haContext, "sensor.washer_energy");
    ///<summary>Washer Energy Meter</summary>
    public NumericSensorEntity WasherEnergyMeter => new(_haContext, "sensor.washer_energy_meter");
    ///<summary>Washer energySaved</summary>
    public NumericSensorEntity WasherEnergysaved => new(_haContext, "sensor.washer_energysaved");
    ///<summary>Washer power</summary>
    public NumericSensorEntity WasherPower => new(_haContext, "sensor.washer_power");
    ///<summary>Washer Power Meter</summary>
    public NumericSensorEntity WasherPowerMeter => new(_haContext, "sensor.washer_power_meter");
    ///<summary>Washer powerEnergy</summary>
    public NumericSensorEntity WasherPowerenergy => new(_haContext, "sensor.washer_powerenergy");
}

public partial class SttEntities
{
    private readonly IHaContext _haContext;
    public SttEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all stt entities currently registered (at runtime) in Home Assistant as SttEntity</summary>
    public IEnumerable<SttEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("stt.")).Select(e => new SttEntity(e));
    ///<summary>Home Assistant Cloud</summary>
    public SttEntity HomeAssistantCloud => new(_haContext, "stt.home_assistant_cloud");
}

public partial class SunEntities
{
    private readonly IHaContext _haContext;
    public SunEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all sun entities currently registered (at runtime) in Home Assistant as SunEntity</summary>
    public IEnumerable<SunEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("sun.")).Select(e => new SunEntity(e));
    ///<summary>Sun</summary>
    public SunEntity Sun => new(_haContext, "sun.sun");
}

public partial class SwitchEntities
{
    private readonly IHaContext _haContext;
    public SwitchEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all switch entities currently registered (at runtime) in Home Assistant as SwitchEntity</summary>
    public IEnumerable<SwitchEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("switch.")).Select(e => new SwitchEntity(e));
    ///<summary>Allison Living Room Lamp</summary>
    public SwitchEntity AllisonLivingRoomLamp => new(_haContext, "switch.allison_living_room_lamp");
    public SwitchEntity Arcadia => new(_haContext, "switch.arcadia");
    public SwitchEntity BackOutsidePlugs => new(_haContext, "switch.back_outside_plugs");
    ///<summary>Bedroom Bedside Echo Show do not disturb switch</summary>
    public SwitchEntity BedroomBedsideEchoShowDoNotDisturbSwitch => new(_haContext, "switch.bedroom_bedside_echo_show_do_not_disturb_switch");
    ///<summary>Bedroom Bedside Echo Show repeat switch</summary>
    public SwitchEntity BedroomBedsideEchoShowRepeatSwitch => new(_haContext, "switch.bedroom_bedside_echo_show_repeat_switch");
    ///<summary>Bedroom Bedside Echo Show shuffle switch</summary>
    public SwitchEntity BedroomBedsideEchoShowShuffleSwitch => new(_haContext, "switch.bedroom_bedside_echo_show_shuffle_switch");
    ///<summary>Bedroom Fan </summary>
    public SwitchEntity BedroomFan => new(_haContext, "switch.bedroom_fan");
    ///<summary>Bedroom Lights</summary>
    public SwitchEntity BedroomLights => new(_haContext, "switch.bedroom_lights");
    ///<summary>Cat Camera Down Smart Plug</summary>
    public SwitchEntity CatCameraDownSmartPlug => new(_haContext, "switch.cat_camera_down_smart_plug");
    ///<summary>Cat Camera Downstairs Detections: Motion</summary>
    public SwitchEntity CatCameraDownstairsDetectionsMotion => new(_haContext, "switch.cat_camera_downstairs_detections_motion");
    ///<summary>Cat Camera Downstairs HDR Mode</summary>
    public SwitchEntity CatCameraDownstairsHdrMode => new(_haContext, "switch.cat_camera_downstairs_hdr_mode");
    ///<summary>Cat Camera Downstairs Overlay: Show Date</summary>
    public SwitchEntity CatCameraDownstairsOverlayShowDate => new(_haContext, "switch.cat_camera_downstairs_overlay_show_date");
    ///<summary>Cat Camera Downstairs Overlay: Show Logo</summary>
    public SwitchEntity CatCameraDownstairsOverlayShowLogo => new(_haContext, "switch.cat_camera_downstairs_overlay_show_logo");
    ///<summary>Cat Camera Downstairs Overlay: Show Name</summary>
    public SwitchEntity CatCameraDownstairsOverlayShowName => new(_haContext, "switch.cat_camera_downstairs_overlay_show_name");
    ///<summary>Cat Camera Downstairs Overlay: Show Nerd Mode</summary>
    public SwitchEntity CatCameraDownstairsOverlayShowNerdMode => new(_haContext, "switch.cat_camera_downstairs_overlay_show_nerd_mode");
    ///<summary>Cat Camera Downstairs Privacy Mode</summary>
    public SwitchEntity CatCameraDownstairsPrivacyMode => new(_haContext, "switch.cat_camera_downstairs_privacy_mode");
    ///<summary>Cat Camera Downstairs Status Light On</summary>
    public SwitchEntity CatCameraDownstairsStatusLightOn => new(_haContext, "switch.cat_camera_downstairs_status_light_on");
    ///<summary>Cat Camera Downstairs System Sounds</summary>
    public SwitchEntity CatCameraDownstairsSystemSounds => new(_haContext, "switch.cat_camera_downstairs_system_sounds");
    ///<summary>Cat Camera Up Smart Plug</summary>
    public SwitchEntity CatCameraUpSmartPlug => new(_haContext, "switch.cat_camera_up_smart_plug");
    ///<summary>Cat Camera Upstairs Detections: Motion</summary>
    public SwitchEntity CatCameraUpstairsDetectionsMotion => new(_haContext, "switch.cat_camera_upstairs_detections_motion");
    ///<summary>Cat Camera Upstairs HDR Mode</summary>
    public SwitchEntity CatCameraUpstairsHdrMode => new(_haContext, "switch.cat_camera_upstairs_hdr_mode");
    ///<summary>Cat Camera Upstairs Overlay: Show Date</summary>
    public SwitchEntity CatCameraUpstairsOverlayShowDate => new(_haContext, "switch.cat_camera_upstairs_overlay_show_date");
    ///<summary>Cat Camera Upstairs Overlay: Show Logo</summary>
    public SwitchEntity CatCameraUpstairsOverlayShowLogo => new(_haContext, "switch.cat_camera_upstairs_overlay_show_logo");
    ///<summary>Cat Camera Upstairs Overlay: Show Name</summary>
    public SwitchEntity CatCameraUpstairsOverlayShowName => new(_haContext, "switch.cat_camera_upstairs_overlay_show_name");
    ///<summary>Cat Camera Upstairs Overlay: Show Nerd Mode</summary>
    public SwitchEntity CatCameraUpstairsOverlayShowNerdMode => new(_haContext, "switch.cat_camera_upstairs_overlay_show_nerd_mode");
    ///<summary>Cat Camera Upstairs Privacy Mode</summary>
    public SwitchEntity CatCameraUpstairsPrivacyMode => new(_haContext, "switch.cat_camera_upstairs_privacy_mode");
    ///<summary>Cat Camera Upstairs Status Light On</summary>
    public SwitchEntity CatCameraUpstairsStatusLightOn => new(_haContext, "switch.cat_camera_upstairs_status_light_on");
    ///<summary>Cat Camera Upstairs System Sounds</summary>
    public SwitchEntity CatCameraUpstairsSystemSounds => new(_haContext, "switch.cat_camera_upstairs_system_sounds");
    ///<summary>Christmas Tree</summary>
    public SwitchEntity ChristmasTreeSmartPlug => new(_haContext, "switch.christmas_tree_smart_plug");
    ///<summary>Counter Lights</summary>
    public SwitchEntity CounterLights => new(_haContext, "switch.counter_lights");
    ///<summary>Deck Lights </summary>
    public SwitchEntity DeckLights => new(_haContext, "switch.deck_lights");
    public SwitchEntity DeckStringLights => new(_haContext, "switch.deck_string_lights");
    ///<summary>Dining Room Lights</summary>
    public SwitchEntity DiningRoomLights => new(_haContext, "switch.dining_room_lights");
    ///<summary>Downstairs TV Smart Plug Relay</summary>
    public SwitchEntity DownstairsTvSmartPlug => new(_haContext, "switch.downstairs_tv_smart_plug");
    ///<summary>Dryer</summary>
    public SwitchEntity Dryer => new(_haContext, "switch.dryer");
    ///<summary>Everywhere do not disturb switch</summary>
    public SwitchEntity EverywhereDoNotDisturbSwitch => new(_haContext, "switch.everywhere_do_not_disturb_switch");
    ///<summary>Everywhere repeat switch</summary>
    public SwitchEntity EverywhereRepeatSwitch => new(_haContext, "switch.everywhere_repeat_switch");
    ///<summary>Everywhere shuffle switch</summary>
    public SwitchEntity EverywhereShuffleSwitch => new(_haContext, "switch.everywhere_shuffle_switch");
    ///<summary>Front Outside Plugs</summary>
    public SwitchEntity FrontOutsidePlugs => new(_haContext, "switch.front_outside_plugs");
    ///<summary>Front Porch Lights</summary>
    public SwitchEntity FrontPorchLights => new(_haContext, "switch.front_porch_lights");
    ///<summary>G4 Doorbell Pro Detections: animal</summary>
    public SwitchEntity G4DoorbellProDetectionsAnimal => new(_haContext, "switch.g4_doorbell_pro_detections_animal");
    ///<summary>G4 Doorbell Pro Detections: CO</summary>
    public SwitchEntity G4DoorbellProDetectionsCo => new(_haContext, "switch.g4_doorbell_pro_detections_co");
    ///<summary>G4 Doorbell Pro Detections: motion</summary>
    public SwitchEntity G4DoorbellProDetectionsMotion => new(_haContext, "switch.g4_doorbell_pro_detections_motion");
    ///<summary>G4 Doorbell Pro Detections: package</summary>
    public SwitchEntity G4DoorbellProDetectionsPackage => new(_haContext, "switch.g4_doorbell_pro_detections_package");
    ///<summary>G4 Doorbell Pro Detections: person</summary>
    public SwitchEntity G4DoorbellProDetectionsPerson => new(_haContext, "switch.g4_doorbell_pro_detections_person");
    ///<summary>G4 Doorbell Pro Detections: smoke</summary>
    public SwitchEntity G4DoorbellProDetectionsSmokeCo => new(_haContext, "switch.g4_doorbell_pro_detections_smoke_co");
    ///<summary>G4 Doorbell Pro Detections: vehicle</summary>
    public SwitchEntity G4DoorbellProDetectionsVehicle => new(_haContext, "switch.g4_doorbell_pro_detections_vehicle");
    ///<summary>G4 Doorbell Pro HDR mode</summary>
    public SwitchEntity G4DoorbellProHdrMode => new(_haContext, "switch.g4_doorbell_pro_hdr_mode");
    ///<summary>G4 Doorbell Pro Overlay: show date</summary>
    public SwitchEntity G4DoorbellProOverlayShowDate => new(_haContext, "switch.g4_doorbell_pro_overlay_show_date");
    ///<summary>G4 Doorbell Pro Overlay: show logo</summary>
    public SwitchEntity G4DoorbellProOverlayShowLogo => new(_haContext, "switch.g4_doorbell_pro_overlay_show_logo");
    ///<summary>G4 Doorbell Pro Overlay: show name</summary>
    public SwitchEntity G4DoorbellProOverlayShowName => new(_haContext, "switch.g4_doorbell_pro_overlay_show_name");
    ///<summary>G4 Doorbell Pro Overlay: show nerd mode</summary>
    public SwitchEntity G4DoorbellProOverlayShowNerdMode => new(_haContext, "switch.g4_doorbell_pro_overlay_show_nerd_mode");
    ///<summary>G4 Doorbell Pro Privacy mode</summary>
    public SwitchEntity G4DoorbellProPrivacyMode => new(_haContext, "switch.g4_doorbell_pro_privacy_mode");
    ///<summary>G4 Doorbell Pro Status light on</summary>
    public SwitchEntity G4DoorbellProStatusLightOn => new(_haContext, "switch.g4_doorbell_pro_status_light_on");
    ///<summary>G4 Doorbell Pro System sounds</summary>
    public SwitchEntity G4DoorbellProSystemSounds => new(_haContext, "switch.g4_doorbell_pro_system_sounds");
    ///<summary>Garage Lights</summary>
    public SwitchEntity GarageLights => new(_haContext, "switch.garage_lights");
    ///<summary>Downstairs Echo Dot do not disturb switch</summary>
    public SwitchEntity HallwayEchoDotDoNotDisturbSwitch => new(_haContext, "switch.hallway_echo_dot_do_not_disturb_switch");
    ///<summary>Downstairs Echo Dot repeat switch</summary>
    public SwitchEntity HallwayEchoDotRepeatSwitch => new(_haContext, "switch.hallway_echo_dot_repeat_switch");
    ///<summary>Downstairs Echo Dot shuffle switch</summary>
    public SwitchEntity HallwayEchoDotShuffleSwitch => new(_haContext, "switch.hallway_echo_dot_shuffle_switch");
    ///<summary>Internet Modem Smart Plug</summary>
    public SwitchEntity InternetModemSmartPlug => new(_haContext, "switch.internet_modem_smart_plug");
    ///<summary>Kitchen Echo Show do not disturb switch</summary>
    public SwitchEntity KitchenEchoShowDoNotDisturbSwitch => new(_haContext, "switch.kitchen_echo_show_do_not_disturb_switch");
    ///<summary>Kitchen Echo Show repeat switch</summary>
    public SwitchEntity KitchenEchoShowRepeatSwitch => new(_haContext, "switch.kitchen_echo_show_repeat_switch");
    ///<summary>Kitchen Echo Show shuffle switch</summary>
    public SwitchEntity KitchenEchoShowShuffleSwitch => new(_haContext, "switch.kitchen_echo_show_shuffle_switch");
    ///<summary>Kitchen Lights </summary>
    public SwitchEntity KitchenLights => new(_haContext, "switch.kitchen_lights");
    ///<summary>Laundry Room Lights</summary>
    public SwitchEntity LaundryRoomLights => new(_haContext, "switch.laundry_room_lights");
    ///<summary>Living Room Echo</summary>
    public SwitchEntity LivingRoomEcho => new(_haContext, "switch.living_room_echo");
    ///<summary>Living Room Echo do not disturb switch</summary>
    public SwitchEntity LivingRoomEchoDoNotDisturbSwitch => new(_haContext, "switch.living_room_echo_do_not_disturb_switch");
    ///<summary>Living Room Echo LED</summary>
    public SwitchEntity LivingRoomEchoLed => new(_haContext, "switch.living_room_echo_led");
    ///<summary>Living Room Echo repeat switch</summary>
    public SwitchEntity LivingRoomEchoRepeatSwitch => new(_haContext, "switch.living_room_echo_repeat_switch");
    ///<summary>Living Room Echo shuffle switch</summary>
    public SwitchEntity LivingRoomEchoShuffleSwitch => new(_haContext, "switch.living_room_echo_shuffle_switch");
    ///<summary>Main Thermostat Node Identify - Binary</summary>
    public SwitchEntity MainNodeIdentifyBinary => new(_haContext, "switch.main_node_identify_binary");
    public SwitchEntity Neptune => new(_haContext, "switch.neptune");
    public SwitchEntity Node21 => new(_haContext, "switch.node_21");
    ///<summary>Office Desk Echo Show do not disturb switch</summary>
    public SwitchEntity OfficeDeskEchoShowDoNotDisturbSwitch => new(_haContext, "switch.office_desk_echo_show_do_not_disturb_switch");
    ///<summary>Office Desk Echo Show repeat switch</summary>
    public SwitchEntity OfficeDeskEchoShowRepeatSwitch => new(_haContext, "switch.office_desk_echo_show_repeat_switch");
    ///<summary>Office Desk Echo Show shuffle switch</summary>
    public SwitchEntity OfficeDeskEchoShowShuffleSwitch => new(_haContext, "switch.office_desk_echo_show_shuffle_switch");
    ///<summary>Office Lights</summary>
    public SwitchEntity OfficeLights => new(_haContext, "switch.office_lights");
    public SwitchEntity Olympus => new(_haContext, "switch.olympus");
    ///<summary>Back Plugs Left 1</summary>
    public SwitchEntity OutsideBackLeftPlug => new(_haContext, "switch.outside_back_left_plug");
    ///<summary>Outside 2 Right Plug</summary>
    public SwitchEntity OutsideBackRightPlug => new(_haContext, "switch.outside_back_right_plug");
    ///<summary>Outside Pumpkin</summary>
    public SwitchEntity OutsideFrontLeftPlug => new(_haContext, "switch.outside_front_left_plug");
    ///<summary>Outside String Lights</summary>
    public SwitchEntity OutsideFrontRightPlug => new(_haContext, "switch.outside_front_right_plug");
    ///<summary>Owen Computer Smart Plug Relay</summary>
    public SwitchEntity OwenComputerSmartPlug => new(_haContext, "switch.owen_computer_smart_plug");
    ///<summary>Owen Living Room Lamp</summary>
    public SwitchEntity OwenLivingRoomLamp => new(_haContext, "switch.owen_living_room_lamp");
    public SwitchEntity Persephone => new(_haContext, "switch.persephone");
    ///<summary>Garage-Door-Primary Learn</summary>
    public SwitchEntity PrimaryGarageDoorLearn => new(_haContext, "switch.primary_garage_door_learn");
    ///<summary>Primary Pi-Hole</summary>
    public SwitchEntity PrimaryPiHole => new(_haContext, "switch.primary_pi_hole");
    ///<summary>Router Smart Plug Switch</summary>
    public SwitchEntity RouterSmartPlugSwitch => new(_haContext, "switch.router_smart_plug_switch");
    ///<summary>Secondary Pi-Hole</summary>
    public SwitchEntity SecondaryPiHole => new(_haContext, "switch.secondary_pi_hole");
    ///<summary>Sound System do not disturb switch</summary>
    public SwitchEntity SoundSystemDoNotDisturbSwitch => new(_haContext, "switch.sound_system_do_not_disturb_switch");
    ///<summary>Sound System repeat switch</summary>
    public SwitchEntity SoundSystemRepeatSwitch => new(_haContext, "switch.sound_system_repeat_switch");
    ///<summary>Sound System shuffle switch</summary>
    public SwitchEntity SoundSystemShuffleSwitch => new(_haContext, "switch.sound_system_shuffle_switch");
    ///<summary>Stairway Lights</summary>
    public SwitchEntity StairwayLights => new(_haContext, "switch.stairway_lights");
    ///<summary>Sullivan Security Analytics enabled</summary>
    public SwitchEntity SullivanSecurityAnalyticsEnabled => new(_haContext, "switch.sullivan_security_analytics_enabled");
    ///<summary>Sullivan Security Insights enabled</summary>
    public SwitchEntity SullivanSecurityInsightsEnabled => new(_haContext, "switch.sullivan_security_insights_enabled");
    ///<summary>This Device do not disturb switch</summary>
    public SwitchEntity ThisDeviceDoNotDisturbSwitch => new(_haContext, "switch.this_device_do_not_disturb_switch");
    ///<summary>LED</summary>
    public SwitchEntity TpLinkSmartPlug31eeLed => new(_haContext, "switch.tp_link_smart_plug_31ee_led");
    ///<summary>Front Outside Plugs LED</summary>
    public SwitchEntity TpLinkSmartPlug66fdLed => new(_haContext, "switch.tp_link_smart_plug_66fd_led");
    ///<summary>Treadmill Smart Plug Relay</summary>
    public SwitchEntity TreadmillSmartPlugRelay => new(_haContext, "switch.treadmill_smart_plug_relay");
    ///<summary>[TV] Samsung 8 Series (55)</summary>
    public SwitchEntity TvSamsung8Series55 => new(_haContext, "switch.tv_samsung_8_series_55");
    ///<summary>NAS SSH</summary>
    public SwitchEntity UnifiNetworkNasSsh => new(_haContext, "switch.unifi_network_nas_ssh");
    ///<summary>Nextcloud</summary>
    public SwitchEntity UnifiNetworkNextcloud => new(_haContext, "switch.unifi_network_nextcloud");
    ///<summary>Plex</summary>
    public SwitchEntity UnifiNetworkPlex => new(_haContext, "switch.unifi_network_plex");
    ///<summary>Upstairs TV Smart Plug Relay</summary>
    public SwitchEntity UpstairsTvSmartPlug => new(_haContext, "switch.upstairs_tv_smart_plug");
    ///<summary>Utility Room Lights</summary>
    public SwitchEntity UtilityRoomLights => new(_haContext, "switch.utility_room_lights");
    ///<summary>Washer</summary>
    public SwitchEntity Washer => new(_haContext, "switch.washer");
}

public partial class TextEntities
{
    private readonly IHaContext _haContext;
    public TextEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all text entities currently registered (at runtime) in Home Assistant as TextEntity</summary>
    public IEnumerable<TextEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("text.")).Select(e => new TextEntity(e));
    ///<summary>G4 Doorbell Pro Doorbell</summary>
    public TextEntity G4DoorbellProDoorbell => new(_haContext, "text.g4_doorbell_pro_doorbell");
}

public partial class TimerEntities
{
    private readonly IHaContext _haContext;
    public TimerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all timer entities currently registered (at runtime) in Home Assistant as TimerEntity</summary>
    public IEnumerable<TimerEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("timer.")).Select(e => new TimerEntity(e));
    ///<summary>Timer</summary>
    public TimerEntity Timer => new(_haContext, "timer.timer");
}

public partial class TtsEntities
{
    private readonly IHaContext _haContext;
    public TtsEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all tts entities currently registered (at runtime) in Home Assistant as TtsEntity</summary>
    public IEnumerable<TtsEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("tts.")).Select(e => new TtsEntity(e));
    ///<summary>Home Assistant Cloud</summary>
    public TtsEntity HomeAssistantCloud => new(_haContext, "tts.home_assistant_cloud");
}

public partial class UpdateEntities
{
    private readonly IHaContext _haContext;
    public UpdateEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all update entities currently registered (at runtime) in Home Assistant as UpdateEntity</summary>
    public IEnumerable<UpdateEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("update.")).Select(e => new UpdateEntity(e));
    ///<summary>Alexa Media Player update</summary>
    public UpdateEntity AlexaMediaPlayerUpdate => new(_haContext, "update.alexa_media_player_update");
    ///<summary>Allison Bedroom Lamp Firmware</summary>
    public UpdateEntity AllisonBedroomLampFirmware => new(_haContext, "update.allison_bedroom_lamp_firmware");
    ///<summary>Allison Living Room Lamp Button Firmware</summary>
    public UpdateEntity AllisonLivingRoomLampButtonFirmware => new(_haContext, "update.allison_living_room_lamp_button_firmware");
    ///<summary>Allison Living Room Lamp Firmware</summary>
    public UpdateEntity AllisonLivingRoomLampFirmware => new(_haContext, "update.allison_living_room_lamp_firmware");
    ///<summary>AppDaemon Update</summary>
    public UpdateEntity AppdaemonUpdate => new(_haContext, "update.appdaemon_update");
    ///<summary>Bedroom Fan Firmware</summary>
    public UpdateEntity BedroomFanFirmware2 => new(_haContext, "update.bedroom_fan_firmware_2");
    ///<summary>Bedroom Lights Firmware</summary>
    public UpdateEntity BedroomLightsFirmware2 => new(_haContext, "update.bedroom_lights_firmware_2");
    ///<summary>Bubble Card update</summary>
    public UpdateEntity BubbleCardUpdate => new(_haContext, "update.bubble_card_update");
    ///<summary>Catppuccin Theme update</summary>
    public UpdateEntity CatppuccinThemeUpdate => new(_haContext, "update.catppuccin_theme_update");
    ///<summary>Firmware</summary>
    public UpdateEntity ChristmasTreeSmartPlugFirmware => new(_haContext, "update.christmas_tree_smart_plug_firmware");
    ///<summary>Counter Lights Firmware</summary>
    public UpdateEntity CounterLightsFirmware => new(_haContext, "update.counter_lights_firmware");
    ///<summary>Deck Lights Firmware</summary>
    public UpdateEntity DeckLightsFirmware2 => new(_haContext, "update.deck_lights_firmware_2");
    ///<summary>Firmware</summary>
    public UpdateEntity DeckStringLightsFirmware => new(_haContext, "update.deck_string_lights_firmware");
    ///<summary>Dining Room Lights Firmware</summary>
    public UpdateEntity DiningRoomLightsFirmware2 => new(_haContext, "update.dining_room_lights_firmware_2");
    ///<summary>Downstairs Lights Firmware</summary>
    public UpdateEntity DownstairsLightsFirmware => new(_haContext, "update.downstairs_lights_firmware");
    ///<summary>Duck DNS Update</summary>
    public UpdateEntity DuckDnsUpdate => new(_haContext, "update.duck_dns_update");
    ///<summary>ESPHome Update</summary>
    public UpdateEntity EsphomeUpdate => new(_haContext, "update.esphome_update");
    ///<summary>Front Door Lock Firmware</summary>
    public UpdateEntity FrontDoorLockFirmware => new(_haContext, "update.front_door_lock_firmware");
    ///<summary>Front Porch Lights Firmware</summary>
    public UpdateEntity FrontPorchLightsFirmware2 => new(_haContext, "update.front_porch_lights_firmware_2");
    ///<summary>Garage-Door-Primary Firmware</summary>
    public UpdateEntity GarageDoorPrimaryFirmware => new(_haContext, "update.garage_door_primary_firmware");
    ///<summary>Garage Lights Firmware</summary>
    public UpdateEntity GarageLightsFirmware => new(_haContext, "update.garage_lights_firmware");
    ///<summary>HACS update</summary>
    public UpdateEntity HacsUpdate => new(_haContext, "update.hacs_update");
    ///<summary>Home Assistant Core Update</summary>
    public UpdateEntity HomeAssistantCoreUpdate => new(_haContext, "update.home_assistant_core_update");
    ///<summary>Home Assistant Google Drive Backup Update</summary>
    public UpdateEntity HomeAssistantGoogleDriveBackupUpdate => new(_haContext, "update.home_assistant_google_drive_backup_update");
    ///<summary>Home Assistant Operating System Update</summary>
    public UpdateEntity HomeAssistantOperatingSystemUpdate => new(_haContext, "update.home_assistant_operating_system_update");
    ///<summary>Home Assistant Supervisor Update</summary>
    public UpdateEntity HomeAssistantSupervisorUpdate => new(_haContext, "update.home_assistant_supervisor_update");
    ///<summary>Home Assistant Swipe Navigation update</summary>
    public UpdateEntity HomeAssistantSwipeNavigationUpdate => new(_haContext, "update.home_assistant_swipe_navigation_update");
    ///<summary>Kitchen Lights Firmware</summary>
    public UpdateEntity InWallPaddleSwitchQfsw500sFirmware => new(_haContext, "update.in_wall_paddle_switch_qfsw_500s_firmware");
    ///<summary>Laundry Room Lights Firmware</summary>
    public UpdateEntity LaundryRoomLightsFirmware => new(_haContext, "update.laundry_room_lights_firmware");
    ///<summary>Main Thermostat Firmware</summary>
    public UpdateEntity MainFirmware => new(_haContext, "update.main_firmware");
    ///<summary>Mini Media Player update</summary>
    public UpdateEntity MiniMediaPlayerUpdate => new(_haContext, "update.mini_media_player_update");
    ///<summary>Mushroom update</summary>
    public UpdateEntity MushroomUpdate => new(_haContext, "update.mushroom_update");
    ///<summary>NetDaemon update</summary>
    public UpdateEntity NetdaemonUpdate => new(_haContext, "update.netdaemon_update");
    ///<summary>Firmware</summary>
    public UpdateEntity Node21Firmware => new(_haContext, "update.node_21_firmware");
    ///<summary>Office Lamp Firmware</summary>
    public UpdateEntity OfficeLampFirmware => new(_haContext, "update.office_lamp_firmware");
    ///<summary>Office Lights Firmware</summary>
    public UpdateEntity OfficeLightsFirmware2 => new(_haContext, "update.office_lights_firmware_2");
    ///<summary>Owen Bedroom Lamp Firmware</summary>
    public UpdateEntity OwenBedroomLampFirmware => new(_haContext, "update.owen_bedroom_lamp_firmware");
    ///<summary>Owen Living Room Lamp Button Firmware</summary>
    public UpdateEntity OwenLivingRoomLampButtonFirmware => new(_haContext, "update.owen_living_room_lamp_button_firmware");
    ///<summary>Owen Living Room Lamp Firmware</summary>
    public UpdateEntity OwenLivingRoomLampFirmware => new(_haContext, "update.owen_living_room_lamp_firmware");
    ///<summary>Philips RWL020 Firmware</summary>
    public UpdateEntity PhilipsRwl020Firmware => new(_haContext, "update.philips_rwl020_firmware");
    ///<summary>Primary Pi-Hole Core update available</summary>
    public UpdateEntity PrimaryPiHoleCoreUpdateAvailable => new(_haContext, "update.primary_pi_hole_core_update_available");
    ///<summary>Primary Pi-Hole FTL update available</summary>
    public UpdateEntity PrimaryPiHoleFtlUpdateAvailable => new(_haContext, "update.primary_pi_hole_ftl_update_available");
    ///<summary>Primary Pi-Hole Web update available</summary>
    public UpdateEntity PrimaryPiHoleWebUpdateAvailable => new(_haContext, "update.primary_pi_hole_web_update_available");
    public UpdateEntity RackSwitch => new(_haContext, "update.rack_switch");
    public UpdateEntity RaptureCentralControl => new(_haContext, "update.rapture_central_control");
    public UpdateEntity Rapturecentralcontrol => new(_haContext, "update.rapturecentralcontrol");
    ///<summary>Router Smart Plug Firmware</summary>
    public UpdateEntity RouterSmartPlugFirmware => new(_haContext, "update.router_smart_plug_firmware");
    ///<summary>Secondary Pi-Hole Core update available</summary>
    public UpdateEntity SecondaryPiHoleCoreUpdateAvailable => new(_haContext, "update.secondary_pi_hole_core_update_available");
    ///<summary>Secondary Pi-Hole FTL update available</summary>
    public UpdateEntity SecondaryPiHoleFtlUpdateAvailable => new(_haContext, "update.secondary_pi_hole_ftl_update_available");
    ///<summary>Secondary Pi-Hole Web update available</summary>
    public UpdateEntity SecondaryPiHoleWebUpdateAvailable => new(_haContext, "update.secondary_pi_hole_web_update_available");
    public UpdateEntity SecondaryRackSwitch => new(_haContext, "update.secondary_rack_switch");
    ///<summary>Stairway Lights Firmware</summary>
    public UpdateEntity StairwayLightsFirmware => new(_haContext, "update.stairway_lights_firmware");
    ///<summary>Studio Code Server Update</summary>
    public UpdateEntity StudioCodeServerUpdate => new(_haContext, "update.studio_code_server_update");
    ///<summary>Terminal &amp; SSH Update</summary>
    public UpdateEntity TerminalSshUpdate => new(_haContext, "update.terminal_ssh_update");
    ///<summary>TrueNAS update</summary>
    public UpdateEntity TruenasUpdate => new(_haContext, "update.truenas_update");
    public UpdateEntity TvSwitch => new(_haContext, "update.tv_switch");
    public UpdateEntity UnifiDeviceUpdateE063Da57B1E8 => new(_haContext, "update.unifi_device_update_e0_63_da_57_b1_e8");
    public UpdateEntity UnifiDeviceUpdateF4E2C64386Ca => new(_haContext, "update.unifi_device_update_f4_e2_c6_43_86_ca");
    ///<summary>System Update</summary>
    public UpdateEntity Update => new(_haContext, "update.update");
    ///<summary>Utility Room Lights Firmware</summary>
    public UpdateEntity UtilityRoomLightsFirmware => new(_haContext, "update.utility_room_lights_firmware");
    ///<summary>Weather Card update</summary>
    public UpdateEntity WeatherCardUpdate => new(_haContext, "update.weather_card_update");
    ///<summary>Z-Wave JS UI Update</summary>
    public UpdateEntity ZWaveJsUiUpdate => new(_haContext, "update.z_wave_js_ui_update");
    ///<summary>Z-Wave JS Update</summary>
    public UpdateEntity ZWaveJsUpdate => new(_haContext, "update.z_wave_js_update");
}

public partial class WeatherEntities
{
    private readonly IHaContext _haContext;
    public WeatherEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all weather entities currently registered (at runtime) in Home Assistant as WeatherEntity</summary>
    public IEnumerable<WeatherEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("weather.")).Select(e => new WeatherEntity(e));
    ///<summary>Forecast Home</summary>
    public WeatherEntity Home => new(_haContext, "weather.home");
    ///<summary>OpenWeatherMap</summary>
    public WeatherEntity Openweathermap => new(_haContext, "weather.openweathermap");
}

public partial class ZoneEntities
{
    private readonly IHaContext _haContext;
    public ZoneEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all zone entities currently registered (at runtime) in Home Assistant as ZoneEntity</summary>
    public IEnumerable<ZoneEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("zone.")).Select(e => new ZoneEntity(e));
    ///<summary>Cambridge</summary>
    public ZoneEntity Cambridge => new(_haContext, "zone.cambridge");
    ///<summary>Duluth</summary>
    public ZoneEntity Duluth => new(_haContext, "zone.duluth");
    ///<summary>Hidden Paradise</summary>
    public ZoneEntity HiddenParadise => new(_haContext, "zone.hidden_paradise");
    ///<summary>Home</summary>
    public ZoneEntity Home => new(_haContext, "zone.home");
    ///<summary>Mora</summary>
    public ZoneEntity Mora => new(_haContext, "zone.mora");
    ///<summary>Near Home</summary>
    public ZoneEntity NearHome => new(_haContext, "zone.near_home");
    ///<summary>Thief River Falls</summary>
    public ZoneEntity ThiefRiverFalls => new(_haContext, "zone.thief_river_falls");
}

public partial record LightEntity : Entity<LightEntity, EntityState<LightAttributes>, LightAttributes>, ILightEntityCore
{
    public LightEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public LightEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record LightAttributes
{
    [JsonPropertyName("supported_color_modes")]
    public IReadOnlyList<string>? SupportedColorModes { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("color_mode")]
    public string? ColorMode { get; init; }

    [JsonPropertyName("min_color_temp_kelvin")]
    public double? MinColorTempKelvin { get; init; }

    [JsonPropertyName("max_color_temp_kelvin")]
    public double? MaxColorTempKelvin { get; init; }

    [JsonPropertyName("min_mireds")]
    public double? MinMireds { get; init; }

    [JsonPropertyName("max_mireds")]
    public double? MaxMireds { get; init; }

    [JsonPropertyName("brightness")]
    public object? Brightness { get; init; }

    [JsonPropertyName("color_temp_kelvin")]
    public double? ColorTempKelvin { get; init; }

    [JsonPropertyName("color_temp")]
    public double? ColorTemp { get; init; }

    [JsonPropertyName("hs_color")]
    public IReadOnlyList<double>? HsColor { get; init; }

    [JsonPropertyName("rgb_color")]
    public IReadOnlyList<double>? RgbColor { get; init; }

    [JsonPropertyName("xy_color")]
    public IReadOnlyList<double>? XyColor { get; init; }

    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("effect_list")]
    public IReadOnlyList<string>? EffectList { get; init; }

    [JsonPropertyName("color")]
    public object? Color { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("effect")]
    public object? Effect { get; init; }

    [JsonPropertyName("off_with_transition")]
    public bool? OffWithTransition { get; init; }

    [JsonPropertyName("off_brightness")]
    public double? OffBrightness { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record MediaPlayerEntity : Entity<MediaPlayerEntity, EntityState<MediaPlayerAttributes>, MediaPlayerAttributes>, IMediaPlayerEntityCore
{
    public MediaPlayerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public MediaPlayerEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record MediaPlayerAttributes
{
    [JsonPropertyName("app_id")]
    public string? AppId { get; init; }

    [JsonPropertyName("app_name")]
    public string? AppName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("entity_picture_local")]
    public string? EntityPictureLocal { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }

    [JsonPropertyName("is_volume_muted")]
    public bool? IsVolumeMuted { get; init; }

    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    [JsonPropertyName("media_duration")]
    public double? MediaDuration { get; init; }

    [JsonPropertyName("media_position")]
    public double? MediaPosition { get; init; }

    [JsonPropertyName("media_position_updated_at")]
    public string? MediaPositionUpdatedAt { get; init; }

    [JsonPropertyName("media_title")]
    public string? MediaTitle { get; init; }

    [JsonPropertyName("media_album_name")]
    public string? MediaAlbumName { get; init; }

    [JsonPropertyName("media_image_url")]
    public string? MediaImageUrl { get; init; }

    [JsonPropertyName("media_artist")]
    public string? MediaArtist { get; init; }

    [JsonPropertyName("sound_mode_list")]
    public IReadOnlyList<string>? SoundModeList { get; init; }

    [JsonPropertyName("media_track")]
    public object? MediaTrack { get; init; }

    [JsonPropertyName("shuffle")]
    public bool? Shuffle { get; init; }

    [JsonPropertyName("repeat")]
    public string? Repeat { get; init; }

    [JsonPropertyName("source_list")]
    public IReadOnlyList<string>? SourceList { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("adb_response")]
    public object? AdbResponse { get; init; }

    [JsonPropertyName("hdmi_input")]
    public object? HdmiInput { get; init; }

    [JsonPropertyName("sound_mode")]
    public string? SoundMode { get; init; }

    [JsonPropertyName("sound_mode_raw")]
    public string? SoundModeRaw { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("assumed_state")]
    public bool? AssumedState { get; init; }

    [JsonPropertyName("media_playlist")]
    public string? MediaPlaylist { get; init; }

    [JsonPropertyName("available")]
    public bool? Available { get; init; }

    [JsonPropertyName("last_called")]
    public bool? LastCalled { get; init; }

    [JsonPropertyName("last_called_timestamp")]
    public double? LastCalledTimestamp { get; init; }

    [JsonPropertyName("last_called_summary")]
    public string? LastCalledSummary { get; init; }

    [JsonPropertyName("connected_bluetooth")]
    public object? ConnectedBluetooth { get; init; }

    [JsonPropertyName("bluetooth_list")]
    public object? BluetoothList { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record AutomationEntity : Entity<AutomationEntity, EntityState<AutomationAttributes>, AutomationAttributes>, IAutomationEntityCore
{
    public AutomationEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public AutomationEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record AutomationAttributes
{
    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("last_triggered")]
    public string? LastTriggered { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }
}

public partial record BinarySensorEntity : Entity<BinarySensorEntity, EntityState<BinarySensorAttributes>, BinarySensorAttributes>, IBinarySensorEntityCore
{
    public BinarySensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public BinarySensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record BinarySensorAttributes
{
    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("workdays")]
    public IReadOnlyList<string>? Workdays { get; init; }

    [JsonPropertyName("excludes")]
    public IReadOnlyList<string>? Excludes { get; init; }

    [JsonPropertyName("days_offset")]
    public double? DaysOffset { get; init; }

    [JsonPropertyName("Path")]
    public string? Path { get; init; }

    [JsonPropertyName("Status")]
    public string? Status { get; init; }

    [JsonPropertyName("Healthy")]
    public bool? Healthy { get; init; }

    [JsonPropertyName("Is decrypted")]
    public bool? Isdecrypted { get; init; }

    [JsonPropertyName("Autotrim")]
    public bool? Autotrim { get; init; }

    [JsonPropertyName("Scrub state")]
    public string? Scrubstate { get; init; }

    [JsonPropertyName("Scrub start")]
    public string? Scrubstart { get; init; }

    [JsonPropertyName("Scrub end")]
    public string? Scrubend { get; init; }

    [JsonPropertyName("Scrub secs left")]
    public object? Scrubsecsleft { get; init; }

    [JsonPropertyName("Available GiB")]
    public double? AvailableGiB { get; init; }

    [JsonPropertyName("Total GiB")]
    public double? TotalGiB { get; init; }

    [JsonPropertyName("Comment")]
    public string? Comment { get; init; }

    [JsonPropertyName("Jail ZFS dataset")]
    public string? JailZFSdataset { get; init; }

    [JsonPropertyName("Last started")]
    public string? Laststarted { get; init; }

    [JsonPropertyName("IP4 addr")]
    public string? IP4addr { get; init; }

    [JsonPropertyName("IP6 addr")]
    public string? IP6addr { get; init; }

    [JsonPropertyName("Release")]
    public string? Release { get; init; }

    [JsonPropertyName("Type")]
    public string? Type { get; init; }

    [JsonPropertyName("Plugin name")]
    public string? Pluginname { get; init; }

    [JsonPropertyName("Enable")]
    public bool? Enable { get; init; }

    [JsonPropertyName("State")]
    public string? State { get; init; }

    [JsonPropertyName("round_trip_time_avg")]
    public double? RoundTripTimeAvg { get; init; }

    [JsonPropertyName("round_trip_time_max")]
    public double? RoundTripTimeMax { get; init; }

    [JsonPropertyName("round_trip_time_mdev")]
    public object? RoundTripTimeMdev { get; init; }

    [JsonPropertyName("round_trip_time_min")]
    public double? RoundTripTimeMin { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record ButtonEntity : Entity<ButtonEntity, EntityState<ButtonAttributes>, ButtonAttributes>, IButtonEntityCore
{
    public ButtonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ButtonEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ButtonAttributes
{
    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record CameraEntity : Entity<CameraEntity, EntityState<CameraAttributes>, CameraAttributes>, ICameraEntityCore
{
    public CameraEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CameraEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record CameraAttributes
{
    [JsonPropertyName("access_token")]
    public string? AccessToken { get; init; }

    [JsonPropertyName("file_path")]
    public string? FilePath { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("motion_detection")]
    public bool? MotionDetection { get; init; }

    [JsonPropertyName("frontend_stream_type")]
    public string? FrontendStreamType { get; init; }

    [JsonPropertyName("width")]
    public double? Width { get; init; }

    [JsonPropertyName("height")]
    public double? Height { get; init; }

    [JsonPropertyName("fps")]
    public double? Fps { get; init; }

    [JsonPropertyName("bitrate")]
    public double? Bitrate { get; init; }

    [JsonPropertyName("channel_id")]
    public double? ChannelId { get; init; }
}

public partial record ClimateEntity : Entity<ClimateEntity, EntityState<ClimateAttributes>, ClimateAttributes>, IClimateEntityCore
{
    public ClimateEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ClimateEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ClimateAttributes
{
    [JsonPropertyName("hvac_modes")]
    public IReadOnlyList<string>? HvacModes { get; init; }

    [JsonPropertyName("min_temp")]
    public double? MinTemp { get; init; }

    [JsonPropertyName("max_temp")]
    public double? MaxTemp { get; init; }

    [JsonPropertyName("fan_modes")]
    public IReadOnlyList<string>? FanModes { get; init; }

    [JsonPropertyName("preset_modes")]
    public IReadOnlyList<string>? PresetModes { get; init; }

    [JsonPropertyName("current_temperature")]
    public double? CurrentTemperature { get; init; }

    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("target_temp_high")]
    public object? TargetTempHigh { get; init; }

    [JsonPropertyName("target_temp_low")]
    public object? TargetTempLow { get; init; }

    [JsonPropertyName("current_humidity")]
    public double? CurrentHumidity { get; init; }

    [JsonPropertyName("fan_mode")]
    public string? FanMode { get; init; }

    [JsonPropertyName("hvac_action")]
    public string? HvacAction { get; init; }

    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }

    [JsonPropertyName("fan_state")]
    public string? FanState { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record ConversationEntity : Entity<ConversationEntity, EntityState<ConversationAttributes>, ConversationAttributes>
{
    public ConversationEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ConversationEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ConversationAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record CoverEntity : Entity<CoverEntity, EntityState<CoverAttributes>, CoverAttributes>, ICoverEntityCore
{
    public CoverEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CoverEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record CoverAttributes
{
    [JsonPropertyName("current_position")]
    public double? CurrentPosition { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record DeviceTrackerEntity : Entity<DeviceTrackerEntity, EntityState<DeviceTrackerAttributes>, DeviceTrackerAttributes>, IDeviceTrackerEntityCore
{
    public DeviceTrackerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public DeviceTrackerEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record DeviceTrackerAttributes
{
    [JsonPropertyName("source_type")]
    public string? SourceType { get; init; }

    [JsonPropertyName("battery_level")]
    public double? BatteryLevel { get; init; }

    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("gps_accuracy")]
    public double? GpsAccuracy { get; init; }

    [JsonPropertyName("altitude")]
    public double? Altitude { get; init; }

    [JsonPropertyName("vertical_accuracy")]
    public double? VerticalAccuracy { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("course")]
    public double? Course { get; init; }

    [JsonPropertyName("speed")]
    public double? Speed { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record EventEntity : Entity<EventEntity, EntityState<EventAttributes>, EventAttributes>
{
    public EventEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public EventEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record EventAttributes
{
    [JsonPropertyName("event_types")]
    public IReadOnlyList<string>? EventTypes { get; init; }

    [JsonPropertyName("event_type")]
    public string? EventType { get; init; }

    [JsonPropertyName("event_id")]
    public string? EventId { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("value")]
    public double? Value { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record GroupEntity : Entity<GroupEntity, EntityState<GroupAttributes>, GroupAttributes>, IGroupEntityCore
{
    public GroupEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public GroupEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record GroupAttributes
{
    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("order")]
    public double? Order { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }
}

public partial record InputBooleanEntity : Entity<InputBooleanEntity, EntityState<InputBooleanAttributes>, InputBooleanAttributes>, IInputBooleanEntityCore
{
    public InputBooleanEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputBooleanEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputBooleanAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record InputDatetimeEntity : Entity<InputDatetimeEntity, EntityState<InputDatetimeAttributes>, InputDatetimeAttributes>, IInputDatetimeEntityCore
{
    public InputDatetimeEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputDatetimeEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputDatetimeAttributes
{
    [JsonPropertyName("has_date")]
    public bool? HasDate { get; init; }

    [JsonPropertyName("has_time")]
    public bool? HasTime { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("hour")]
    public double? Hour { get; init; }

    [JsonPropertyName("minute")]
    public double? Minute { get; init; }

    [JsonPropertyName("second")]
    public double? Second { get; init; }

    [JsonPropertyName("timestamp")]
    public double? Timestamp { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputNumberEntity : NumericEntity<InputNumberEntity, NumericEntityState<InputNumberAttributes>, InputNumberAttributes>, IInputNumberEntityCore
{
    public InputNumberEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputNumberEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputNumberAttributes
{
    [JsonPropertyName("initial")]
    public object? Initial { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("step")]
    public double? Step { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record InputSelectEntity : Entity<InputSelectEntity, EntityState<InputSelectAttributes>, InputSelectAttributes>, IInputSelectEntityCore
{
    public InputSelectEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputSelectEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputSelectAttributes
{
    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record LockEntity : Entity<LockEntity, EntityState<LockAttributes>, LockAttributes>, ILockEntityCore
{
    public LockEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public LockEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record LockAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record NumberEntity : NumericEntity<NumberEntity, NumericEntityState<NumberAttributes>, NumberAttributes>, INumberEntityCore
{
    public NumberEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NumberEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record NumberAttributes
{
    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("step")]
    public double? Step { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record PersonEntity : Entity<PersonEntity, EntityState<PersonAttributes>, PersonAttributes>, IPersonEntityCore
{
    public PersonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public PersonEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record PersonAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("device_trackers")]
    public IReadOnlyList<string>? DeviceTrackers { get; init; }

    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("gps_accuracy")]
    public double? GpsAccuracy { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("user_id")]
    public string? UserId { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record RemoteEntity : Entity<RemoteEntity, EntityState<RemoteAttributes>, RemoteAttributes>, IRemoteEntityCore
{
    public RemoteEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public RemoteEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record RemoteAttributes
{
    [JsonPropertyName("activity_list")]
    public IReadOnlyList<object>? ActivityList { get; init; }

    [JsonPropertyName("current_activity")]
    public string? CurrentActivity { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record SceneEntity : Entity<SceneEntity, EntityState<SceneAttributes>, SceneAttributes>, ISceneEntityCore
{
    public SceneEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SceneEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SceneAttributes
{
    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }
}

public partial record ScriptEntity : Entity<ScriptEntity, EntityState<ScriptAttributes>, ScriptAttributes>, IScriptEntityCore
{
    public ScriptEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ScriptEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ScriptAttributes
{
    [JsonPropertyName("last_triggered")]
    public string? LastTriggered { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record SelectEntity : Entity<SelectEntity, EntityState<SelectAttributes>, SelectAttributes>, ISelectEntityCore
{
    public SelectEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SelectEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SelectAttributes
{
    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }
}

public partial record SensorEntity : Entity<SensorEntity, EntityState<SensorAttributes>, SensorAttributes>, ISensorEntityCore
{
    public SensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SensorAttributes
{
    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("Low Power Mode")]
    public bool? LowPowerMode { get; init; }

    [JsonPropertyName("Administrative Area")]
    public string? AdministrativeArea { get; init; }

    [JsonPropertyName("Areas Of Interest")]
    public string? AreasOfInterest { get; init; }

    [JsonPropertyName("Country")]
    public string? Country { get; init; }

    [JsonPropertyName("Inland Water")]
    public string? InlandWater { get; init; }

    [JsonPropertyName("ISO Country Code")]
    public string? ISOCountryCode { get; init; }

    [JsonPropertyName("Locality")]
    public string? Locality { get; init; }

    [JsonPropertyName("Location")]
    public IReadOnlyList<double>? Location_0 { get; init; }

    [JsonPropertyName("location")]
    public string? Location_1 { get; init; }

    [JsonPropertyName("Name")]
    public string? Name { get; init; }

    [JsonPropertyName("Ocean")]
    public string? Ocean { get; init; }

    [JsonPropertyName("Postal Code")]
    public string? PostalCode { get; init; }

    [JsonPropertyName("Sub Administrative Area")]
    public string? SubAdministrativeArea { get; init; }

    [JsonPropertyName("Sub Locality")]
    public string? SubLocality { get; init; }

    [JsonPropertyName("Sub Thoroughfare")]
    public string? SubThoroughfare { get; init; }

    [JsonPropertyName("Thoroughfare")]
    public string? Thoroughfare { get; init; }

    [JsonPropertyName("Time Zone")]
    public string? TimeZone { get; init; }

    [JsonPropertyName("Zones")]
    public IReadOnlyList<string>? Zones { get; init; }

    [JsonPropertyName("Allows VoIP")]
    public bool? AllowsVoIP { get; init; }

    [JsonPropertyName("Carrier ID")]
    public string? CarrierID { get; init; }

    [JsonPropertyName("Carrier Name")]
    public string? CarrierName { get; init; }

    [JsonPropertyName("Mobile Country Code")]
    public string? MobileCountryCode { get; init; }

    [JsonPropertyName("Mobile Network Code")]
    public string? MobileNetworkCode { get; init; }

    [JsonPropertyName("Current Radio Technology")]
    public string? CurrentRadioTechnology { get; init; }

    [JsonPropertyName("Confidence")]
    public string? Confidence { get; init; }

    [JsonPropertyName("Types")]
    public IReadOnlyList<string>? Types { get; init; }

    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("metered")]
    public bool? Metered { get; init; }

    [JsonPropertyName("Local Time")]
    public string? LocalTime { get; init; }

    [JsonPropertyName("Package")]
    public string? Package { get; init; }

    [JsonPropertyName("Time in Milliseconds")]
    public double? TimeinMilliseconds { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("info")]
    public string? Info { get; init; }

    [JsonPropertyName("serial")]
    public string? Serial { get; init; }

    [JsonPropertyName("state_message")]
    public object? StateMessage { get; init; }

    [JsonPropertyName("state_reason")]
    public object? StateReason { get; init; }

    [JsonPropertyName("command_set")]
    public string? CommandSet { get; init; }

    [JsonPropertyName("uri_supported")]
    public string? UriSupported { get; init; }

    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("Direction")]
    public string? Direction { get; init; }

    [JsonPropertyName("Path")]
    public string? Path { get; init; }

    [JsonPropertyName("Enabled")]
    public bool? Enabled { get; init; }

    [JsonPropertyName("Transfer mode")]
    public string? Transfermode { get; init; }

    [JsonPropertyName("Snapshot")]
    public bool? Snapshot { get; init; }

    [JsonPropertyName("Time started")]
    public double? Timestarted { get; init; }

    [JsonPropertyName("Time finished")]
    public double? Timefinished { get; init; }

    [JsonPropertyName("Job percent")]
    public double? Jobpercent { get; init; }

    [JsonPropertyName("Job description")]
    public string? Jobdescription { get; init; }

    [JsonPropertyName("Recursive")]
    public bool? Recursive { get; init; }

    [JsonPropertyName("Lifetime value")]
    public double? Lifetimevalue { get; init; }

    [JsonPropertyName("Lifetime unit")]
    public string? Lifetimeunit { get; init; }

    [JsonPropertyName("Naming schema")]
    public string? Namingschema { get; init; }

    [JsonPropertyName("Allow empty")]
    public bool? Allowempty { get; init; }

    [JsonPropertyName("VMware sync")]
    public bool? VMwaresync { get; init; }

    [JsonPropertyName("State")]
    public string? State { get; init; }

    [JsonPropertyName("Datetime")]
    public string? Datetime { get; init; }

    [JsonPropertyName("recurrence")]
    public object? Recurrence { get; init; }

    [JsonPropertyName("process_timestamp")]
    public string? ProcessTimestamp { get; init; }

    [JsonPropertyName("prior_value")]
    public object? PriorValue { get; init; }

    [JsonPropertyName("total_active")]
    public double? TotalActive { get; init; }

    [JsonPropertyName("total_all")]
    public double? TotalAll { get; init; }

    [JsonPropertyName("sorted_active")]
    public string? SortedActive { get; init; }

    [JsonPropertyName("sorted_all")]
    public string? SortedAll { get; init; }

    [JsonPropertyName("status")]
    public string? Status { get; init; }

    [JsonPropertyName("dismissed")]
    public object? Dismissed { get; init; }

    [JsonPropertyName("timer")]
    public object? Timer { get; init; }

    [JsonPropertyName("reminder")]
    public object? Reminder { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("last_backup")]
    public string? LastBackup { get; init; }

    [JsonPropertyName("next_backup")]
    public string? NextBackup { get; init; }

    [JsonPropertyName("last_uploaded")]
    public string? LastUploaded { get; init; }

    [JsonPropertyName("backups_in_google_drive")]
    public double? BackupsInGoogleDrive { get; init; }

    [JsonPropertyName("backups_in_home_assistant")]
    public double? BackupsInHomeAssistant { get; init; }

    [JsonPropertyName("size_in_google_drive")]
    public string? SizeInGoogleDrive { get; init; }

    [JsonPropertyName("size_in_home_assistant")]
    public string? SizeInHomeAssistant { get; init; }

    [JsonPropertyName("backups")]
    public IReadOnlyList<object>? Backups { get; init; }

    [JsonPropertyName("free_space_in_google_drive")]
    public string? FreeSpaceInGoogleDrive { get; init; }
}

public partial record NumericSensorEntity : NumericEntity<NumericSensorEntity, NumericEntityState<NumericSensorAttributes>, NumericSensorAttributes>, ISensorEntityCore
{
    public NumericSensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NumericSensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record NumericSensorAttributes
{
    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("Available")]
    public object? Available { get; init; }

    [JsonPropertyName("Available (Important)")]
    public string? AvailableImportant { get; init; }

    [JsonPropertyName("Available (Opportunistic)")]
    public string? AvailableOpportunistic { get; init; }

    [JsonPropertyName("Total")]
    public string? Total { get; init; }

    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("marker_high_level")]
    public double? MarkerHighLevel { get; init; }

    [JsonPropertyName("marker_low_level")]
    public double? MarkerLowLevel { get; init; }

    [JsonPropertyName("marker_type")]
    public string? MarkerType { get; init; }

    [JsonPropertyName("power_consumption_start")]
    public string? PowerConsumptionStart { get; init; }

    [JsonPropertyName("power_consumption_end")]
    public string? PowerConsumptionEnd { get; init; }

    [JsonPropertyName("CPU system")]
    public double? CPUsystem { get; init; }

    [JsonPropertyName("CPU user")]
    public double? CPUuser { get; init; }

    [JsonPropertyName("CPU nice")]
    public double? CPUnice { get; init; }

    [JsonPropertyName("CPU idle")]
    public double? CPUidle { get; init; }

    [JsonPropertyName("Memory used value")]
    public double? Memoryusedvalue { get; init; }

    [JsonPropertyName("Memory free value")]
    public double? Memoryfreevalue { get; init; }

    [JsonPropertyName("Memory cached value")]
    public double? Memorycachedvalue { get; init; }

    [JsonPropertyName("Memory buffered value")]
    public double? Memorybufferedvalue { get; init; }

    [JsonPropertyName("Memory total value")]
    public double? Memorytotalvalue { get; init; }

    [JsonPropertyName("Type")]
    public string? Type { get; init; }

    [JsonPropertyName("Pool")]
    public string? Pool { get; init; }

    [JsonPropertyName("Mountpoint")]
    public string? Mountpoint { get; init; }

    [JsonPropertyName("Deduplication")]
    public bool? Deduplication { get; init; }

    [JsonPropertyName("Atime")]
    public bool? Atime { get; init; }

    [JsonPropertyName("Casesensitivity")]
    public string? Casesensitivity { get; init; }

    [JsonPropertyName("Checksum")]
    public double? Checksum { get; init; }

    [JsonPropertyName("Exec")]
    public bool? Exec { get; init; }

    [JsonPropertyName("Sync")]
    public string? Sync { get; init; }

    [JsonPropertyName("Compression")]
    public string? Compression { get; init; }

    [JsonPropertyName("Compressratio")]
    public string? Compressratio { get; init; }

    [JsonPropertyName("Quota")]
    public object? Quota { get; init; }

    [JsonPropertyName("Copies")]
    public double? Copies { get; init; }

    [JsonPropertyName("Readonly")]
    public bool? Readonly { get; init; }

    [JsonPropertyName("Recordsize")]
    public double? Recordsize { get; init; }

    [JsonPropertyName("Encryption algorithm")]
    public string? Encryptionalgorithm { get; init; }

    [JsonPropertyName("Used")]
    public double? Used { get; init; }

    [JsonPropertyName("Serial")]
    public string? Serial { get; init; }

    [JsonPropertyName("Size")]
    public double? Size { get; init; }

    [JsonPropertyName("Hddstandby")]
    public string? Hddstandby { get; init; }

    [JsonPropertyName("Hddstandby force")]
    public bool? Hddstandbyforce { get; init; }

    [JsonPropertyName("Advpowermgmt")]
    public string? Advpowermgmt { get; init; }

    [JsonPropertyName("Acousticlevel")]
    public string? Acousticlevel { get; init; }

    [JsonPropertyName("Togglesmart")]
    public bool? Togglesmart { get; init; }

    [JsonPropertyName("Model")]
    public string? Model { get; init; }

    [JsonPropertyName("Rotationrate")]
    public double? Rotationrate { get; init; }

    [JsonPropertyName("Name")]
    public string? Name { get; init; }

    [JsonPropertyName("Devname")]
    public string? Devname { get; init; }

    [JsonPropertyName("Zfs guid")]
    public string? Zfsguid { get; init; }

    [JsonPropertyName("Identifier")]
    public string? Identifier { get; init; }

    [JsonPropertyName("Path")]
    public string? Path { get; init; }

    [JsonPropertyName("Status")]
    public string? Status { get; init; }

    [JsonPropertyName("Healthy")]
    public bool? Healthy { get; init; }

    [JsonPropertyName("Is decrypted")]
    public bool? Isdecrypted { get; init; }

    [JsonPropertyName("Autotrim")]
    public bool? Autotrim { get; init; }

    [JsonPropertyName("Scrub state")]
    public string? Scrubstate { get; init; }

    [JsonPropertyName("Scrub start")]
    public string? Scrubstart { get; init; }

    [JsonPropertyName("Scrub end")]
    public string? Scrubend { get; init; }

    [JsonPropertyName("Scrub secs left")]
    public object? Scrubsecsleft { get; init; }

    [JsonPropertyName("Usage")]
    public double? Usage { get; init; }

    [JsonPropertyName("Description")]
    public object? Description { get; init; }

    [JsonPropertyName("Mtu")]
    public object? Mtu { get; init; }

    [JsonPropertyName("Link state")]
    public string? Linkstate { get; init; }

    [JsonPropertyName("Active media type")]
    public string? Activemediatype { get; init; }

    [JsonPropertyName("Active media subtype")]
    public string? Activemediasubtype { get; init; }

    [JsonPropertyName("Link address")]
    public string? Linkaddress { get; init; }

    [JsonPropertyName("battery_quantity")]
    public double? BatteryQuantity { get; init; }

    [JsonPropertyName("battery_size")]
    public string? BatterySize { get; init; }

    [JsonPropertyName("battery_voltage")]
    public double? BatteryVoltage { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record SttEntity : Entity<SttEntity, EntityState<SttAttributes>, SttAttributes>
{
    public SttEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SttEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SttAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SunEntity : Entity<SunEntity, EntityState<SunAttributes>, SunAttributes>, ISunEntityCore
{
    public SunEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SunEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SunAttributes
{
    [JsonPropertyName("next_dawn")]
    public string? NextDawn { get; init; }

    [JsonPropertyName("next_dusk")]
    public string? NextDusk { get; init; }

    [JsonPropertyName("next_midnight")]
    public string? NextMidnight { get; init; }

    [JsonPropertyName("next_noon")]
    public string? NextNoon { get; init; }

    [JsonPropertyName("next_rising")]
    public string? NextRising { get; init; }

    [JsonPropertyName("next_setting")]
    public string? NextSetting { get; init; }

    [JsonPropertyName("elevation")]
    public double? Elevation { get; init; }

    [JsonPropertyName("azimuth")]
    public double? Azimuth { get; init; }

    [JsonPropertyName("rising")]
    public bool? Rising { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SwitchEntity : Entity<SwitchEntity, EntityState<SwitchAttributes>, SwitchAttributes>, ISwitchEntityCore
{
    public SwitchEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SwitchEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SwitchAttributes
{
    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record TextEntity : Entity<TextEntity, EntityState<TextAttributes>, TextAttributes>
{
    public TextEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public TextEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record TextAttributes
{
    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("pattern")]
    public object? Pattern { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record TimerEntity : Entity<TimerEntity, EntityState<TimerAttributes>, TimerAttributes>, ITimerEntityCore
{
    public TimerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public TimerEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record TimerAttributes
{
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record TtsEntity : Entity<TtsEntity, EntityState<TtsAttributes>, TtsAttributes>
{
    public TtsEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public TtsEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record TtsAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record UpdateEntity : Entity<UpdateEntity, EntityState<UpdateAttributes>, UpdateAttributes>, IUpdateEntityCore
{
    public UpdateEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public UpdateEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record UpdateAttributes
{
    [JsonPropertyName("auto_update")]
    public bool? AutoUpdate { get; init; }

    [JsonPropertyName("installed_version")]
    public string? InstalledVersion { get; init; }

    [JsonPropertyName("in_progress")]
    public bool? InProgress { get; init; }

    [JsonPropertyName("latest_version")]
    public string? LatestVersion { get; init; }

    [JsonPropertyName("release_summary")]
    public string? ReleaseSummary { get; init; }

    [JsonPropertyName("release_url")]
    public string? ReleaseUrl { get; init; }

    [JsonPropertyName("skipped_version")]
    public object? SkippedVersion { get; init; }

    [JsonPropertyName("title")]
    public string? Title { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record WeatherEntity : Entity<WeatherEntity, EntityState<WeatherAttributes>, WeatherAttributes>, IWeatherEntityCore
{
    public WeatherEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public WeatherEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record WeatherAttributes
{
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("dew_point")]
    public double? DewPoint { get; init; }

    [JsonPropertyName("temperature_unit")]
    public string? TemperatureUnit { get; init; }

    [JsonPropertyName("humidity")]
    public double? Humidity { get; init; }

    [JsonPropertyName("cloud_coverage")]
    public double? CloudCoverage { get; init; }

    [JsonPropertyName("pressure")]
    public double? Pressure { get; init; }

    [JsonPropertyName("pressure_unit")]
    public string? PressureUnit { get; init; }

    [JsonPropertyName("wind_bearing")]
    public double? WindBearing { get; init; }

    [JsonPropertyName("wind_speed")]
    public double? WindSpeed { get; init; }

    [JsonPropertyName("wind_speed_unit")]
    public string? WindSpeedUnit { get; init; }

    [JsonPropertyName("visibility_unit")]
    public string? VisibilityUnit { get; init; }

    [JsonPropertyName("precipitation_unit")]
    public string? PrecipitationUnit { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record ZoneEntity : Entity<ZoneEntity, EntityState<ZoneAttributes>, ZoneAttributes>, IZoneEntityCore
{
    public ZoneEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ZoneEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ZoneAttributes
{
    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("radius")]
    public double? Radius { get; init; }

    [JsonPropertyName("passive")]
    public bool? Passive { get; init; }

    [JsonPropertyName("persons")]
    public IReadOnlyList<string>? Persons { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public interface IServices
{
    AlarmControlPanelServices AlarmControlPanel { get; }

    AlexaMediaServices AlexaMedia { get; }

    AutomationServices Automation { get; }

    ButtonServices Button { get; }

    CameraServices Camera { get; }

    CastServices Cast { get; }

    ClimateServices Climate { get; }

    CloudServices Cloud { get; }

    ConversationServices Conversation { get; }

    CounterServices Counter { get; }

    CoverServices Cover { get; }

    DeviceTrackerServices DeviceTracker { get; }

    ElgatoServices Elgato { get; }

    EsphomeServices Esphome { get; }

    FanServices Fan { get; }

    FfmpegServices Ffmpeg { get; }

    FrontendServices Frontend { get; }

    GroupServices Group { get; }

    HassioServices Hassio { get; }

    HomeassistantServices Homeassistant { get; }

    InputBooleanServices InputBoolean { get; }

    InputButtonServices InputButton { get; }

    InputDatetimeServices InputDatetime { get; }

    InputNumberServices InputNumber { get; }

    InputSelectServices InputSelect { get; }

    InputTextServices InputText { get; }

    LightServices Light { get; }

    LocalFileServices LocalFile { get; }

    LockServices Lock { get; }

    LogbookServices Logbook { get; }

    LoggerServices Logger { get; }

    MediaPlayerServices MediaPlayer { get; }

    NetdaemonServices Netdaemon { get; }

    NotifyServices Notify { get; }

    NumberServices Number { get; }

    PersistentNotificationServices PersistentNotification { get; }

    PersonServices Person { get; }

    PiHoleServices PiHole { get; }

    RecorderServices Recorder { get; }

    RemoteServices Remote { get; }

    SceneServices Scene { get; }

    ScheduleServices Schedule { get; }

    ScriptServices Script { get; }

    SelectServices Select { get; }

    SirenServices Siren { get; }

    SwitchServices Switch { get; }

    SystemLogServices SystemLog { get; }

    TemplateServices Template { get; }

    TextServices Text { get; }

    TimerServices Timer { get; }

    TruenasServices Truenas { get; }

    TtsServices Tts { get; }

    UnifiServices Unifi { get; }

    UnifiprotectServices Unifiprotect { get; }

    UpdateServices Update { get; }

    WakeOnLanServices WakeOnLan { get; }

    WeatherServices Weather { get; }

    WorkdayServices Workday { get; }

    ZhaServices Zha { get; }

    ZoneServices Zone { get; }

    ZwaveJsServices ZwaveJs { get; }
}

public partial class Services : IServices
{
    private readonly IHaContext _haContext;
    public Services(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public AlarmControlPanelServices AlarmControlPanel => new(_haContext);
    public AlexaMediaServices AlexaMedia => new(_haContext);
    public AutomationServices Automation => new(_haContext);
    public ButtonServices Button => new(_haContext);
    public CameraServices Camera => new(_haContext);
    public CastServices Cast => new(_haContext);
    public ClimateServices Climate => new(_haContext);
    public CloudServices Cloud => new(_haContext);
    public ConversationServices Conversation => new(_haContext);
    public CounterServices Counter => new(_haContext);
    public CoverServices Cover => new(_haContext);
    public DeviceTrackerServices DeviceTracker => new(_haContext);
    public ElgatoServices Elgato => new(_haContext);
    public EsphomeServices Esphome => new(_haContext);
    public FanServices Fan => new(_haContext);
    public FfmpegServices Ffmpeg => new(_haContext);
    public FrontendServices Frontend => new(_haContext);
    public GroupServices Group => new(_haContext);
    public HassioServices Hassio => new(_haContext);
    public HomeassistantServices Homeassistant => new(_haContext);
    public InputBooleanServices InputBoolean => new(_haContext);
    public InputButtonServices InputButton => new(_haContext);
    public InputDatetimeServices InputDatetime => new(_haContext);
    public InputNumberServices InputNumber => new(_haContext);
    public InputSelectServices InputSelect => new(_haContext);
    public InputTextServices InputText => new(_haContext);
    public LightServices Light => new(_haContext);
    public LocalFileServices LocalFile => new(_haContext);
    public LockServices Lock => new(_haContext);
    public LogbookServices Logbook => new(_haContext);
    public LoggerServices Logger => new(_haContext);
    public MediaPlayerServices MediaPlayer => new(_haContext);
    public NetdaemonServices Netdaemon => new(_haContext);
    public NotifyServices Notify => new(_haContext);
    public NumberServices Number => new(_haContext);
    public PersistentNotificationServices PersistentNotification => new(_haContext);
    public PersonServices Person => new(_haContext);
    public PiHoleServices PiHole => new(_haContext);
    public RecorderServices Recorder => new(_haContext);
    public RemoteServices Remote => new(_haContext);
    public SceneServices Scene => new(_haContext);
    public ScheduleServices Schedule => new(_haContext);
    public ScriptServices Script => new(_haContext);
    public SelectServices Select => new(_haContext);
    public SirenServices Siren => new(_haContext);
    public SwitchServices Switch => new(_haContext);
    public SystemLogServices SystemLog => new(_haContext);
    public TemplateServices Template => new(_haContext);
    public TextServices Text => new(_haContext);
    public TimerServices Timer => new(_haContext);
    public TruenasServices Truenas => new(_haContext);
    public TtsServices Tts => new(_haContext);
    public UnifiServices Unifi => new(_haContext);
    public UnifiprotectServices Unifiprotect => new(_haContext);
    public UpdateServices Update => new(_haContext);
    public WakeOnLanServices WakeOnLan => new(_haContext);
    public WeatherServices Weather => new(_haContext);
    public WorkdayServices Workday => new(_haContext);
    public ZhaServices Zha => new(_haContext);
    public ZoneServices Zone => new(_haContext);
    public ZwaveJsServices ZwaveJs => new(_haContext);
}

public partial class AlarmControlPanelServices
{
    private readonly IHaContext _haContext;
    public AlarmControlPanelServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmAway(ServiceTarget target, AlarmControlPanelAlarmArmAwayParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_away", target, data);
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmAway(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_away", target, new AlarmControlPanelAlarmArmAwayParameters { Code = code });
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmCustomBypass(ServiceTarget target, AlarmControlPanelAlarmArmCustomBypassParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_custom_bypass", target, data);
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmCustomBypass(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_custom_bypass", target, new AlarmControlPanelAlarmArmCustomBypassParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmHome(ServiceTarget target, AlarmControlPanelAlarmArmHomeParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_home", target, data);
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmHome(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_home", target, new AlarmControlPanelAlarmArmHomeParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmNight(ServiceTarget target, AlarmControlPanelAlarmArmNightParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_night", target, data);
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmNight(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_night", target, new AlarmControlPanelAlarmArmNightParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmVacation(ServiceTarget target, AlarmControlPanelAlarmArmVacationParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_vacation", target, data);
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmVacation(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_vacation", target, new AlarmControlPanelAlarmArmVacationParameters { Code = code });
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmDisarm(ServiceTarget target, AlarmControlPanelAlarmDisarmParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_disarm", target, data);
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="code">Code to disarm the alarm. eg: 1234</param>
    public void AlarmDisarm(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_disarm", target, new AlarmControlPanelAlarmDisarmParameters { Code = code });
    }

    ///<summary>Enables an external alarm trigger.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmTrigger(ServiceTarget target, AlarmControlPanelAlarmTriggerParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_trigger", target, data);
    }

    ///<summary>Enables an external alarm trigger.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmTrigger(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_trigger", target, new AlarmControlPanelAlarmTriggerParameters { Code = code });
    }
}

public partial record AlarmControlPanelAlarmArmAwayParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmCustomBypassParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmHomeParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmNightParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmVacationParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmDisarmParameters
{
    ///<summary>Code to disarm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmTriggerParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial class AlexaMediaServices
{
    private readonly IHaContext _haContext;
    public AlexaMediaServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Force account to logout. Used mainly for debugging.</summary>
    public void ForceLogout(AlexaMediaForceLogoutParameters data)
    {
        _haContext.CallService("alexa_media", "force_logout", null, data);
    }

    ///<summary>Force account to logout. Used mainly for debugging.</summary>
    ///<param name="email">Accounts to clear. Empty will clear all. eg: my_email@alexa.com</param>
    public void ForceLogout(object? email = null)
    {
        _haContext.CallService("alexa_media", "force_logout", null, new AlexaMediaForceLogoutParameters { Email = email });
    }

    ///<summary>Forces update of last_called echo device for each Alexa account.</summary>
    public void UpdateLastCalled(AlexaMediaUpdateLastCalledParameters data)
    {
        _haContext.CallService("alexa_media", "update_last_called", null, data);
    }

    ///<summary>Forces update of last_called echo device for each Alexa account.</summary>
    ///<param name="email">List of Alexa accounts to update. If empty, will update all known accounts. eg: my_email@alexa.com</param>
    public void UpdateLastCalled(object? email = null)
    {
        _haContext.CallService("alexa_media", "update_last_called", null, new AlexaMediaUpdateLastCalledParameters { Email = email });
    }
}

public partial record AlexaMediaForceLogoutParameters
{
    ///<summary>Accounts to clear. Empty will clear all. eg: my_email@alexa.com</summary>
    [JsonPropertyName("email")]
    public object? Email { get; init; }
}

public partial record AlexaMediaUpdateLastCalledParameters
{
    ///<summary>List of Alexa accounts to update. If empty, will update all known accounts. eg: my_email@alexa.com</summary>
    [JsonPropertyName("email")]
    public object? Email { get; init; }
}

public partial class AutomationServices
{
    private readonly IHaContext _haContext;
    public AutomationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads the automation configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("automation", "reload", null, data);
    }

    ///<summary>Toggles (enable / disable) an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("automation", "toggle", target, data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Trigger(ServiceTarget target, AutomationTriggerParameters data)
    {
        _haContext.CallService("automation", "trigger", target, data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public void Trigger(ServiceTarget target, bool? skipCondition = null)
    {
        _haContext.CallService("automation", "trigger", target, new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, AutomationTurnOffParameters data)
    {
        _haContext.CallService("automation", "turn_off", target, data);
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="stopActions">Stops currently running actions.</param>
    public void TurnOff(ServiceTarget target, bool? stopActions = null)
    {
        _haContext.CallService("automation", "turn_off", target, new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Enables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("automation", "turn_on", target, data);
    }
}

public partial record AutomationTriggerParameters
{
    ///<summary>Defines whether or not the conditions will be skipped.</summary>
    [JsonPropertyName("skip_condition")]
    public bool? SkipCondition { get; init; }
}

public partial record AutomationTurnOffParameters
{
    ///<summary>Stops currently running actions.</summary>
    [JsonPropertyName("stop_actions")]
    public bool? StopActions { get; init; }
}

public partial class ButtonServices
{
    private readonly IHaContext _haContext;
    public ButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Press the button entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("button", "press", target, data);
    }
}

public partial class CameraServices
{
    private readonly IHaContext _haContext;
    public CameraServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Disables the motion detection.</summary>
    ///<param name="target">The target for this service call</param>
    public void DisableMotionDetection(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("camera", "disable_motion_detection", target, data);
    }

    ///<summary>Enables the motion detection.</summary>
    ///<param name="target">The target for this service call</param>
    public void EnableMotionDetection(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("camera", "enable_motion_detection", target, data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayStream(ServiceTarget target, CameraPlayStreamParameters data)
    {
        _haContext.CallService("camera", "play_stream", target, data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public void PlayStream(ServiceTarget target, string mediaPlayer, object? format = null)
    {
        _haContext.CallService("camera", "play_stream", target, new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Record(ServiceTarget target, CameraRecordParameters data)
    {
        _haContext.CallService("camera", "record", target, data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public void Record(ServiceTarget target, string filename, double? duration = null, double? lookback = null)
    {
        _haContext.CallService("camera", "record", target, new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void Snapshot(ServiceTarget target, CameraSnapshotParameters data)
    {
        _haContext.CallService("camera", "snapshot", target, data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public void Snapshot(ServiceTarget target, string filename)
    {
        _haContext.CallService("camera", "snapshot", target, new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Turns off the camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("camera", "turn_off", target, data);
    }

    ///<summary>Turns on the camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("camera", "turn_on", target, data);
    }
}

public partial record CameraPlayStreamParameters
{
    ///<summary>Media players to stream to.</summary>
    [JsonPropertyName("media_player")]
    public string? MediaPlayer { get; init; }

    ///<summary>Stream format supported by the media player.</summary>
    [JsonPropertyName("format")]
    public object? Format { get; init; }
}

public partial record CameraRecordParameters
{
    ///<summary>Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }

    ///<summary>Planned duration of the recording. The actual duration may vary.</summary>
    [JsonPropertyName("duration")]
    public double? Duration { get; init; }

    ///<summary>Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</summary>
    [JsonPropertyName("lookback")]
    public double? Lookback { get; init; }
}

public partial record CameraSnapshotParameters
{
    ///<summary>Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }
}

public partial class CastServices
{
    private readonly IHaContext _haContext;
    public CastServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Shows a dashboard view on a Chromecast device.</summary>
    public void ShowLovelaceView(CastShowLovelaceViewParameters data)
    {
        _haContext.CallService("cast", "show_lovelace_view", null, data);
    }

    ///<summary>Shows a dashboard view on a Chromecast device.</summary>
    ///<param name="entityId">Media player entity to show the dashboard view on.</param>
    ///<param name="dashboardPath">The URL path of the dashboard to show. eg: lovelace-cast</param>
    ///<param name="viewPath">The path of the dashboard view to show. eg: downstairs</param>
    public void ShowLovelaceView(string entityId, string dashboardPath, string? viewPath = null)
    {
        _haContext.CallService("cast", "show_lovelace_view", null, new CastShowLovelaceViewParameters { EntityId = entityId, DashboardPath = dashboardPath, ViewPath = viewPath });
    }
}

public partial record CastShowLovelaceViewParameters
{
    ///<summary>Media player entity to show the dashboard view on.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>The URL path of the dashboard to show. eg: lovelace-cast</summary>
    [JsonPropertyName("dashboard_path")]
    public string? DashboardPath { get; init; }

    ///<summary>The path of the dashboard view to show. eg: downstairs</summary>
    [JsonPropertyName("view_path")]
    public string? ViewPath { get; init; }
}

public partial class ClimateServices
{
    private readonly IHaContext _haContext;
    public ClimateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetAuxHeat(ServiceTarget target, ClimateSetAuxHeatParameters data)
    {
        _haContext.CallService("climate", "set_aux_heat", target, data);
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public void SetAuxHeat(ServiceTarget target, bool auxHeat)
    {
        _haContext.CallService("climate", "set_aux_heat", target, new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetFanMode(ServiceTarget target, ClimateSetFanModeParameters data)
    {
        _haContext.CallService("climate", "set_fan_mode", target, data);
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public void SetFanMode(ServiceTarget target, string fanMode)
    {
        _haContext.CallService("climate", "set_fan_mode", target, new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHumidity(ServiceTarget target, ClimateSetHumidityParameters data)
    {
        _haContext.CallService("climate", "set_humidity", target, data);
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="humidity">Target humidity.</param>
    public void SetHumidity(ServiceTarget target, double humidity)
    {
        _haContext.CallService("climate", "set_humidity", target, new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHvacMode(ServiceTarget target, ClimateSetHvacModeParameters data)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public void SetHvacMode(ServiceTarget target, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, ClimateSetPresetModeParameters data)
    {
        _haContext.CallService("climate", "set_preset_mode", target, data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("climate", "set_preset_mode", target, new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetSwingMode(ServiceTarget target, ClimateSetSwingModeParameters data)
    {
        _haContext.CallService("climate", "set_swing_mode", target, data);
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="swingMode">Swing operation mode. eg: horizontal</param>
    public void SetSwingMode(ServiceTarget target, string swingMode)
    {
        _haContext.CallService("climate", "set_swing_mode", target, new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets target temperature.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTemperature(ServiceTarget target, ClimateSetTemperatureParameters data)
    {
        _haContext.CallService("climate", "set_temperature", target, data);
    }

    ///<summary>Sets target temperature.</summary>
    ///<param name="temperature">Target temperature.</param>
    ///<param name="targetTempHigh">High target temperature.</param>
    ///<param name="targetTempLow">Low target temperature.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public void SetTemperature(ServiceTarget target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_temperature", target, new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Toggles climate device, from on to off, or off to on.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("climate", "toggle", target, data);
    }

    ///<summary>Turns climate device off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("climate", "turn_off", target, data);
    }

    ///<summary>Turns climate device on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("climate", "turn_on", target, data);
    }
}

public partial record ClimateSetAuxHeatParameters
{
    ///<summary>New value of auxiliary heater.</summary>
    [JsonPropertyName("aux_heat")]
    public bool? AuxHeat { get; init; }
}

public partial record ClimateSetFanModeParameters
{
    ///<summary>Fan operation mode. eg: low</summary>
    [JsonPropertyName("fan_mode")]
    public string? FanMode { get; init; }
}

public partial record ClimateSetHumidityParameters
{
    ///<summary>Target humidity.</summary>
    [JsonPropertyName("humidity")]
    public double? Humidity { get; init; }
}

public partial record ClimateSetHvacModeParameters
{
    ///<summary>HVAC operation mode.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial record ClimateSetPresetModeParameters
{
    ///<summary>Preset mode. eg: away</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record ClimateSetSwingModeParameters
{
    ///<summary>Swing operation mode. eg: horizontal</summary>
    [JsonPropertyName("swing_mode")]
    public string? SwingMode { get; init; }
}

public partial record ClimateSetTemperatureParameters
{
    ///<summary>Target temperature.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>High target temperature.</summary>
    [JsonPropertyName("target_temp_high")]
    public double? TargetTempHigh { get; init; }

    ///<summary>Low target temperature.</summary>
    [JsonPropertyName("target_temp_low")]
    public double? TargetTempLow { get; init; }

    ///<summary>HVAC operation mode.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial class CloudServices
{
    private readonly IHaContext _haContext;
    public CloudServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Makes the instance UI accessible from outside of the local network by using Home Assistant Cloud.</summary>
    public void RemoteConnect(object? data = null)
    {
        _haContext.CallService("cloud", "remote_connect", null, data);
    }

    ///<summary>Disconnects the Home Assistant UI from the Home Assistant Cloud. You will no longer be able to access your Home Assistant instance from outside your local network.</summary>
    public void RemoteDisconnect(object? data = null)
    {
        _haContext.CallService("cloud", "remote_disconnect", null, data);
    }
}

public partial class ConversationServices
{
    private readonly IHaContext _haContext;
    public ConversationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    public void Process(ConversationProcessParameters data)
    {
        _haContext.CallService("conversation", "process", null, data);
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    ///<param name="text">Transcribed text input. eg: Turn all lights on</param>
    ///<param name="language">Language of text. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</param>
    ///<param name="conversationId">ID of the conversation, to be able to continue a previous conversation eg: my_conversation_1</param>
    public void Process(string text, string? language = null, object? agentId = null, string? conversationId = null)
    {
        _haContext.CallService("conversation", "process", null, new ConversationProcessParameters { Text = text, Language = language, AgentId = agentId, ConversationId = conversationId });
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    public Task<JsonElement?> ProcessAsync(ConversationProcessParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("conversation", "process", null, data);
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    ///<param name="text">Transcribed text input. eg: Turn all lights on</param>
    ///<param name="language">Language of text. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</param>
    ///<param name="conversationId">ID of the conversation, to be able to continue a previous conversation eg: my_conversation_1</param>
    public Task<JsonElement?> ProcessAsync(string text, string? language = null, object? agentId = null, string? conversationId = null)
    {
        return _haContext.CallServiceWithResponseAsync("conversation", "process", null, new ConversationProcessParameters { Text = text, Language = language, AgentId = agentId, ConversationId = conversationId });
    }

    ///<summary>Reloads the intent configuration.</summary>
    public void Reload(ConversationReloadParameters data)
    {
        _haContext.CallService("conversation", "reload", null, data);
    }

    ///<summary>Reloads the intent configuration.</summary>
    ///<param name="language">Language to clear cached intents for. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to reload. eg: homeassistant</param>
    public void Reload(string? language = null, object? agentId = null)
    {
        _haContext.CallService("conversation", "reload", null, new ConversationReloadParameters { Language = language, AgentId = agentId });
    }
}

public partial record ConversationProcessParameters
{
    ///<summary>Transcribed text input. eg: Turn all lights on</summary>
    [JsonPropertyName("text")]
    public string? Text { get; init; }

    ///<summary>Language of text. Defaults to server language. eg: NL</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</summary>
    [JsonPropertyName("agent_id")]
    public object? AgentId { get; init; }

    ///<summary>ID of the conversation, to be able to continue a previous conversation eg: my_conversation_1</summary>
    [JsonPropertyName("conversation_id")]
    public string? ConversationId { get; init; }
}

public partial record ConversationReloadParameters
{
    ///<summary>Language to clear cached intents for. Defaults to server language. eg: NL</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>Conversation agent to reload. eg: homeassistant</summary>
    [JsonPropertyName("agent_id")]
    public object? AgentId { get; init; }
}

public partial class CounterServices
{
    private readonly IHaContext _haContext;
    public CounterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrements a counter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("counter", "decrement", target, data);
    }

    ///<summary>Increments a counter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("counter", "increment", target, data);
    }

    ///<summary>Resets a counter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Reset(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("counter", "reset", target, data);
    }

    ///<summary>Sets the counter value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, CounterSetValueParameters data)
    {
        _haContext.CallService("counter", "set_value", target, data);
    }

    ///<summary>Sets the counter value.</summary>
    ///<param name="value">The new counter value the entity should be set to.</param>
    public void SetValue(ServiceTarget target, double value)
    {
        _haContext.CallService("counter", "set_value", target, new CounterSetValueParameters { Value = value });
    }
}

public partial record CounterSetValueParameters
{
    ///<summary>The new counter value the entity should be set to.</summary>
    [JsonPropertyName("value")]
    public double? Value { get; init; }
}

public partial class CoverServices
{
    private readonly IHaContext _haContext;
    public CoverServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Closes a cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseCover(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "close_cover", target, data);
    }

    ///<summary>Tilts a cover to close.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseCoverTilt(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "close_cover_tilt", target, data);
    }

    ///<summary>Opens a cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenCover(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "open_cover", target, data);
    }

    ///<summary>Tilts a cover open.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenCoverTilt(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "open_cover_tilt", target, data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCoverPosition(ServiceTarget target, CoverSetCoverPositionParameters data)
    {
        _haContext.CallService("cover", "set_cover_position", target, data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="position">Target position.</param>
    public void SetCoverPosition(ServiceTarget target, double position)
    {
        _haContext.CallService("cover", "set_cover_position", target, new CoverSetCoverPositionParameters { Position = position });
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCoverTiltPosition(ServiceTarget target, CoverSetCoverTiltPositionParameters data)
    {
        _haContext.CallService("cover", "set_cover_tilt_position", target, data);
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="tiltPosition">Target tilt positition.</param>
    public void SetCoverTiltPosition(ServiceTarget target, double tiltPosition)
    {
        _haContext.CallService("cover", "set_cover_tilt_position", target, new CoverSetCoverTiltPositionParameters { TiltPosition = tiltPosition });
    }

    ///<summary>Stops the cover movement.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopCover(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "stop_cover", target, data);
    }

    ///<summary>Stops a tilting cover movement.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopCoverTilt(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "stop_cover_tilt", target, data);
    }

    ///<summary>Toggles a cover open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "toggle", target, data);
    }

    ///<summary>Toggles a cover tilt open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void ToggleCoverTilt(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "toggle_cover_tilt", target, data);
    }
}

public partial record CoverSetCoverPositionParameters
{
    ///<summary>Target position.</summary>
    [JsonPropertyName("position")]
    public double? Position { get; init; }
}

public partial record CoverSetCoverTiltPositionParameters
{
    ///<summary>Target tilt positition.</summary>
    [JsonPropertyName("tilt_position")]
    public double? TiltPosition { get; init; }
}

public partial class DeviceTrackerServices
{
    private readonly IHaContext _haContext;
    public DeviceTrackerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Records a seen tracked device.</summary>
    public void See(DeviceTrackerSeeParameters data)
    {
        _haContext.CallService("device_tracker", "see", null, data);
    }

    ///<summary>Records a seen tracked device.</summary>
    ///<param name="mac">MAC address of the device. eg: FF:FF:FF:FF:FF:FF</param>
    ///<param name="devId">ID of the device (find the ID in `known_devices.yaml`). eg: phonedave</param>
    ///<param name="hostName">Hostname of the device. eg: Dave</param>
    ///<param name="locationName">Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone. eg: home</param>
    ///<param name="gps">GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539]). eg: [51.509802, -0.086692]</param>
    ///<param name="gpsAccuracy">Accuracy of the GPS coordinates.</param>
    ///<param name="battery">Battery level of the device.</param>
    public void See(string? mac = null, string? devId = null, string? hostName = null, string? locationName = null, object? gps = null, double? gpsAccuracy = null, double? battery = null)
    {
        _haContext.CallService("device_tracker", "see", null, new DeviceTrackerSeeParameters { Mac = mac, DevId = devId, HostName = hostName, LocationName = locationName, Gps = gps, GpsAccuracy = gpsAccuracy, Battery = battery });
    }
}

public partial record DeviceTrackerSeeParameters
{
    ///<summary>MAC address of the device. eg: FF:FF:FF:FF:FF:FF</summary>
    [JsonPropertyName("mac")]
    public string? Mac { get; init; }

    ///<summary>ID of the device (find the ID in `known_devices.yaml`). eg: phonedave</summary>
    [JsonPropertyName("dev_id")]
    public string? DevId { get; init; }

    ///<summary>Hostname of the device. eg: Dave</summary>
    [JsonPropertyName("host_name")]
    public string? HostName { get; init; }

    ///<summary>Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone. eg: home</summary>
    [JsonPropertyName("location_name")]
    public string? LocationName { get; init; }

    ///<summary>GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539]). eg: [51.509802, -0.086692]</summary>
    [JsonPropertyName("gps")]
    public object? Gps { get; init; }

    ///<summary>Accuracy of the GPS coordinates.</summary>
    [JsonPropertyName("gps_accuracy")]
    public double? GpsAccuracy { get; init; }

    ///<summary>Battery level of the device.</summary>
    [JsonPropertyName("battery")]
    public double? Battery { get; init; }
}

public partial class ElgatoServices
{
    private readonly IHaContext _haContext;
    public ElgatoServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Identifies an Elgato Light. Blinks the light, which can be useful for, e.g., a visual notification.</summary>
    ///<param name="target">The target for this service call</param>
    public void Identify(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("elgato", "identify", target, data);
    }
}

public partial class EsphomeServices
{
    private readonly IHaContext _haContext;
    public EsphomeServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Calls the service wipe_devices_from_gdo_memory of the node ratgdov25i-173a7a</summary>
    public void Ratgdov25i173a7aWipeDevicesFromGdoMemory(EsphomeRatgdov25i173a7aWipeDevicesFromGdoMemoryParameters data)
    {
        _haContext.CallService("esphome", "ratgdov25i_173a7a_wipe_devices_from_gdo_memory", null, data);
    }

    ///<summary>Calls the service wipe_devices_from_gdo_memory of the node ratgdov25i-173a7a</summary>
    ///<param name="devicesToWipe"> eg: Example text</param>
    public void Ratgdov25i173a7aWipeDevicesFromGdoMemory(string devicesToWipe)
    {
        _haContext.CallService("esphome", "ratgdov25i_173a7a_wipe_devices_from_gdo_memory", null, new EsphomeRatgdov25i173a7aWipeDevicesFromGdoMemoryParameters { DevicesToWipe = devicesToWipe });
    }
}

public partial record EsphomeRatgdov25i173a7aWipeDevicesFromGdoMemoryParameters
{
    ///<summary> eg: Example text</summary>
    [JsonPropertyName("devices_to_wipe")]
    public string? DevicesToWipe { get; init; }
}

public partial class FanServices
{
    private readonly IHaContext _haContext;
    public FanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decreases the speed of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void DecreaseSpeed(ServiceTarget target, FanDecreaseSpeedParameters data)
    {
        _haContext.CallService("fan", "decrease_speed", target, data);
    }

    ///<summary>Decreases the speed of the fan.</summary>
    ///<param name="percentageStep">Decreases the speed by a percentage step.</param>
    public void DecreaseSpeed(ServiceTarget target, double? percentageStep = null)
    {
        _haContext.CallService("fan", "decrease_speed", target, new FanDecreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Increases the speed of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void IncreaseSpeed(ServiceTarget target, FanIncreaseSpeedParameters data)
    {
        _haContext.CallService("fan", "increase_speed", target, data);
    }

    ///<summary>Increases the speed of the fan.</summary>
    ///<param name="percentageStep">Increases the speed by a percentage step.</param>
    public void IncreaseSpeed(ServiceTarget target, double? percentageStep = null)
    {
        _haContext.CallService("fan", "increase_speed", target, new FanIncreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Controls oscillatation of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void Oscillate(ServiceTarget target, FanOscillateParameters data)
    {
        _haContext.CallService("fan", "oscillate", target, data);
    }

    ///<summary>Controls oscillatation of the fan.</summary>
    ///<param name="oscillating">Turn on/off oscillation.</param>
    public void Oscillate(ServiceTarget target, bool oscillating)
    {
        _haContext.CallService("fan", "oscillate", target, new FanOscillateParameters { Oscillating = oscillating });
    }

    ///<summary>Sets the fan rotation direction.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDirection(ServiceTarget target, FanSetDirectionParameters data)
    {
        _haContext.CallService("fan", "set_direction", target, data);
    }

    ///<summary>Sets the fan rotation direction.</summary>
    ///<param name="direction">Direction to rotate.</param>
    public void SetDirection(ServiceTarget target, object direction)
    {
        _haContext.CallService("fan", "set_direction", target, new FanSetDirectionParameters { Direction = direction });
    }

    ///<summary>Sets the fan speed.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPercentage(ServiceTarget target, FanSetPercentageParameters data)
    {
        _haContext.CallService("fan", "set_percentage", target, data);
    }

    ///<summary>Sets the fan speed.</summary>
    ///<param name="percentage">Speed of the fan.</param>
    public void SetPercentage(ServiceTarget target, double percentage)
    {
        _haContext.CallService("fan", "set_percentage", target, new FanSetPercentageParameters { Percentage = percentage });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, FanSetPresetModeParameters data)
    {
        _haContext.CallService("fan", "set_preset_mode", target, data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="presetMode">Preset mode. eg: auto</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("fan", "set_preset_mode", target, new FanSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Toggles the fan on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("fan", "toggle", target, data);
    }

    ///<summary>Turns fan off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("fan", "turn_off", target, data);
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, FanTurnOnParameters data)
    {
        _haContext.CallService("fan", "turn_on", target, data);
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="percentage">Speed of the fan.</param>
    ///<param name="presetMode">Preset mode. eg: auto</param>
    public void TurnOn(ServiceTarget target, double? percentage = null, string? presetMode = null)
    {
        _haContext.CallService("fan", "turn_on", target, new FanTurnOnParameters { Percentage = percentage, PresetMode = presetMode });
    }
}

public partial record FanDecreaseSpeedParameters
{
    ///<summary>Decreases the speed by a percentage step.</summary>
    [JsonPropertyName("percentage_step")]
    public double? PercentageStep { get; init; }
}

public partial record FanIncreaseSpeedParameters
{
    ///<summary>Increases the speed by a percentage step.</summary>
    [JsonPropertyName("percentage_step")]
    public double? PercentageStep { get; init; }
}

public partial record FanOscillateParameters
{
    ///<summary>Turn on/off oscillation.</summary>
    [JsonPropertyName("oscillating")]
    public bool? Oscillating { get; init; }
}

public partial record FanSetDirectionParameters
{
    ///<summary>Direction to rotate.</summary>
    [JsonPropertyName("direction")]
    public object? Direction { get; init; }
}

public partial record FanSetPercentageParameters
{
    ///<summary>Speed of the fan.</summary>
    [JsonPropertyName("percentage")]
    public double? Percentage { get; init; }
}

public partial record FanSetPresetModeParameters
{
    ///<summary>Preset mode. eg: auto</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record FanTurnOnParameters
{
    ///<summary>Speed of the fan.</summary>
    [JsonPropertyName("percentage")]
    public double? Percentage { get; init; }

    ///<summary>Preset mode. eg: auto</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial class FfmpegServices
{
    private readonly IHaContext _haContext;
    public FfmpegServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a restart command to a ffmpeg based sensor.</summary>
    public void Restart(FfmpegRestartParameters data)
    {
        _haContext.CallService("ffmpeg", "restart", null, data);
    }

    ///<summary>Sends a restart command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will restart. Platform dependent.</param>
    public void Restart(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "restart", null, new FfmpegRestartParameters { EntityId = entityId });
    }

    ///<summary>Sends a start command to a ffmpeg based sensor.</summary>
    public void Start(FfmpegStartParameters data)
    {
        _haContext.CallService("ffmpeg", "start", null, data);
    }

    ///<summary>Sends a start command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will start. Platform dependent.</param>
    public void Start(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "start", null, new FfmpegStartParameters { EntityId = entityId });
    }

    ///<summary>Sends a stop command to a ffmpeg based sensor.</summary>
    public void Stop(FfmpegStopParameters data)
    {
        _haContext.CallService("ffmpeg", "stop", null, data);
    }

    ///<summary>Sends a stop command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will stop. Platform dependent.</param>
    public void Stop(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "stop", null, new FfmpegStopParameters { EntityId = entityId });
    }
}

public partial record FfmpegRestartParameters
{
    ///<summary>Name of entity that will restart. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record FfmpegStartParameters
{
    ///<summary>Name of entity that will start. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record FfmpegStopParameters
{
    ///<summary>Name of entity that will stop. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial class FrontendServices
{
    private readonly IHaContext _haContext;
    public FrontendServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads themes from the YAML-configuration.</summary>
    public void ReloadThemes(object? data = null)
    {
        _haContext.CallService("frontend", "reload_themes", null, data);
    }

    ///<summary>Sets the default theme Home Assistant uses. Can be overridden by a user.</summary>
    public void SetTheme(FrontendSetThemeParameters data)
    {
        _haContext.CallService("frontend", "set_theme", null, data);
    }

    ///<summary>Sets the default theme Home Assistant uses. Can be overridden by a user.</summary>
    ///<param name="name">Name of a theme. eg: default</param>
    ///<param name="mode">Theme mode.</param>
    public void SetTheme(object name, object? mode = null)
    {
        _haContext.CallService("frontend", "set_theme", null, new FrontendSetThemeParameters { Name = name, Mode = mode });
    }
}

public partial record FrontendSetThemeParameters
{
    ///<summary>Name of a theme. eg: default</summary>
    [JsonPropertyName("name")]
    public object? Name { get; init; }

    ///<summary>Theme mode.</summary>
    [JsonPropertyName("mode")]
    public object? Mode { get; init; }
}

public partial class GroupServices
{
    private readonly IHaContext _haContext;
    public GroupServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads group configuration, entities, and notify services from YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("group", "reload", null, data);
    }

    ///<summary>Removes a group.</summary>
    public void Remove(GroupRemoveParameters data)
    {
        _haContext.CallService("group", "remove", null, data);
    }

    ///<summary>Removes a group.</summary>
    ///<param name="objectId">Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</param>
    public void Remove(object objectId)
    {
        _haContext.CallService("group", "remove", null, new GroupRemoveParameters { ObjectId = objectId });
    }

    ///<summary>Creates/Updates a user group.</summary>
    public void Set(GroupSetParameters data)
    {
        _haContext.CallService("group", "set", null, data);
    }

    ///<summary>Creates/Updates a user group.</summary>
    ///<param name="objectId">Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</param>
    ///<param name="name">Name of the group. eg: My test group</param>
    ///<param name="icon">Name of the icon for the group. eg: mdi:camera</param>
    ///<param name="entities">List of all members in the group. Cannot be used in combination with `Add entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="addEntities">List of members to be added to the group. Cannot be used in combination with `Entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="removeEntities">List of members to be removed from a group. Cannot be used in combination with `Entities` or `Add entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="all">Enable this option if the group should only be used when all entities are in state `on`.</param>
    public void Set(string objectId, string? name = null, object? icon = null, IEnumerable<string>? entities = null, IEnumerable<string>? addEntities = null, IEnumerable<string>? removeEntities = null, bool? all = null)
    {
        _haContext.CallService("group", "set", null, new GroupSetParameters { ObjectId = objectId, Name = name, Icon = icon, Entities = entities, AddEntities = addEntities, RemoveEntities = removeEntities, All = all });
    }
}

public partial record GroupRemoveParameters
{
    ///<summary>Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</summary>
    [JsonPropertyName("object_id")]
    public object? ObjectId { get; init; }
}

public partial record GroupSetParameters
{
    ///<summary>Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</summary>
    [JsonPropertyName("object_id")]
    public string? ObjectId { get; init; }

    ///<summary>Name of the group. eg: My test group</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Name of the icon for the group. eg: mdi:camera</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>List of all members in the group. Cannot be used in combination with `Add entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("entities")]
    public IEnumerable<string>? Entities { get; init; }

    ///<summary>List of members to be added to the group. Cannot be used in combination with `Entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("add_entities")]
    public IEnumerable<string>? AddEntities { get; init; }

    ///<summary>List of members to be removed from a group. Cannot be used in combination with `Entities` or `Add entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("remove_entities")]
    public IEnumerable<string>? RemoveEntities { get; init; }

    ///<summary>Enable this option if the group should only be used when all entities are in state `on`.</summary>
    [JsonPropertyName("all")]
    public bool? All { get; init; }
}

public partial class HassioServices
{
    private readonly IHaContext _haContext;
    public HassioServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Restarts an add-on.</summary>
    public void AddonRestart(HassioAddonRestartParameters data)
    {
        _haContext.CallService("hassio", "addon_restart", null, data);
    }

    ///<summary>Restarts an add-on.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonRestart(object addon)
    {
        _haContext.CallService("hassio", "addon_restart", null, new HassioAddonRestartParameters { Addon = addon });
    }

    ///<summary>Starts an add-on.</summary>
    public void AddonStart(HassioAddonStartParameters data)
    {
        _haContext.CallService("hassio", "addon_start", null, data);
    }

    ///<summary>Starts an add-on.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonStart(object addon)
    {
        _haContext.CallService("hassio", "addon_start", null, new HassioAddonStartParameters { Addon = addon });
    }

    ///<summary>Writes data to add-on stdin.</summary>
    public void AddonStdin(HassioAddonStdinParameters data)
    {
        _haContext.CallService("hassio", "addon_stdin", null, data);
    }

    ///<summary>Writes data to add-on stdin.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonStdin(object addon)
    {
        _haContext.CallService("hassio", "addon_stdin", null, new HassioAddonStdinParameters { Addon = addon });
    }

    ///<summary>Stops an add-on.</summary>
    public void AddonStop(HassioAddonStopParameters data)
    {
        _haContext.CallService("hassio", "addon_stop", null, data);
    }

    ///<summary>Stops an add-on.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonStop(object addon)
    {
        _haContext.CallService("hassio", "addon_stop", null, new HassioAddonStopParameters { Addon = addon });
    }

    ///<summary>Updates an add-on. This action should be used with caution since add-on updates can contain breaking changes. It is highly recommended that you review release notes/change logs before updating an add-on.</summary>
    public void AddonUpdate(HassioAddonUpdateParameters data)
    {
        _haContext.CallService("hassio", "addon_update", null, data);
    }

    ///<summary>Updates an add-on. This action should be used with caution since add-on updates can contain breaking changes. It is highly recommended that you review release notes/change logs before updating an add-on.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonUpdate(object addon)
    {
        _haContext.CallService("hassio", "addon_update", null, new HassioAddonUpdateParameters { Addon = addon });
    }

    ///<summary>Creates a full backup.</summary>
    public void BackupFull(HassioBackupFullParameters data)
    {
        _haContext.CallService("hassio", "backup_full", null, data);
    }

    ///<summary>Creates a full backup.</summary>
    ///<param name="name">Optional (default = current date and time). eg: Backup 1</param>
    ///<param name="password">Password to protect the backup with. eg: password</param>
    ///<param name="compressed">Compresses the backup files.</param>
    ///<param name="location">Name of a backup network storage to host backups. eg: my_backup_mount</param>
    ///<param name="homeassistantExcludeDatabase">Exclude the Home Assistant database file from backup</param>
    public void BackupFull(string? name = null, string? password = null, bool? compressed = null, object? location = null, bool? homeassistantExcludeDatabase = null)
    {
        _haContext.CallService("hassio", "backup_full", null, new HassioBackupFullParameters { Name = name, Password = password, Compressed = compressed, Location = location, HomeassistantExcludeDatabase = homeassistantExcludeDatabase });
    }

    ///<summary>Creates a partial backup.</summary>
    public void BackupPartial(HassioBackupPartialParameters data)
    {
        _haContext.CallService("hassio", "backup_partial", null, data);
    }

    ///<summary>Creates a partial backup.</summary>
    ///<param name="homeassistant">Includes Home Assistant settings in the backup.</param>
    ///<param name="homeassistantExcludeDatabase">Exclude the Home Assistant database file from backup</param>
    ///<param name="addons">List of add-ons to include in the backup. Use the name slug of the add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</param>
    ///<param name="folders">List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</param>
    ///<param name="name">Optional (default = current date and time). eg: Partial backup 1</param>
    ///<param name="password">Password to protect the backup with. eg: password</param>
    ///<param name="compressed">Compresses the backup files.</param>
    ///<param name="location">Name of a backup network storage to host backups. eg: my_backup_mount</param>
    public void BackupPartial(bool? homeassistant = null, bool? homeassistantExcludeDatabase = null, object? addons = null, object? folders = null, string? name = null, string? password = null, bool? compressed = null, object? location = null)
    {
        _haContext.CallService("hassio", "backup_partial", null, new HassioBackupPartialParameters { Homeassistant = homeassistant, HomeassistantExcludeDatabase = homeassistantExcludeDatabase, Addons = addons, Folders = folders, Name = name, Password = password, Compressed = compressed, Location = location });
    }

    ///<summary>Reboots the host system.</summary>
    public void HostReboot(object? data = null)
    {
        _haContext.CallService("hassio", "host_reboot", null, data);
    }

    ///<summary>Powers off the host system.</summary>
    public void HostShutdown(object? data = null)
    {
        _haContext.CallService("hassio", "host_shutdown", null, data);
    }

    ///<summary>Restores from full backup.</summary>
    public void RestoreFull(HassioRestoreFullParameters data)
    {
        _haContext.CallService("hassio", "restore_full", null, data);
    }

    ///<summary>Restores from full backup.</summary>
    ///<param name="slug">Slug of backup to restore from.</param>
    ///<param name="password">Optional password. eg: password</param>
    public void RestoreFull(string slug, string? password = null)
    {
        _haContext.CallService("hassio", "restore_full", null, new HassioRestoreFullParameters { Slug = slug, Password = password });
    }

    ///<summary>Restores from a partial backup.</summary>
    public void RestorePartial(HassioRestorePartialParameters data)
    {
        _haContext.CallService("hassio", "restore_partial", null, data);
    }

    ///<summary>Restores from a partial backup.</summary>
    ///<param name="slug">Slug of backup to restore from.</param>
    ///<param name="homeassistant">Restores Home Assistant.</param>
    ///<param name="folders">List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</param>
    ///<param name="addons">List of add-ons to include in the backup. Use the name slug of the add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</param>
    ///<param name="password">Optional password. eg: password</param>
    public void RestorePartial(string slug, bool? homeassistant = null, object? folders = null, object? addons = null, string? password = null)
    {
        _haContext.CallService("hassio", "restore_partial", null, new HassioRestorePartialParameters { Slug = slug, Homeassistant = homeassistant, Folders = folders, Addons = addons, Password = password });
    }
}

public partial record HassioAddonRestartParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStartParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStdinParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStopParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonUpdateParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioBackupFullParameters
{
    ///<summary>Optional (default = current date and time). eg: Backup 1</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Password to protect the backup with. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Compresses the backup files.</summary>
    [JsonPropertyName("compressed")]
    public bool? Compressed { get; init; }

    ///<summary>Name of a backup network storage to host backups. eg: my_backup_mount</summary>
    [JsonPropertyName("location")]
    public object? Location { get; init; }

    ///<summary>Exclude the Home Assistant database file from backup</summary>
    [JsonPropertyName("homeassistant_exclude_database")]
    public bool? HomeassistantExcludeDatabase { get; init; }
}

public partial record HassioBackupPartialParameters
{
    ///<summary>Includes Home Assistant settings in the backup.</summary>
    [JsonPropertyName("homeassistant")]
    public bool? Homeassistant { get; init; }

    ///<summary>Exclude the Home Assistant database file from backup</summary>
    [JsonPropertyName("homeassistant_exclude_database")]
    public bool? HomeassistantExcludeDatabase { get; init; }

    ///<summary>List of add-ons to include in the backup. Use the name slug of the add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</summary>
    [JsonPropertyName("addons")]
    public object? Addons { get; init; }

    ///<summary>List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</summary>
    [JsonPropertyName("folders")]
    public object? Folders { get; init; }

    ///<summary>Optional (default = current date and time). eg: Partial backup 1</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Password to protect the backup with. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Compresses the backup files.</summary>
    [JsonPropertyName("compressed")]
    public bool? Compressed { get; init; }

    ///<summary>Name of a backup network storage to host backups. eg: my_backup_mount</summary>
    [JsonPropertyName("location")]
    public object? Location { get; init; }
}

public partial record HassioRestoreFullParameters
{
    ///<summary>Slug of backup to restore from.</summary>
    [JsonPropertyName("slug")]
    public string? Slug { get; init; }

    ///<summary>Optional password. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }
}

public partial record HassioRestorePartialParameters
{
    ///<summary>Slug of backup to restore from.</summary>
    [JsonPropertyName("slug")]
    public string? Slug { get; init; }

    ///<summary>Restores Home Assistant.</summary>
    [JsonPropertyName("homeassistant")]
    public bool? Homeassistant { get; init; }

    ///<summary>List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</summary>
    [JsonPropertyName("folders")]
    public object? Folders { get; init; }

    ///<summary>List of add-ons to include in the backup. Use the name slug of the add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</summary>
    [JsonPropertyName("addons")]
    public object? Addons { get; init; }

    ///<summary>Optional password. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }
}

public partial class HomeassistantServices
{
    private readonly IHaContext _haContext;
    public HomeassistantServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Checks the Home Assistant YAML-configuration files for errors. Errors will be shown in the Home Assistant logs.</summary>
    public void CheckConfig(object? data = null)
    {
        _haContext.CallService("homeassistant", "check_config", null, data);
    }

    ///<summary>Reload all YAML configuration that can be reloaded without restarting Home Assistant.</summary>
    public void ReloadAll(object? data = null)
    {
        _haContext.CallService("homeassistant", "reload_all", null, data);
    }

    ///<summary>Reloads the specified config entry.</summary>
    ///<param name="target">The target for this service call</param>
    public void ReloadConfigEntry(ServiceTarget target, HomeassistantReloadConfigEntryParameters data)
    {
        _haContext.CallService("homeassistant", "reload_config_entry", target, data);
    }

    ///<summary>Reloads the specified config entry.</summary>
    ///<param name="entryId">The configuration entry ID of the entry to be reloaded. eg: 8955375327824e14ba89e4b29cc3ec9a</param>
    public void ReloadConfigEntry(ServiceTarget target, string? entryId = null)
    {
        _haContext.CallService("homeassistant", "reload_config_entry", target, new HomeassistantReloadConfigEntryParameters { EntryId = entryId });
    }

    ///<summary>Reloads the core configuration from the YAML-configuration.</summary>
    public void ReloadCoreConfig(object? data = null)
    {
        _haContext.CallService("homeassistant", "reload_core_config", null, data);
    }

    ///<summary>Reloads Jinja2 templates found in the `custom_templates` folder in your config. New values will be applied on the next render of the template.</summary>
    public void ReloadCustomTemplates(object? data = null)
    {
        _haContext.CallService("homeassistant", "reload_custom_templates", null, data);
    }

    ///<summary>Restarts Home Assistant.</summary>
    public void Restart(object? data = null)
    {
        _haContext.CallService("homeassistant", "restart", null, data);
    }

    ///<summary>Saves the persistent states immediately. Maintains the normal periodic saving interval.</summary>
    public void SavePersistentStates(object? data = null)
    {
        _haContext.CallService("homeassistant", "save_persistent_states", null, data);
    }

    ///<summary>Updates the Home Assistant location.</summary>
    public void SetLocation(HomeassistantSetLocationParameters data)
    {
        _haContext.CallService("homeassistant", "set_location", null, data);
    }

    ///<summary>Updates the Home Assistant location.</summary>
    ///<param name="latitude">Latitude of your location. eg: 32.87336</param>
    ///<param name="longitude">Longitude of your location. eg: 117.22743</param>
    ///<param name="elevation">Elevation of your location. eg: 120</param>
    public void SetLocation(double latitude, double longitude, double? elevation = null)
    {
        _haContext.CallService("homeassistant", "set_location", null, new HomeassistantSetLocationParameters { Latitude = latitude, Longitude = longitude, Elevation = elevation });
    }

    ///<summary>Stops Home Assistant.</summary>
    public void Stop(object? data = null)
    {
        _haContext.CallService("homeassistant", "stop", null, data);
    }

    ///<summary>Generic action to toggle devices on/off under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("homeassistant", "toggle", target, data);
    }

    ///<summary>Generic action to turn devices off under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("homeassistant", "turn_off", target, data);
    }

    ///<summary>Generic action to turn devices on under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("homeassistant", "turn_on", target, data);
    }

    ///<summary>Forces one or more entities to update its data.</summary>
    public void UpdateEntity(HomeassistantUpdateEntityParameters data)
    {
        _haContext.CallService("homeassistant", "update_entity", null, data);
    }

    ///<summary>Forces one or more entities to update its data.</summary>
    ///<param name="entityId">List of entities to force update.</param>
    public void UpdateEntity(IEnumerable<string> entityId)
    {
        _haContext.CallService("homeassistant", "update_entity", null, new HomeassistantUpdateEntityParameters { EntityId = entityId });
    }
}

public partial record HomeassistantReloadConfigEntryParameters
{
    ///<summary>The configuration entry ID of the entry to be reloaded. eg: 8955375327824e14ba89e4b29cc3ec9a</summary>
    [JsonPropertyName("entry_id")]
    public string? EntryId { get; init; }
}

public partial record HomeassistantSetLocationParameters
{
    ///<summary>Latitude of your location. eg: 32.87336</summary>
    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    ///<summary>Longitude of your location. eg: 117.22743</summary>
    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    ///<summary>Elevation of your location. eg: 120</summary>
    [JsonPropertyName("elevation")]
    public double? Elevation { get; init; }
}

public partial record HomeassistantUpdateEntityParameters
{
    ///<summary>List of entities to force update.</summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }
}

public partial class InputBooleanServices
{
    private readonly IHaContext _haContext;
    public InputBooleanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_boolean", "reload", null, data);
    }

    ///<summary>Toggles the helper on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_boolean", "toggle", target, data);
    }

    ///<summary>Turns off the helper.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_boolean", "turn_off", target, data);
    }

    ///<summary>Turns on the helper.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_boolean", "turn_on", target, data);
    }
}

public partial class InputButtonServices
{
    private readonly IHaContext _haContext;
    public InputButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Mimics the physical button press on the device.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_button", "press", target, data);
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_button", "reload", null, data);
    }
}

public partial class InputDatetimeServices
{
    private readonly IHaContext _haContext;
    public InputDatetimeServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_datetime", "reload", null, data);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDatetime(ServiceTarget target, InputDatetimeSetDatetimeParameters data)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, data);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="date">The target date. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time, expressed by a UNIX timestamp.</param>
    public void SetDatetime(ServiceTarget target, string? date = null, TimeOnly? time = null, string? datetime = null, double? timestamp = null)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }
}

public partial record InputDatetimeSetDatetimeParameters
{
    ///<summary>The target date. eg: &quot;2019-04-20&quot;</summary>
    [JsonPropertyName("date")]
    public string? Date { get; init; }

    ///<summary>The target time. eg: &quot;05:04:20&quot;</summary>
    [JsonPropertyName("time")]
    public TimeOnly? Time { get; init; }

    ///<summary>The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</summary>
    [JsonPropertyName("datetime")]
    public string? Datetime { get; init; }

    ///<summary>The target date &amp; time, expressed by a UNIX timestamp.</summary>
    [JsonPropertyName("timestamp")]
    public double? Timestamp { get; init; }
}

public partial class InputNumberServices
{
    private readonly IHaContext _haContext;
    public InputNumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrements the current value by 1 step.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_number", "decrement", target, data);
    }

    ///<summary>Increments the value by 1 step.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_number", "increment", target, data);
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_number", "reload", null, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputNumberSetValueParameters data)
    {
        _haContext.CallService("input_number", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="value">The target value.</param>
    public void SetValue(ServiceTarget target, double value)
    {
        _haContext.CallService("input_number", "set_value", target, new InputNumberSetValueParameters { Value = value });
    }
}

public partial record InputNumberSetValueParameters
{
    ///<summary>The target value.</summary>
    [JsonPropertyName("value")]
    public double? Value { get; init; }
}

public partial class InputSelectServices
{
    private readonly IHaContext _haContext;
    public InputSelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_select", "reload", null, data);
    }

    ///<summary>Selects the first option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_select", "select_first", target, data);
    }

    ///<summary>Selects the last option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_select", "select_last", target, data);
    }

    ///<summary>Select the next option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, InputSelectSelectNextParameters data)
    {
        _haContext.CallService("input_select", "select_next", target, data);
    }

    ///<summary>Select the next option.</summary>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_next", target, new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, InputSelectSelectOptionParameters data)
    {
        _haContext.CallService("input_select", "select_option", target, data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("input_select", "select_option", target, new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, InputSelectSelectPreviousParameters data)
    {
        _haContext.CallService("input_select", "select_previous", target, data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_previous", target, new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetOptions(ServiceTarget target, InputSelectSetOptionsParameters data)
    {
        _haContext.CallService("input_select", "set_options", target, data);
    }

    ///<summary>Sets the options.</summary>
    ///<param name="options">List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public void SetOptions(ServiceTarget target, IEnumerable<string> options)
    {
        _haContext.CallService("input_select", "set_options", target, new InputSelectSetOptionsParameters { Options = options });
    }
}

public partial record InputSelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first option on the list.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record InputSelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the last to the first option on the list.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSetOptionsParameters
{
    ///<summary>List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</summary>
    [JsonPropertyName("options")]
    public IEnumerable<string>? Options { get; init; }
}

public partial class InputTextServices
{
    private readonly IHaContext _haContext;
    public InputTextServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_text", "reload", null, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputTextSetValueParameters data)
    {
        _haContext.CallService("input_text", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="value">The target value. eg: This is an example text</param>
    public void SetValue(ServiceTarget target, string value)
    {
        _haContext.CallService("input_text", "set_value", target, new InputTextSetValueParameters { Value = value });
    }
}

public partial record InputTextSetValueParameters
{
    ///<summary>The target value. eg: This is an example text</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class LightServices
{
    private readonly IHaContext _haContext;
    public LightServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, LightToggleParameters data)
    {
        _haContext.CallService("light", "toggle", target, data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName"></param>
    ///<param name="hsColor"> eg: [300, 70]</param>
    ///<param name="xyColor"> eg: [0.52, 0.43]</param>
    ///<param name="colorTemp"></param>
    ///<param name="brightness"></param>
    ///<param name="white"></param>
    ///<param name="profile"> eg: relax</param>
    ///<param name="flash"></param>
    public void Toggle(ServiceTarget target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? kelvin = null, double? brightnessPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, object? white = null, string? profile = null, object? flash = null)
    {
        _haContext.CallService("light", "toggle", target, new LightToggleParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, White = white, Profile = profile, Flash = flash });
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, LightTurnOffParameters data)
    {
        _haContext.CallService("light", "turn_off", target, data);
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash"></param>
    public void TurnOff(ServiceTarget target, double? transition = null, object? flash = null)
    {
        _haContext.CallService("light", "turn_off", target, new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, LightTurnOnParameters data)
    {
        _haContext.CallService("light", "turn_on", target, data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName"></param>
    ///<param name="hsColor"> eg: [300, 70]</param>
    ///<param name="xyColor"> eg: [0.52, 0.43]</param>
    ///<param name="colorTemp"></param>
    ///<param name="brightness"></param>
    ///<param name="brightnessStep"></param>
    ///<param name="white"></param>
    ///<param name="profile"> eg: relax</param>
    ///<param name="flash"></param>
    public void TurnOn(ServiceTarget target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? kelvin = null, double? brightnessPct = null, double? brightnessStepPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, double? brightnessStep = null, object? white = null, string? profile = null, object? flash = null)
    {
        _haContext.CallService("light", "turn_on", target, new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, BrightnessStepPct = brightnessStepPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, BrightnessStep = brightnessStep, White = white, Profile = profile, Flash = flash });
    }
}

public partial record LightToggleParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public double? Transition { get; init; }

    ///<summary>The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</summary>
    [JsonPropertyName("rgb_color")]
    public IReadOnlyCollection<int>? RgbColor { get; init; }

    ///<summary>Color temperature in Kelvin.</summary>
    [JsonPropertyName("kelvin")]
    public object? Kelvin { get; init; }

    ///<summary>Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</summary>
    [JsonPropertyName("brightness_pct")]
    public double? BrightnessPct { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }

    ///<summary> eg: [255, 100, 100, 50]</summary>
    [JsonPropertyName("rgbw_color")]
    public object? RgbwColor { get; init; }

    ///<summary> eg: [255, 100, 100, 50, 70]</summary>
    [JsonPropertyName("rgbww_color")]
    public object? RgbwwColor { get; init; }

    [JsonPropertyName("color_name")]
    public object? ColorName { get; init; }

    ///<summary> eg: [300, 70]</summary>
    [JsonPropertyName("hs_color")]
    public object? HsColor { get; init; }

    ///<summary> eg: [0.52, 0.43]</summary>
    [JsonPropertyName("xy_color")]
    public object? XyColor { get; init; }

    [JsonPropertyName("color_temp")]
    public object? ColorTemp { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("white")]
    public object? White { get; init; }

    ///<summary> eg: relax</summary>
    [JsonPropertyName("profile")]
    public string? Profile { get; init; }

    [JsonPropertyName("flash")]
    public object? Flash { get; init; }
}

public partial record LightTurnOffParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public double? Transition { get; init; }

    [JsonPropertyName("flash")]
    public object? Flash { get; init; }
}

public partial record LightTurnOnParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public double? Transition { get; init; }

    ///<summary>The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</summary>
    [JsonPropertyName("rgb_color")]
    public IReadOnlyCollection<int>? RgbColor { get; init; }

    ///<summary>Color temperature in Kelvin.</summary>
    [JsonPropertyName("kelvin")]
    public object? Kelvin { get; init; }

    ///<summary>Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</summary>
    [JsonPropertyName("brightness_pct")]
    public double? BrightnessPct { get; init; }

    ///<summary>Change brightness by a percentage.</summary>
    [JsonPropertyName("brightness_step_pct")]
    public double? BrightnessStepPct { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }

    ///<summary> eg: [255, 100, 100, 50]</summary>
    [JsonPropertyName("rgbw_color")]
    public object? RgbwColor { get; init; }

    ///<summary> eg: [255, 100, 100, 50, 70]</summary>
    [JsonPropertyName("rgbww_color")]
    public object? RgbwwColor { get; init; }

    [JsonPropertyName("color_name")]
    public object? ColorName { get; init; }

    ///<summary> eg: [300, 70]</summary>
    [JsonPropertyName("hs_color")]
    public object? HsColor { get; init; }

    ///<summary> eg: [0.52, 0.43]</summary>
    [JsonPropertyName("xy_color")]
    public object? XyColor { get; init; }

    [JsonPropertyName("color_temp")]
    public object? ColorTemp { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("brightness_step")]
    public double? BrightnessStep { get; init; }

    [JsonPropertyName("white")]
    public object? White { get; init; }

    ///<summary> eg: relax</summary>
    [JsonPropertyName("profile")]
    public string? Profile { get; init; }

    [JsonPropertyName("flash")]
    public object? Flash { get; init; }
}

public partial class LocalFileServices
{
    private readonly IHaContext _haContext;
    public LocalFileServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Use this action to change the file displayed by the camera.</summary>
    public void UpdateFilePath(LocalFileUpdateFilePathParameters data)
    {
        _haContext.CallService("local_file", "update_file_path", null, data);
    }

    ///<summary>Use this action to change the file displayed by the camera.</summary>
    ///<param name="entityId">Name of the entity_id of the camera to update.</param>
    ///<param name="filePath">The full path to the new image file to be displayed. eg: /config/www/images/image.jpg</param>
    public void UpdateFilePath(string entityId, string filePath)
    {
        _haContext.CallService("local_file", "update_file_path", null, new LocalFileUpdateFilePathParameters { EntityId = entityId, FilePath = filePath });
    }
}

public partial record LocalFileUpdateFilePathParameters
{
    ///<summary>Name of the entity_id of the camera to update.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>The full path to the new image file to be displayed. eg: /config/www/images/image.jpg</summary>
    [JsonPropertyName("file_path")]
    public string? FilePath { get; init; }
}

public partial class LockServices
{
    private readonly IHaContext _haContext;
    public LockServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Lock(ServiceTarget target, LockLockParameters data)
    {
        _haContext.CallService("lock", "lock", target, data);
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="code">Code used to lock the lock. eg: 1234</param>
    public void Lock(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "lock", target, new LockLockParameters { Code = code });
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Open(ServiceTarget target, LockOpenParameters data)
    {
        _haContext.CallService("lock", "open", target, data);
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="code">Code used to open the lock. eg: 1234</param>
    public void Open(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "open", target, new LockOpenParameters { Code = code });
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Unlock(ServiceTarget target, LockUnlockParameters data)
    {
        _haContext.CallService("lock", "unlock", target, data);
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="code">Code used to unlock the lock. eg: 1234</param>
    public void Unlock(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "unlock", target, new LockUnlockParameters { Code = code });
    }
}

public partial record LockLockParameters
{
    ///<summary>Code used to lock the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record LockOpenParameters
{
    ///<summary>Code used to open the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record LockUnlockParameters
{
    ///<summary>Code used to unlock the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial class LogbookServices
{
    private readonly IHaContext _haContext;
    public LogbookServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Creates a custom entry in the logbook.</summary>
    public void Log(LogbookLogParameters data)
    {
        _haContext.CallService("logbook", "log", null, data);
    }

    ///<summary>Creates a custom entry in the logbook.</summary>
    ///<param name="name">Custom name for an entity, can be referenced using an `entity_id`. eg: Kitchen</param>
    ///<param name="message">Message of the logbook entry. eg: is being used</param>
    ///<param name="entityId">Entity to reference in the logbook entry.</param>
    ///<param name="domain">Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry. eg: light</param>
    public void Log(string name, string message, string? entityId = null, string? domain = null)
    {
        _haContext.CallService("logbook", "log", null, new LogbookLogParameters { Name = name, Message = message, EntityId = entityId, Domain = domain });
    }
}

public partial record LogbookLogParameters
{
    ///<summary>Custom name for an entity, can be referenced using an `entity_id`. eg: Kitchen</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Message of the logbook entry. eg: is being used</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Entity to reference in the logbook entry.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry. eg: light</summary>
    [JsonPropertyName("domain")]
    public string? Domain { get; init; }
}

public partial class LoggerServices
{
    private readonly IHaContext _haContext;
    public LoggerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the default log level for integrations.</summary>
    public void SetDefaultLevel(LoggerSetDefaultLevelParameters data)
    {
        _haContext.CallService("logger", "set_default_level", null, data);
    }

    ///<summary>Sets the default log level for integrations.</summary>
    ///<param name="level">Default severity level for all integrations.</param>
    public void SetDefaultLevel(object? level = null)
    {
        _haContext.CallService("logger", "set_default_level", null, new LoggerSetDefaultLevelParameters { Level = level });
    }

    ///<summary>Sets the log level for one or more integrations.</summary>
    public void SetLevel(object? data = null)
    {
        _haContext.CallService("logger", "set_level", null, data);
    }
}

public partial record LoggerSetDefaultLevelParameters
{
    ///<summary>Default severity level for all integrations.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }
}

public partial class MediaPlayerServices
{
    private readonly IHaContext _haContext;
    public MediaPlayerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clears the playlist.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearPlaylist(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "clear_playlist", target, data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The target for this service call</param>
    public void Join(ServiceTarget target, MediaPlayerJoinParameters data)
    {
        _haContext.CallService("media_player", "join", target, data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="groupMembers">The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public void Join(ServiceTarget target, IEnumerable<string> groupMembers)
    {
        _haContext.CallService("media_player", "join", target, new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Selects the next track.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaNextTrack(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_next_track", target, data);
    }

    ///<summary>Pauses.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPause(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_pause", target, data);
    }

    ///<summary>Starts playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPlay(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_play", target, data);
    }

    ///<summary>Toggles play/pause.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPlayPause(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_play_pause", target, data);
    }

    ///<summary>Selects the previous track.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPreviousTrack(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_previous_track", target, data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaSeek(ServiceTarget target, MediaPlayerMediaSeekParameters data)
    {
        _haContext.CallService("media_player", "media_seek", target, data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public void MediaSeek(ServiceTarget target, double seekPosition)
    {
        _haContext.CallService("media_player", "media_seek", target, new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Stops playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaStop(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_stop", target, data);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayMedia(ServiceTarget target, MediaPlayerPlayMediaParameters data)
    {
        _haContext.CallService("media_player", "play_media", target, data);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public void PlayMedia(ServiceTarget target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        _haContext.CallService("media_player", "play_media", target, new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The target for this service call</param>
    public void RepeatSet(ServiceTarget target, MediaPlayerRepeatSetParameters data)
    {
        _haContext.CallService("media_player", "repeat_set", target, data);
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="repeat">Repeat mode to set.</param>
    public void RepeatSet(ServiceTarget target, object repeat)
    {
        _haContext.CallService("media_player", "repeat_set", target, new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSoundMode(ServiceTarget target, MediaPlayerSelectSoundModeParameters data)
    {
        _haContext.CallService("media_player", "select_sound_mode", target, data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public void SelectSoundMode(ServiceTarget target, string? soundMode = null)
    {
        _haContext.CallService("media_player", "select_sound_mode", target, new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSource(ServiceTarget target, MediaPlayerSelectSourceParameters data)
    {
        _haContext.CallService("media_player", "select_source", target, data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public void SelectSource(ServiceTarget target, string source)
    {
        _haContext.CallService("media_player", "select_source", target, new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The target for this service call</param>
    public void ShuffleSet(ServiceTarget target, MediaPlayerShuffleSetParameters data)
    {
        _haContext.CallService("media_player", "shuffle_set", target, data);
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="shuffle">Whether or not shuffle mode is enabled.</param>
    public void ShuffleSet(ServiceTarget target, bool shuffle)
    {
        _haContext.CallService("media_player", "shuffle_set", target, new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Toggles a media player on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "toggle", target, data);
    }

    ///<summary>Turns off the power of the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "turn_off", target, data);
    }

    ///<summary>Turns on the power of the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "turn_on", target, data);
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    ///<param name="target">The target for this service call</param>
    public void Unjoin(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "unjoin", target, data);
    }

    ///<summary>Turns down the volume.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeDown(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "volume_down", target, data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeMute(ServiceTarget target, MediaPlayerVolumeMuteParameters data)
    {
        _haContext.CallService("media_player", "volume_mute", target, data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public void VolumeMute(ServiceTarget target, bool isVolumeMuted)
    {
        _haContext.CallService("media_player", "volume_mute", target, new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeSet(ServiceTarget target, MediaPlayerVolumeSetParameters data)
    {
        _haContext.CallService("media_player", "volume_set", target, data);
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public void VolumeSet(ServiceTarget target, double volumeLevel)
    {
        _haContext.CallService("media_player", "volume_set", target, new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Turns up the volume.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeUp(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "volume_up", target, data);
    }
}

public partial record MediaPlayerJoinParameters
{
    ///<summary>The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </summary>
    [JsonPropertyName("group_members")]
    public IEnumerable<string>? GroupMembers { get; init; }
}

public partial record MediaPlayerMediaSeekParameters
{
    ///<summary>Target position in the currently playing media. The format is platform dependent.</summary>
    [JsonPropertyName("seek_position")]
    public double? SeekPosition { get; init; }
}

public partial record MediaPlayerPlayMediaParameters
{
    ///<summary>The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</summary>
    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    ///<summary>The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</summary>
    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    ///<summary>If the content should be played now or be added to the queue.</summary>
    [JsonPropertyName("enqueue")]
    public object? Enqueue { get; init; }

    ///<summary>If the media should be played as an announcement. eg: true</summary>
    [JsonPropertyName("announce")]
    public bool? Announce { get; init; }
}

public partial record MediaPlayerRepeatSetParameters
{
    ///<summary>Repeat mode to set.</summary>
    [JsonPropertyName("repeat")]
    public object? Repeat { get; init; }
}

public partial record MediaPlayerSelectSoundModeParameters
{
    ///<summary>Name of the sound mode to switch to. eg: Music</summary>
    [JsonPropertyName("sound_mode")]
    public string? SoundMode { get; init; }
}

public partial record MediaPlayerSelectSourceParameters
{
    ///<summary>Name of the source to switch to. Platform dependent. eg: video1</summary>
    [JsonPropertyName("source")]
    public string? Source { get; init; }
}

public partial record MediaPlayerShuffleSetParameters
{
    ///<summary>Whether or not shuffle mode is enabled.</summary>
    [JsonPropertyName("shuffle")]
    public bool? Shuffle { get; init; }
}

public partial record MediaPlayerVolumeMuteParameters
{
    ///<summary>Defines whether or not it is muted.</summary>
    [JsonPropertyName("is_volume_muted")]
    public bool? IsVolumeMuted { get; init; }
}

public partial record MediaPlayerVolumeSetParameters
{
    ///<summary>The volume. 0 is inaudible, 1 is the maximum volume.</summary>
    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }
}

public partial class NetdaemonServices
{
    private readonly IHaContext _haContext;
    public NetdaemonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Create an entity</summary>
    public void EntityCreate(NetdaemonEntityCreateParameters data)
    {
        _haContext.CallService("netdaemon", "entity_create", null, data);
    }

    ///<summary>Create an entity</summary>
    ///<param name="entityId">The entity ID of the entity eg: sensor.awesome</param>
    ///<param name="state">The state of the entity eg: Lorem ipsum</param>
    ///<param name="icon">The icon for the entity eg: mdi:rocket-launch-outline</param>
    ///<param name="unit">The unit of measurement for the entity</param>
    ///<param name="options">List of options for a select entity</param>
    ///<param name="attributes">The attributes of the entity</param>
    public void EntityCreate(object? entityId = null, object? state = null, object? icon = null, object? unit = null, object? options = null, object? attributes = null)
    {
        _haContext.CallService("netdaemon", "entity_create", null, new NetdaemonEntityCreateParameters { EntityId = entityId, State = state, Icon = icon, Unit = unit, Options = options, Attributes = attributes });
    }

    ///<summary>Remove an entity</summary>
    public void EntityRemove(NetdaemonEntityRemoveParameters data)
    {
        _haContext.CallService("netdaemon", "entity_remove", null, data);
    }

    ///<summary>Remove an entity</summary>
    ///<param name="entityId">The entity ID of the entity eg: sensor.awesome</param>
    public void EntityRemove(object? entityId = null)
    {
        _haContext.CallService("netdaemon", "entity_remove", null, new NetdaemonEntityRemoveParameters { EntityId = entityId });
    }

    ///<summary>Update an entity</summary>
    public void EntityUpdate(NetdaemonEntityUpdateParameters data)
    {
        _haContext.CallService("netdaemon", "entity_update", null, data);
    }

    ///<summary>Update an entity</summary>
    ///<param name="entityId">The entity ID of the entity eg: sensor.awesome</param>
    ///<param name="state">The state of the entity eg: Lorem ipsum</param>
    ///<param name="icon">The icon for the entity eg: mdi:rocket-launch-outline</param>
    ///<param name="unit">The unit of measurement for the entity</param>
    ///<param name="options">List of options for a select entity</param>
    ///<param name="attributes">The attributes of the entity</param>
    public void EntityUpdate(object? entityId = null, object? state = null, object? icon = null, object? unit = null, object? options = null, object? attributes = null)
    {
        _haContext.CallService("netdaemon", "entity_update", null, new NetdaemonEntityUpdateParameters { EntityId = entityId, State = state, Icon = icon, Unit = unit, Options = options, Attributes = attributes });
    }

    ///<summary>Register a new service for netdaemon, used by the daemon and not to be used by users</summary>
    public void RegisterService(NetdaemonRegisterServiceParameters data)
    {
        _haContext.CallService("netdaemon", "register_service", null, data);
    }

    ///<summary>Register a new service for netdaemon, used by the daemon and not to be used by users</summary>
    ///<param name="service">The name of the service to register</param>
    ///<param name="class">The class that implements the service call</param>
    ///<param name="method">The method to call</param>
    public void RegisterService(object? service = null, object? @class = null, object? @method = null)
    {
        _haContext.CallService("netdaemon", "register_service", null, new NetdaemonRegisterServiceParameters { Service = service, Class = @class, Method = @method });
    }

    public void ReloadApps(object? data = null)
    {
        _haContext.CallService("netdaemon", "reload_apps", null, data);
    }
}

public partial record NetdaemonEntityCreateParameters
{
    ///<summary>The entity ID of the entity eg: sensor.awesome</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }

    ///<summary>The state of the entity eg: Lorem ipsum</summary>
    [JsonPropertyName("state")]
    public object? State { get; init; }

    ///<summary>The icon for the entity eg: mdi:rocket-launch-outline</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>The unit of measurement for the entity</summary>
    [JsonPropertyName("unit")]
    public object? Unit { get; init; }

    ///<summary>List of options for a select entity</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }

    ///<summary>The attributes of the entity</summary>
    [JsonPropertyName("attributes")]
    public object? Attributes { get; init; }
}

public partial record NetdaemonEntityRemoveParameters
{
    ///<summary>The entity ID of the entity eg: sensor.awesome</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }
}

public partial record NetdaemonEntityUpdateParameters
{
    ///<summary>The entity ID of the entity eg: sensor.awesome</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }

    ///<summary>The state of the entity eg: Lorem ipsum</summary>
    [JsonPropertyName("state")]
    public object? State { get; init; }

    ///<summary>The icon for the entity eg: mdi:rocket-launch-outline</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>The unit of measurement for the entity</summary>
    [JsonPropertyName("unit")]
    public object? Unit { get; init; }

    ///<summary>List of options for a select entity</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }

    ///<summary>The attributes of the entity</summary>
    [JsonPropertyName("attributes")]
    public object? Attributes { get; init; }
}

public partial record NetdaemonRegisterServiceParameters
{
    ///<summary>The name of the service to register</summary>
    [JsonPropertyName("service")]
    public object? Service { get; init; }

    ///<summary>The class that implements the service call</summary>
    [JsonPropertyName("class")]
    public object? Class { get; init; }

    ///<summary>The method to call</summary>
    [JsonPropertyName("method")]
    public object? Method { get; init; }
}

public partial class NotifyServices
{
    private readonly IHaContext _haContext;
    public NotifyServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a notification message using the alexa_media service.</summary>
    public void AlexaMedia(NotifyAlexaMediaParameters data)
    {
        _haContext.CallService("notify", "alexa_media", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMedia(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media", null, new NotifyAlexaMediaParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_bedroom_bedside_echo_show integration.</summary>
    public void AlexaMediaBedroomBedsideEchoShow(NotifyAlexaMediaBedroomBedsideEchoShowParameters data)
    {
        _haContext.CallService("notify", "alexa_media_bedroom_bedside_echo_show", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_bedroom_bedside_echo_show integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaBedroomBedsideEchoShow(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_bedroom_bedside_echo_show", null, new NotifyAlexaMediaBedroomBedsideEchoShowParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_downstairs_echo_dot integration.</summary>
    public void AlexaMediaDownstairsEchoDot(NotifyAlexaMediaDownstairsEchoDotParameters data)
    {
        _haContext.CallService("notify", "alexa_media_downstairs_echo_dot", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_downstairs_echo_dot integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaDownstairsEchoDot(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_downstairs_echo_dot", null, new NotifyAlexaMediaDownstairsEchoDotParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_everywhere integration.</summary>
    public void AlexaMediaEverywhere(NotifyAlexaMediaEverywhereParameters data)
    {
        _haContext.CallService("notify", "alexa_media_everywhere", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_everywhere integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaEverywhere(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_everywhere", null, new NotifyAlexaMediaEverywhereParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_kitchen_echo_show integration.</summary>
    public void AlexaMediaKitchenEchoShow(NotifyAlexaMediaKitchenEchoShowParameters data)
    {
        _haContext.CallService("notify", "alexa_media_kitchen_echo_show", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_kitchen_echo_show integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaKitchenEchoShow(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_kitchen_echo_show", null, new NotifyAlexaMediaKitchenEchoShowParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_last_called integration.</summary>
    public void AlexaMediaLastCalled(NotifyAlexaMediaLastCalledParameters data)
    {
        _haContext.CallService("notify", "alexa_media_last_called", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_last_called integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaLastCalled(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_last_called", null, new NotifyAlexaMediaLastCalledParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_living_room_echo integration.</summary>
    public void AlexaMediaLivingRoomEcho(NotifyAlexaMediaLivingRoomEchoParameters data)
    {
        _haContext.CallService("notify", "alexa_media_living_room_echo", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_living_room_echo integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaLivingRoomEcho(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_living_room_echo", null, new NotifyAlexaMediaLivingRoomEchoParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_office_desk_echo_show integration.</summary>
    public void AlexaMediaOfficeDeskEchoShow(NotifyAlexaMediaOfficeDeskEchoShowParameters data)
    {
        _haContext.CallService("notify", "alexa_media_office_desk_echo_show", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_office_desk_echo_show integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaOfficeDeskEchoShow(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_office_desk_echo_show", null, new NotifyAlexaMediaOfficeDeskEchoShowParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_sound_system integration.</summary>
    public void AlexaMediaSoundSystem(NotifyAlexaMediaSoundSystemParameters data)
    {
        _haContext.CallService("notify", "alexa_media_sound_system", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_sound_system integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaSoundSystem(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_sound_system", null, new NotifyAlexaMediaSoundSystemParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_this_device_2 integration.</summary>
    public void AlexaMediaThisDevice2(NotifyAlexaMediaThisDevice2Parameters data)
    {
        _haContext.CallService("notify", "alexa_media_this_device_2", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_this_device_2 integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaThisDevice2(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_this_device_2", null, new NotifyAlexaMediaThisDevice2Parameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the allison service.</summary>
    public void Allison(NotifyAllisonParameters data)
    {
        _haContext.CallService("notify", "allison", null, data);
    }

    ///<summary>Sends a notification message using the allison service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void Allison(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "allison", null, new NotifyAllisonParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the family service.</summary>
    public void Family(NotifyFamilyParameters data)
    {
        _haContext.CallService("notify", "family", null, data);
    }

    ///<summary>Sends a notification message using the family service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void Family(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "family", null, new NotifyFamilyParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_allisons_phone integration.</summary>
    public void MobileAppAllisonsPhone(NotifyMobileAppAllisonsPhoneParameters data)
    {
        _haContext.CallService("notify", "mobile_app_allisons_phone", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_allisons_phone integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppAllisonsPhone(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_allisons_phone", null, new NotifyMobileAppAllisonsPhoneParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_galaxy_watch6_classic_4h5r integration.</summary>
    public void MobileAppGalaxyWatch6Classic4h5r(NotifyMobileAppGalaxyWatch6Classic4h5rParameters data)
    {
        _haContext.CallService("notify", "mobile_app_galaxy_watch6_classic_4h5r", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_galaxy_watch6_classic_4h5r integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppGalaxyWatch6Classic4h5r(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_galaxy_watch6_classic_4h5r", null, new NotifyMobileAppGalaxyWatch6Classic4h5rParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_pixel_7 integration.</summary>
    public void MobileAppPixel7(NotifyMobileAppPixel7Parameters data)
    {
        _haContext.CallService("notify", "mobile_app_pixel_7", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_pixel_7 integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppPixel7(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_pixel_7", null, new NotifyMobileAppPixel7Parameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    public void Notify(NotifyNotifyParameters data)
    {
        _haContext.CallService("notify", "notify", null, data);
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void Notify(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "notify", null, new NotifyNotifyParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the owen service.</summary>
    public void Owen(NotifyOwenParameters data)
    {
        _haContext.CallService("notify", "owen", null, data);
    }

    ///<summary>Sends a notification message using the owen service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void Owen(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "owen", null, new NotifyOwenParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification that is visible in the notifications panel.</summary>
    public void PersistentNotification(NotifyPersistentNotificationParameters data)
    {
        _haContext.CallService("notify", "persistent_notification", null, data);
    }

    ///<summary>Sends a notification that is visible in the notifications panel.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title of the notification. eg: Your Garage Door Friend</param>
    ///<param name="data">Some integrations provide extended functionality. For information on how to use _data_, refer to the integration documentation.. eg: platform specific</param>
    public void PersistentNotification(string message, string? title = null, object? data = null)
    {
        _haContext.CallService("notify", "persistent_notification", null, new NotifyPersistentNotificationParameters { Message = message, Title = title, Data = data });
    }

    ///<summary>Sends a notification message.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendMessage(ServiceTarget target, NotifySendMessageParameters data)
    {
        _haContext.CallService("notify", "send_message", target, data);
    }

    ///<summary>Sends a notification message.</summary>
    ///<param name="message">Your notification message.</param>
    ///<param name="title">Title for your notification message.</param>
    public void SendMessage(ServiceTarget target, string message, string? title = null)
    {
        _haContext.CallService("notify", "send_message", target, new NotifySendMessageParameters { Message = message, Title = title });
    }
}

public partial record NotifyAlexaMediaParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaBedroomBedsideEchoShowParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaDownstairsEchoDotParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaEverywhereParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaKitchenEchoShowParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaLastCalledParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaLivingRoomEchoParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaOfficeDeskEchoShowParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaSoundSystemParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaThisDevice2Parameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAllisonParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyFamilyParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppAllisonsPhoneParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppGalaxyWatch6Classic4h5rParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppPixel7Parameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyNotifyParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyOwenParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyPersistentNotificationParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title of the notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>Some integrations provide extended functionality. For information on how to use _data_, refer to the integration documentation.. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifySendMessageParameters
{
    ///<summary>Your notification message.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification message.</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }
}

public partial class NumberServices
{
    private readonly IHaContext _haContext;
    public NumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, NumberSetValueParameters data)
    {
        _haContext.CallService("number", "set_value", target, data);
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="value">The target value to set. eg: 42</param>
    public void SetValue(ServiceTarget target, string? value = null)
    {
        _haContext.CallService("number", "set_value", target, new NumberSetValueParameters { Value = value });
    }
}

public partial record NumberSetValueParameters
{
    ///<summary>The target value to set. eg: 42</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class PersistentNotificationServices
{
    private readonly IHaContext _haContext;
    public PersistentNotificationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Shows a notification on the notifications panel.</summary>
    public void Create(PersistentNotificationCreateParameters data)
    {
        _haContext.CallService("persistent_notification", "create", null, data);
    }

    ///<summary>Shows a notification on the notifications panel.</summary>
    ///<param name="message">Message body of the notification. eg: Please check your configuration.yaml.</param>
    ///<param name="title">Optional title of the notification. eg: Test notification</param>
    ///<param name="notificationId">ID of the notification. This new notification will overwrite an existing notification with the same ID. eg: 1234</param>
    public void Create(string message, string? title = null, string? notificationId = null)
    {
        _haContext.CallService("persistent_notification", "create", null, new PersistentNotificationCreateParameters { Message = message, Title = title, NotificationId = notificationId });
    }

    ///<summary>Removes a notification from the notifications panel.</summary>
    public void Dismiss(PersistentNotificationDismissParameters data)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, data);
    }

    ///<summary>Removes a notification from the notifications panel.</summary>
    ///<param name="notificationId">ID of the notification to be removed. eg: 1234</param>
    public void Dismiss(string notificationId)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, new PersistentNotificationDismissParameters { NotificationId = notificationId });
    }

    ///<summary>Removes all notifications from the notifications panel.</summary>
    public void DismissAll(object? data = null)
    {
        _haContext.CallService("persistent_notification", "dismiss_all", null, data);
    }
}

public partial record PersistentNotificationCreateParameters
{
    ///<summary>Message body of the notification. eg: Please check your configuration.yaml.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Optional title of the notification. eg: Test notification</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>ID of the notification. This new notification will overwrite an existing notification with the same ID. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial record PersistentNotificationDismissParameters
{
    ///<summary>ID of the notification to be removed. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial class PersonServices
{
    private readonly IHaContext _haContext;
    public PersonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads persons from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("person", "reload", null, data);
    }
}

public partial class PiHoleServices
{
    private readonly IHaContext _haContext;
    public PiHoleServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Disables configured Pi-hole(s) for an amount of time.</summary>
    ///<param name="target">The target for this service call</param>
    public void Disable(ServiceTarget target, PiHoleDisableParameters data)
    {
        _haContext.CallService("pi_hole", "disable", target, data);
    }

    ///<summary>Disables configured Pi-hole(s) for an amount of time.</summary>
    ///<param name="duration">Time that the Pi-hole should be disabled for. eg: 00:00:15</param>
    public void Disable(ServiceTarget target, string duration)
    {
        _haContext.CallService("pi_hole", "disable", target, new PiHoleDisableParameters { Duration = duration });
    }
}

public partial record PiHoleDisableParameters
{
    ///<summary>Time that the Pi-hole should be disabled for. eg: 00:00:15</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class RecorderServices
{
    private readonly IHaContext _haContext;
    public RecorderServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Stops the recording of events and state changes.</summary>
    public void Disable(object? data = null)
    {
        _haContext.CallService("recorder", "disable", null, data);
    }

    ///<summary>Starts the recording of events and state changes.</summary>
    public void Enable(object? data = null)
    {
        _haContext.CallService("recorder", "enable", null, data);
    }

    ///<summary>Starts purge task - to clean up old data from your database.</summary>
    public void Purge(RecorderPurgeParameters data)
    {
        _haContext.CallService("recorder", "purge", null, data);
    }

    ///<summary>Starts purge task - to clean up old data from your database.</summary>
    ///<param name="keepDays">Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged.</param>
    ///<param name="repack">Attempt to save disk space by rewriting the entire database file.</param>
    ///<param name="applyFilter">Apply `entity_id` and `event_type` filters in addition to time-based purge.</param>
    public void Purge(double? keepDays = null, bool? repack = null, bool? applyFilter = null)
    {
        _haContext.CallService("recorder", "purge", null, new RecorderPurgeParameters { KeepDays = keepDays, Repack = repack, ApplyFilter = applyFilter });
    }

    ///<summary>Starts a purge task to remove the data related to specific entities from your database.</summary>
    public void PurgeEntities(RecorderPurgeEntitiesParameters data)
    {
        _haContext.CallService("recorder", "purge_entities", null, data);
    }

    ///<summary>Starts a purge task to remove the data related to specific entities from your database.</summary>
    ///<param name="entityId">List of entities for which the data is to be removed from the recorder database.</param>
    ///<param name="domains">List of domains for which the data needs to be removed from the recorder database. eg: sun</param>
    ///<param name="entityGlobs">List of glob patterns used to select the entities for which the data is to be removed from the recorder database. eg: domain*.object_id*</param>
    ///<param name="keepDays">Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately.</param>
    public void PurgeEntities(IEnumerable<string>? entityId = null, object? domains = null, object? entityGlobs = null, double? keepDays = null)
    {
        _haContext.CallService("recorder", "purge_entities", null, new RecorderPurgeEntitiesParameters { EntityId = entityId, Domains = domains, EntityGlobs = entityGlobs, KeepDays = keepDays });
    }
}

public partial record RecorderPurgeParameters
{
    ///<summary>Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged.</summary>
    [JsonPropertyName("keep_days")]
    public double? KeepDays { get; init; }

    ///<summary>Attempt to save disk space by rewriting the entire database file.</summary>
    [JsonPropertyName("repack")]
    public bool? Repack { get; init; }

    ///<summary>Apply `entity_id` and `event_type` filters in addition to time-based purge.</summary>
    [JsonPropertyName("apply_filter")]
    public bool? ApplyFilter { get; init; }
}

public partial record RecorderPurgeEntitiesParameters
{
    ///<summary>List of entities for which the data is to be removed from the recorder database.</summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }

    ///<summary>List of domains for which the data needs to be removed from the recorder database. eg: sun</summary>
    [JsonPropertyName("domains")]
    public object? Domains { get; init; }

    ///<summary>List of glob patterns used to select the entities for which the data is to be removed from the recorder database. eg: domain*.object_id*</summary>
    [JsonPropertyName("entity_globs")]
    public object? EntityGlobs { get; init; }

    ///<summary>Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately.</summary>
    [JsonPropertyName("keep_days")]
    public double? KeepDays { get; init; }
}

public partial class RemoteServices
{
    private readonly IHaContext _haContext;
    public RemoteServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The target for this service call</param>
    public void DeleteCommand(ServiceTarget target, RemoteDeleteCommandParameters data)
    {
        _haContext.CallService("remote", "delete_command", target, data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public void DeleteCommand(ServiceTarget target, object command, string? device = null)
    {
        _haContext.CallService("remote", "delete_command", target, new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The target for this service call</param>
    public void LearnCommand(ServiceTarget target, RemoteLearnCommandParameters data)
    {
        _haContext.CallService("remote", "learn_command", target, data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public void LearnCommand(ServiceTarget target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        _haContext.CallService("remote", "learn_command", target, new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendCommand(ServiceTarget target, RemoteSendCommandParameters data)
    {
        _haContext.CallService("remote", "send_command", target, data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public void SendCommand(ServiceTarget target, object command, string? device = null, double? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        _haContext.CallService("remote", "send_command", target, new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Toggles a device on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("remote", "toggle", target, data);
    }

    ///<summary>Turns the device off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("remote", "turn_off", target, data);
    }

    ///<summary>Sends the power on command.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, RemoteTurnOnParameters data)
    {
        _haContext.CallService("remote", "turn_on", target, data);
    }

    ///<summary>Sends the power on command.</summary>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public void TurnOn(ServiceTarget target, string? activity = null)
    {
        _haContext.CallService("remote", "turn_on", target, new RemoteTurnOnParameters { Activity = activity });
    }
}

public partial record RemoteDeleteCommandParameters
{
    ///<summary>Device from which commands will be deleted. eg: television</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>The single command or the list of commands to be deleted. eg: Mute</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }
}

public partial record RemoteLearnCommandParameters
{
    ///<summary>Device ID to learn command from. eg: television</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>A single command or a list of commands to learn. eg: Turn on</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }

    ///<summary>The type of command to be learned.</summary>
    [JsonPropertyName("command_type")]
    public object? CommandType { get; init; }

    ///<summary>If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</summary>
    [JsonPropertyName("alternative")]
    public bool? Alternative { get; init; }

    ///<summary>Timeout for the command to be learned.</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }
}

public partial record RemoteSendCommandParameters
{
    ///<summary>Device ID to send command to. eg: 32756745</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>A single command or a list of commands to send. eg: Play</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }

    ///<summary>The number of times you want to repeat the commands.</summary>
    [JsonPropertyName("num_repeats")]
    public double? NumRepeats { get; init; }

    ///<summary>The time you want to wait in between repeated commands.</summary>
    [JsonPropertyName("delay_secs")]
    public double? DelaySecs { get; init; }

    ///<summary>The time you want to have it held before the release is send.</summary>
    [JsonPropertyName("hold_secs")]
    public double? HoldSecs { get; init; }
}

public partial record RemoteTurnOnParameters
{
    ///<summary>Activity ID or activity name to be started. eg: BedroomTV</summary>
    [JsonPropertyName("activity")]
    public string? Activity { get; init; }
}

public partial class SceneServices
{
    private readonly IHaContext _haContext;
    public SceneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Activates a scene with configuration.</summary>
    public void Apply(SceneApplyParameters data)
    {
        _haContext.CallService("scene", "apply", null, data);
    }

    ///<summary>Activates a scene with configuration.</summary>
    ///<param name="entities">List of entities and their target state. eg: light.kitchen: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 80 </param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public void Apply(object entities, double? transition = null)
    {
        _haContext.CallService("scene", "apply", null, new SceneApplyParameters { Entities = entities, Transition = transition });
    }

    ///<summary>Creates a new scene.</summary>
    public void Create(SceneCreateParameters data)
    {
        _haContext.CallService("scene", "create", null, data);
    }

    ///<summary>Creates a new scene.</summary>
    ///<param name="sceneId">The entity ID of the new scene. eg: all_lights</param>
    ///<param name="entities">List of entities and their target state. If your entities are already in the target state right now, use `snapshot_entities` instead. eg: light.tv_back_light: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 200 </param>
    ///<param name="snapshotEntities">List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine the `snapshot_entities` with `entities`. eg: - light.ceiling - light.kitchen </param>
    public void Create(string sceneId, object? entities = null, IEnumerable<string>? snapshotEntities = null)
    {
        _haContext.CallService("scene", "create", null, new SceneCreateParameters { SceneId = sceneId, Entities = entities, SnapshotEntities = snapshotEntities });
    }

    ///<summary>Deletes a dynamically created scene.</summary>
    ///<param name="target">The target for this service call</param>
    public void Delete(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("scene", "delete", target, data);
    }

    ///<summary>Reloads the scenes from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("scene", "reload", null, data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, SceneTurnOnParameters data)
    {
        _haContext.CallService("scene", "turn_on", target, data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public void TurnOn(ServiceTarget target, double? transition = null)
    {
        _haContext.CallService("scene", "turn_on", target, new SceneTurnOnParameters { Transition = transition });
    }
}

public partial record SceneApplyParameters
{
    ///<summary>List of entities and their target state. eg: light.kitchen: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 80 </summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>Time it takes the devices to transition into the states defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public double? Transition { get; init; }
}

public partial record SceneCreateParameters
{
    ///<summary>The entity ID of the new scene. eg: all_lights</summary>
    [JsonPropertyName("scene_id")]
    public string? SceneId { get; init; }

    ///<summary>List of entities and their target state. If your entities are already in the target state right now, use `snapshot_entities` instead. eg: light.tv_back_light: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 200 </summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine the `snapshot_entities` with `entities`. eg: - light.ceiling - light.kitchen </summary>
    [JsonPropertyName("snapshot_entities")]
    public IEnumerable<string>? SnapshotEntities { get; init; }
}

public partial record SceneTurnOnParameters
{
    ///<summary>Time it takes the devices to transition into the states defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public double? Transition { get; init; }
}

public partial class ScheduleServices
{
    private readonly IHaContext _haContext;
    public ScheduleServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads schedules from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("schedule", "reload", null, data);
    }
}

public partial class ScriptServices
{
    private readonly IHaContext _haContext;
    public ScriptServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public void BetoRunOnCommand(object? data = null)
    {
        _haContext.CallService("script", "beto_run_on_command", null, data);
    }

    public Task<JsonElement?> BetoRunOnCommandAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "beto_run_on_command", null, data);
    }

    public void DimBedroomLamps(object? data = null)
    {
        _haContext.CallService("script", "dim_bedroom_lamps", null, data);
    }

    public Task<JsonElement?> DimBedroomLampsAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "dim_bedroom_lamps", null, data);
    }

    public void NapMode(object? data = null)
    {
        _haContext.CallService("script", "nap_mode", null, data);
    }

    public Task<JsonElement?> NapModeAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "nap_mode", null, data);
    }

    public void NightLighting(object? data = null)
    {
        _haContext.CallService("script", "night_lighting", null, data);
    }

    public Task<JsonElement?> NightLightingAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "night_lighting", null, data);
    }

    public void PiholeTemporarilyDisable(object? data = null)
    {
        _haContext.CallService("script", "pihole_temporarily_disable", null, data);
    }

    public Task<JsonElement?> PiholeTemporarilyDisableAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "pihole_temporarily_disable", null, data);
    }

    ///<summary>Reloads all the available scripts.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("script", "reload", null, data);
    }

    public void RestartModem(object? data = null)
    {
        _haContext.CallService("script", "restart_modem", null, data);
    }

    public Task<JsonElement?> RestartModemAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "restart_modem", null, data);
    }

    public void RestartNextcloud(object? data = null)
    {
        _haContext.CallService("script", "restart_nextcloud", null, data);
    }

    public Task<JsonElement?> RestartNextcloudAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "restart_nextcloud", null, data);
    }

    ///<summary>Toggle a script. Starts it, if isn&apos;t running, stops it otherwise.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("script", "toggle", target, data);
    }

    ///<summary>Stops a running script.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("script", "turn_off", target, data);
    }

    public void TurnOffAllInteriorLights(object? data = null)
    {
        _haContext.CallService("script", "turn_off_all_interior_lights", null, data);
    }

    public Task<JsonElement?> TurnOffAllInteriorLightsAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "turn_off_all_interior_lights", null, data);
    }

    public void TurnOffBedroomLamps(object? data = null)
    {
        _haContext.CallService("script", "turn_off_bedroom_lamps", null, data);
    }

    public Task<JsonElement?> TurnOffBedroomLampsAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "turn_off_bedroom_lamps", null, data);
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("script", "turn_on", target, data);
    }

    public void TurnOnAllLivingRoom(object? data = null)
    {
        _haContext.CallService("script", "turn_on_all_living_room", null, data);
    }

    public Task<JsonElement?> TurnOnAllLivingRoomAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "turn_on_all_living_room", null, data);
    }
}

public partial class SelectServices
{
    private readonly IHaContext _haContext;
    public SelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Selects the first option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("select", "select_first", target, data);
    }

    ///<summary>Selects the last option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("select", "select_last", target, data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, SelectSelectNextParameters data)
    {
        _haContext.CallService("select", "select_next", target, data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_next", target, new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, SelectSelectOptionParameters data)
    {
        _haContext.CallService("select", "select_option", target, data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("select", "select_option", target, new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, SelectSelectPreviousParameters data)
    {
        _haContext.CallService("select", "select_previous", target, data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_previous", target, new SelectSelectPreviousParameters { Cycle = cycle });
    }
}

public partial record SelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record SelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record SelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the first to the last.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial class SirenServices
{
    private readonly IHaContext _haContext;
    public SirenServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles the siren on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("siren", "toggle", target, data);
    }

    ///<summary>Turns the siren off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("siren", "turn_off", target, data);
    }

    ///<summary>Turns the siren on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, SirenTurnOnParameters data)
    {
        _haContext.CallService("siren", "turn_on", target, data);
    }

    ///<summary>Turns the siren on.</summary>
    ///<param name="tone">The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration. eg: 0.5</param>
    ///<param name="duration">Number of seconds the sound is played. Must be supported by the integration. eg: 15</param>
    public void TurnOn(ServiceTarget target, string? tone = null, double? volumeLevel = null, string? duration = null)
    {
        _haContext.CallService("siren", "turn_on", target, new SirenTurnOnParameters { Tone = tone, VolumeLevel = volumeLevel, Duration = duration });
    }
}

public partial record SirenTurnOnParameters
{
    ///<summary>The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</summary>
    [JsonPropertyName("tone")]
    public string? Tone { get; init; }

    ///<summary>The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration. eg: 0.5</summary>
    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }

    ///<summary>Number of seconds the sound is played. Must be supported by the integration. eg: 15</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class SwitchServices
{
    private readonly IHaContext _haContext;
    public SwitchServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles a switch on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("switch", "toggle", target, data);
    }

    ///<summary>Turns a switch off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("switch", "turn_off", target, data);
    }

    ///<summary>Turns a switch on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("switch", "turn_on", target, data);
    }
}

public partial class SystemLogServices
{
    private readonly IHaContext _haContext;
    public SystemLogServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clears all log entries.</summary>
    public void Clear(object? data = null)
    {
        _haContext.CallService("system_log", "clear", null, data);
    }

    ///<summary>Write log entry.</summary>
    public void Write(SystemLogWriteParameters data)
    {
        _haContext.CallService("system_log", "write", null, data);
    }

    ///<summary>Write log entry.</summary>
    ///<param name="message">Message to log. eg: Something went wrong</param>
    ///<param name="level">Log level.</param>
    ///<param name="logger">Logger name under which to log the message. Defaults to `system_log.external`. eg: mycomponent.myplatform</param>
    public void Write(string message, object? level = null, string? logger = null)
    {
        _haContext.CallService("system_log", "write", null, new SystemLogWriteParameters { Message = message, Level = level, Logger = logger });
    }
}

public partial record SystemLogWriteParameters
{
    ///<summary>Message to log. eg: Something went wrong</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Log level.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }

    ///<summary>Logger name under which to log the message. Defaults to `system_log.external`. eg: mycomponent.myplatform</summary>
    [JsonPropertyName("logger")]
    public string? Logger { get; init; }
}

public partial class TemplateServices
{
    private readonly IHaContext _haContext;
    public TemplateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads template entities from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("template", "reload", null, data);
    }
}

public partial class TextServices
{
    private readonly IHaContext _haContext;
    public TextServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, TextSetValueParameters data)
    {
        _haContext.CallService("text", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="value">Enter your text. eg: Hello world!</param>
    public void SetValue(ServiceTarget target, string value)
    {
        _haContext.CallService("text", "set_value", target, new TextSetValueParameters { Value = value });
    }
}

public partial record TextSetValueParameters
{
    ///<summary>Enter your text. eg: Hello world!</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class TimerServices
{
    private readonly IHaContext _haContext;
    public TimerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Cancels a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Cancel(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("timer", "cancel", target, data);
    }

    ///<summary>Changes a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Change(ServiceTarget target, TimerChangeParameters data)
    {
        _haContext.CallService("timer", "change", target, data);
    }

    ///<summary>Changes a timer.</summary>
    ///<param name="duration">Duration to add or subtract to the running timer. eg: 00:01:00, 60 or -60</param>
    public void Change(ServiceTarget target, string duration)
    {
        _haContext.CallService("timer", "change", target, new TimerChangeParameters { Duration = duration });
    }

    ///<summary>Finishes a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Finish(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("timer", "finish", target, data);
    }

    ///<summary>Pauses a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("timer", "pause", target, data);
    }

    ///<summary>Reloads timers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("timer", "reload", null, data);
    }

    ///<summary>Starts a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Start(ServiceTarget target, TimerStartParameters data)
    {
        _haContext.CallService("timer", "start", target, data);
    }

    ///<summary>Starts a timer.</summary>
    ///<param name="duration">Duration the timer requires to finish. [optional]. eg: 00:01:00 or 60</param>
    public void Start(ServiceTarget target, string? duration = null)
    {
        _haContext.CallService("timer", "start", target, new TimerStartParameters { Duration = duration });
    }
}

public partial record TimerChangeParameters
{
    ///<summary>Duration to add or subtract to the running timer. eg: 00:01:00, 60 or -60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial record TimerStartParameters
{
    ///<summary>Duration the timer requires to finish. [optional]. eg: 00:01:00 or 60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class TruenasServices
{
    private readonly IHaContext _haContext;
    public TruenasServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Start a app</summary>
    ///<param name="target">The target for this service call</param>
    public void AppStart(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("truenas", "app_start", target, data);
    }

    ///<summary>Stop a app</summary>
    ///<param name="target">The target for this service call</param>
    public void AppStop(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("truenas", "app_stop", target, data);
    }

    ///<summary>Start a Clousync Job</summary>
    ///<param name="target">The target for this service call</param>
    public void CloudsyncRun(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("truenas", "cloudsync_run", target, data);
    }

    ///<summary>Create a Dataset Snapshot</summary>
    ///<param name="target">The target for this service call</param>
    public void DatasetSnapshot(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("truenas", "dataset_snapshot", target, data);
    }

    ///<summary>Restart a Jail</summary>
    ///<param name="target">The target for this service call</param>
    public void JailRestart(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("truenas", "jail_restart", target, data);
    }

    ///<summary>Start a Jail</summary>
    ///<param name="target">The target for this service call</param>
    public void JailStart(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("truenas", "jail_start", target, data);
    }

    ///<summary>Stop a Jail</summary>
    ///<param name="target">The target for this service call</param>
    public void JailStop(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("truenas", "jail_stop", target, data);
    }

    ///<summary>Reload a Service</summary>
    ///<param name="target">The target for this service call</param>
    public void ServiceReload(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("truenas", "service_reload", target, data);
    }

    ///<summary>Restart a Service</summary>
    ///<param name="target">The target for this service call</param>
    public void ServiceRestart(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("truenas", "service_restart", target, data);
    }

    ///<summary>Start a Service</summary>
    ///<param name="target">The target for this service call</param>
    public void ServiceStart(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("truenas", "service_start", target, data);
    }

    ///<summary>Stop a Service</summary>
    ///<param name="target">The target for this service call</param>
    public void ServiceStop(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("truenas", "service_stop", target, data);
    }

    ///<summary>Reboot TrueNAS System (Target Uptime Sensor)</summary>
    ///<param name="target">The target for this service call</param>
    public void SystemReboot(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("truenas", "system_reboot", target, data);
    }

    ///<summary>Shutdown TrueNAS System (Target Uptime Sensor)</summary>
    ///<param name="target">The target for this service call</param>
    public void SystemShutdown(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("truenas", "system_shutdown", target, data);
    }

    ///<summary>Start a VM</summary>
    ///<param name="target">The target for this service call</param>
    public void VmStart(ServiceTarget target, TruenasVmStartParameters data)
    {
        _haContext.CallService("truenas", "vm_start", target, data);
    }

    ///<summary>Start a VM</summary>
    ///<param name="overcommit">Memory overcommitment allows the VM to launch even though there is insufficient free memory.</param>
    public void VmStart(ServiceTarget target, bool? overcommit = null)
    {
        _haContext.CallService("truenas", "vm_start", target, new TruenasVmStartParameters { Overcommit = overcommit });
    }

    ///<summary>Stop a VM</summary>
    ///<param name="target">The target for this service call</param>
    public void VmStop(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("truenas", "vm_stop", target, data);
    }
}

public partial record TruenasVmStartParameters
{
    ///<summary>Memory overcommitment allows the VM to launch even though there is insufficient free memory.</summary>
    [JsonPropertyName("overcommit")]
    public bool? Overcommit { get; init; }
}

public partial class TtsServices
{
    private readonly IHaContext _haContext;
    public TtsServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes all cached text-to-speech files and purges the memory.</summary>
    public void ClearCache(object? data = null)
    {
        _haContext.CallService("tts", "clear_cache", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    public void CloudSay(TtsCloudSayParameters data)
    {
        _haContext.CallService("tts", "cloud_say", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    ///<param name="entityId"></param>
    ///<param name="message"> eg: My name is hanna</param>
    ///<param name="cache"></param>
    ///<param name="language"> eg: ru</param>
    ///<param name="options"> eg: platform specific</param>
    public void CloudSay(string entityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "cloud_say", null, new TtsCloudSayParameters { EntityId = entityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Say something using text-to-speech on a media player with google_translate.</summary>
    public void GoogleSay(TtsGoogleSayParameters data)
    {
        _haContext.CallService("tts", "google_say", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with google_translate.</summary>
    ///<param name="entityId"></param>
    ///<param name="message"> eg: My name is hanna</param>
    ///<param name="cache"></param>
    ///<param name="language"> eg: ru</param>
    ///<param name="options"> eg: platform specific</param>
    public void GoogleSay(string entityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "google_say", null, new TtsGoogleSayParameters { EntityId = entityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void Speak(ServiceTarget target, TtsSpeakParameters data)
    {
        _haContext.CallService("tts", "speak", target, data);
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="mediaPlayerEntityId">Media players to play the message.</param>
    ///<param name="message">The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</param>
    ///<param name="cache">Stores this message locally so that when the text is requested again, the output can be produced more quickly.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing integration-specific options. eg: platform specific</param>
    public void Speak(ServiceTarget target, string mediaPlayerEntityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "speak", target, new TtsSpeakParameters { MediaPlayerEntityId = mediaPlayerEntityId, Message = message, Cache = cache, Language = language, Options = options });
    }
}

public partial record TtsCloudSayParameters
{
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary> eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary> eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial record TtsGoogleSayParameters
{
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary> eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary> eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial record TtsSpeakParameters
{
    ///<summary>Media players to play the message.</summary>
    [JsonPropertyName("media_player_entity_id")]
    public string? MediaPlayerEntityId { get; init; }

    ///<summary>The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Stores this message locally so that when the text is requested again, the output can be produced more quickly.</summary>
    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary>Language to use for speech generation. eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>A dictionary containing integration-specific options. eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial class UnifiServices
{
    private readonly IHaContext _haContext;
    public UnifiServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Tries to get wireless client to reconnect to UniFi Network.</summary>
    public void ReconnectClient(UnifiReconnectClientParameters data)
    {
        _haContext.CallService("unifi", "reconnect_client", null, data);
    }

    ///<summary>Tries to get wireless client to reconnect to UniFi Network.</summary>
    ///<param name="deviceId">Try reconnect client to wireless network.</param>
    public void ReconnectClient(string deviceId)
    {
        _haContext.CallService("unifi", "reconnect_client", null, new UnifiReconnectClientParameters { DeviceId = deviceId });
    }

    ///<summary>Cleans up clients that has only been associated with the controller for a short period of time.</summary>
    public void RemoveClients(object? data = null)
    {
        _haContext.CallService("unifi", "remove_clients", null, data);
    }
}

public partial record UnifiReconnectClientParameters
{
    ///<summary>Try reconnect client to wireless network.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }
}

public partial class UnifiprotectServices
{
    private readonly IHaContext _haContext;
    public UnifiprotectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Adds a new custom message for doorbells.</summary>
    public void AddDoorbellText(UnifiprotectAddDoorbellTextParameters data)
    {
        _haContext.CallService("unifiprotect", "add_doorbell_text", null, data);
    }

    ///<summary>Adds a new custom message for doorbells.</summary>
    ///<param name="deviceId">Any device from the UniFi Protect instance you want to change. In case you have multiple Protect Instances.</param>
    ///<param name="message">New custom message to add for doorbells. Must be less than 30 characters. eg: Come In</param>
    public void AddDoorbellText(string deviceId, string message)
    {
        _haContext.CallService("unifiprotect", "add_doorbell_text", null, new UnifiprotectAddDoorbellTextParameters { DeviceId = deviceId, Message = message });
    }

    ///<summary>Removes an existing message for doorbells.</summary>
    public void RemoveDoorbellText(UnifiprotectRemoveDoorbellTextParameters data)
    {
        _haContext.CallService("unifiprotect", "remove_doorbell_text", null, data);
    }

    ///<summary>Removes an existing message for doorbells.</summary>
    ///<param name="deviceId">Any device from the UniFi Protect instance you want to change. In case you have multiple Protect Instances.</param>
    ///<param name="message">Existing custom message to remove for doorbells. eg: Go Away!</param>
    public void RemoveDoorbellText(string deviceId, string message)
    {
        _haContext.CallService("unifiprotect", "remove_doorbell_text", null, new UnifiprotectRemoveDoorbellTextParameters { DeviceId = deviceId, Message = message });
    }

    ///<summary>Use to remove a privacy zone from a camera.</summary>
    public void RemovePrivacyZone(UnifiprotectRemovePrivacyZoneParameters data)
    {
        _haContext.CallService("unifiprotect", "remove_privacy_zone", null, data);
    }

    ///<summary>Use to remove a privacy zone from a camera.</summary>
    ///<param name="deviceId">Camera you want to remove privacy zone from.</param>
    ///<param name="name">The name of the zone to remove.</param>
    public void RemovePrivacyZone(string deviceId, string name)
    {
        _haContext.CallService("unifiprotect", "remove_privacy_zone", null, new UnifiprotectRemovePrivacyZoneParameters { DeviceId = deviceId, Name = name });
    }

    ///<summary>Use to set the paired doorbell(s) with a smart chime.</summary>
    public void SetChimePairedDoorbells(UnifiprotectSetChimePairedDoorbellsParameters data)
    {
        _haContext.CallService("unifiprotect", "set_chime_paired_doorbells", null, data);
    }

    ///<summary>Use to set the paired doorbell(s) with a smart chime.</summary>
    ///<param name="deviceId">The chimes to link to the doorbells to.</param>
    ///<param name="doorbells">The doorbells to link to the chime. eg: binary_sensor.front_doorbell_doorbell</param>
    public void SetChimePairedDoorbells(string deviceId, object? doorbells = null)
    {
        _haContext.CallService("unifiprotect", "set_chime_paired_doorbells", null, new UnifiprotectSetChimePairedDoorbellsParameters { DeviceId = deviceId, Doorbells = doorbells });
    }
}

public partial record UnifiprotectAddDoorbellTextParameters
{
    ///<summary>Any device from the UniFi Protect instance you want to change. In case you have multiple Protect Instances.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    ///<summary>New custom message to add for doorbells. Must be less than 30 characters. eg: Come In</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }
}

public partial record UnifiprotectRemoveDoorbellTextParameters
{
    ///<summary>Any device from the UniFi Protect instance you want to change. In case you have multiple Protect Instances.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    ///<summary>Existing custom message to remove for doorbells. eg: Go Away!</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }
}

public partial record UnifiprotectRemovePrivacyZoneParameters
{
    ///<summary>Camera you want to remove privacy zone from.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    ///<summary>The name of the zone to remove.</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial record UnifiprotectSetChimePairedDoorbellsParameters
{
    ///<summary>The chimes to link to the doorbells to.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    ///<summary>The doorbells to link to the chime. eg: binary_sensor.front_doorbell_doorbell</summary>
    [JsonPropertyName("doorbells")]
    public object? Doorbells { get; init; }
}

public partial class UpdateServices
{
    private readonly IHaContext _haContext;
    public UpdateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearSkipped(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("update", "clear_skipped", target, data);
    }

    ///<summary>Installs an update for this device or service.</summary>
    ///<param name="target">The target for this service call</param>
    public void Install(ServiceTarget target, UpdateInstallParameters data)
    {
        _haContext.CallService("update", "install", target, data);
    }

    ///<summary>Installs an update for this device or service.</summary>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update .</param>
    public void Install(ServiceTarget target, string? version = null, bool? backup = null)
    {
        _haContext.CallService("update", "install", target, new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Marks currently available update as skipped.</summary>
    ///<param name="target">The target for this service call</param>
    public void Skip(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("update", "skip", target, data);
    }
}

public partial record UpdateInstallParameters
{
    ///<summary>The version to install. If omitted, the latest version will be installed. eg: 1.0.0</summary>
    [JsonPropertyName("version")]
    public string? Version { get; init; }

    ///<summary>If supported by the integration, this creates a backup before starting the update .</summary>
    [JsonPropertyName("backup")]
    public bool? Backup { get; init; }
}

public partial class WakeOnLanServices
{
    private readonly IHaContext _haContext;
    public WakeOnLanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a &apos;magic packet&apos; to wake up a device with &apos;Wake-On-LAN&apos; capabilities.</summary>
    public void SendMagicPacket(WakeOnLanSendMagicPacketParameters data)
    {
        _haContext.CallService("wake_on_lan", "send_magic_packet", null, data);
    }

    ///<summary>Sends a &apos;magic packet&apos; to wake up a device with &apos;Wake-On-LAN&apos; capabilities.</summary>
    ///<param name="mac">MAC address of the device to wake up. eg: aa:bb:cc:dd:ee:ff</param>
    ///<param name="broadcastAddress">The IP address of the host to send the magic packet to. Defaults to `255.255.255.255` and is normally not changed. eg: 192.168.255.255</param>
    ///<param name="broadcastPort">The port to send the magic packet to. Defaults to `9` and is normally not changed.</param>
    public void SendMagicPacket(string mac, string? broadcastAddress = null, double? broadcastPort = null)
    {
        _haContext.CallService("wake_on_lan", "send_magic_packet", null, new WakeOnLanSendMagicPacketParameters { Mac = mac, BroadcastAddress = broadcastAddress, BroadcastPort = broadcastPort });
    }
}

public partial record WakeOnLanSendMagicPacketParameters
{
    ///<summary>MAC address of the device to wake up. eg: aa:bb:cc:dd:ee:ff</summary>
    [JsonPropertyName("mac")]
    public string? Mac { get; init; }

    ///<summary>The IP address of the host to send the magic packet to. Defaults to `255.255.255.255` and is normally not changed. eg: 192.168.255.255</summary>
    [JsonPropertyName("broadcast_address")]
    public string? BroadcastAddress { get; init; }

    ///<summary>The port to send the magic packet to. Defaults to `9` and is normally not changed.</summary>
    [JsonPropertyName("broadcast_port")]
    public double? BroadcastPort { get; init; }
}

public partial class WeatherServices
{
    private readonly IHaContext _haContext;
    public WeatherServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Get weather forecasts.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetForecasts(ServiceTarget target, WeatherGetForecastsParameters data)
    {
        _haContext.CallService("weather", "get_forecasts", target, data);
    }

    ///<summary>Get weather forecasts.</summary>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public void GetForecasts(ServiceTarget target, object @type)
    {
        _haContext.CallService("weather", "get_forecasts", target, new WeatherGetForecastsParameters { Type = @type });
    }

    ///<summary>Get weather forecasts.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> GetForecastsAsync(ServiceTarget target, WeatherGetForecastsParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("weather", "get_forecasts", target, data);
    }

    ///<summary>Get weather forecasts.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public Task<JsonElement?> GetForecastsAsync(ServiceTarget target, object @type)
    {
        return _haContext.CallServiceWithResponseAsync("weather", "get_forecasts", target, new WeatherGetForecastsParameters { Type = @type });
    }
}

public partial record WeatherGetForecastsParameters
{
    ///<summary>Forecast type: daily, hourly or twice daily.</summary>
    [JsonPropertyName("type")]
    public object? Type { get; init; }
}

public partial class WorkdayServices
{
    private readonly IHaContext _haContext;
    public WorkdayServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Check if date is workday.</summary>
    ///<param name="target">The target for this service call</param>
    public void CheckDate(ServiceTarget target, WorkdayCheckDateParameters data)
    {
        _haContext.CallService("workday", "check_date", target, data);
    }

    ///<summary>Check if date is workday.</summary>
    ///<param name="checkDate">Date to check if workday. eg: 2022-12-25</param>
    public void CheckDate(ServiceTarget target, DateOnly? checkDate = null)
    {
        _haContext.CallService("workday", "check_date", target, new WorkdayCheckDateParameters { CheckDate = checkDate });
    }

    ///<summary>Check if date is workday.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> CheckDateAsync(ServiceTarget target, WorkdayCheckDateParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("workday", "check_date", target, data);
    }

    ///<summary>Check if date is workday.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="checkDate">Date to check if workday. eg: 2022-12-25</param>
    public Task<JsonElement?> CheckDateAsync(ServiceTarget target, DateOnly? checkDate = null)
    {
        return _haContext.CallServiceWithResponseAsync("workday", "check_date", target, new WorkdayCheckDateParameters { CheckDate = checkDate });
    }
}

public partial record WorkdayCheckDateParameters
{
    ///<summary>Date to check if workday. eg: 2022-12-25</summary>
    [JsonPropertyName("check_date")]
    public DateOnly? CheckDate { get; init; }
}

public partial class ZhaServices
{
    private readonly IHaContext _haContext;
    public ZhaServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clears a user code from a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearLockUserCode(ServiceTarget target, ZhaClearLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "clear_lock_user_code", target, data);
    }

    ///<summary>Clears a user code from a lock.</summary>
    ///<param name="codeSlot">Code slot to clear code from. eg: 1</param>
    public void ClearLockUserCode(ServiceTarget target, string codeSlot)
    {
        _haContext.CallService("zha", "clear_lock_user_code", target, new ZhaClearLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Disables a user code on a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void DisableLockUserCode(ServiceTarget target, ZhaDisableLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "disable_lock_user_code", target, data);
    }

    ///<summary>Disables a user code on a lock.</summary>
    ///<param name="codeSlot">Code slot to disable. eg: 1</param>
    public void DisableLockUserCode(ServiceTarget target, string codeSlot)
    {
        _haContext.CallService("zha", "disable_lock_user_code", target, new ZhaDisableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Enables a user code on a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void EnableLockUserCode(ServiceTarget target, ZhaEnableLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "enable_lock_user_code", target, data);
    }

    ///<summary>Enables a user code on a lock.</summary>
    ///<param name="codeSlot">Code slot to enable. eg: 1</param>
    public void EnableLockUserCode(ServiceTarget target, string codeSlot)
    {
        _haContext.CallService("zha", "enable_lock_user_code", target, new ZhaEnableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Issues a command on the specified cluster on the specified entity.</summary>
    public void IssueZigbeeClusterCommand(ZhaIssueZigbeeClusterCommandParameters data)
    {
        _haContext.CallService("zha", "issue_zigbee_cluster_command", null, data);
    }

    ///<summary>Issues a command on the specified cluster on the specified entity.</summary>
    ///<param name="ieee">IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpointId">Endpoint ID for the cluster.</param>
    ///<param name="clusterId">ZCL cluster to retrieve attributes for.</param>
    ///<param name="clusterType">Type of the cluster.</param>
    ///<param name="command">ID of the command to execute.</param>
    ///<param name="commandType">Type of the command to execute.</param>
    ///<param name="args">Arguments to pass to the command. eg: [arg1, arg2, argN]</param>
    ///<param name="params">Parameters to pass to the command.</param>
    ///<param name="manufacturer">Manufacturer code. Use a value of &quot;-1&quot; to force no code to be set. eg: 252</param>
    public void IssueZigbeeClusterCommand(string ieee, double endpointId, double clusterId, double command, object commandType, object? clusterType = null, object? args = null, object? @params = null, string? manufacturer = null)
    {
        _haContext.CallService("zha", "issue_zigbee_cluster_command", null, new ZhaIssueZigbeeClusterCommandParameters { Ieee = ieee, EndpointId = endpointId, ClusterId = clusterId, ClusterType = clusterType, Command = command, CommandType = commandType, Args = args, Params = @params, Manufacturer = manufacturer });
    }

    ///<summary>Issue command on the specified cluster on the specified group.</summary>
    public void IssueZigbeeGroupCommand(ZhaIssueZigbeeGroupCommandParameters data)
    {
        _haContext.CallService("zha", "issue_zigbee_group_command", null, data);
    }

    ///<summary>Issue command on the specified cluster on the specified group.</summary>
    ///<param name="group">Hexadecimal address of the group. eg: 546</param>
    ///<param name="clusterId">ZCL cluster to send command to.</param>
    ///<param name="clusterType">Type of the cluster.</param>
    ///<param name="command">ID of the command to execute.</param>
    ///<param name="args">Arguments to pass to the command. eg: [arg1, arg2, argN]</param>
    ///<param name="manufacturer">Manufacturer code. Use a value of &quot;-1&quot; to force no code to be set. eg: 252</param>
    public void IssueZigbeeGroupCommand(string @group, double clusterId, double command, object? clusterType = null, object? args = null, string? manufacturer = null)
    {
        _haContext.CallService("zha", "issue_zigbee_group_command", null, new ZhaIssueZigbeeGroupCommandParameters { Group = @group, ClusterId = clusterId, ClusterType = clusterType, Command = command, Args = args, Manufacturer = manufacturer });
    }

    ///<summary>Allows nodes to join the Zigbee network.</summary>
    public void Permit(ZhaPermitParameters data)
    {
        _haContext.CallService("zha", "permit", null, data);
    }

    ///<summary>Allows nodes to join the Zigbee network.</summary>
    ///<param name="duration">Time to permit joins.</param>
    ///<param name="ieee">IEEE address of the node permitting new joins. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="sourceIeee">IEEE address of the joining device (must be used with the install code). eg: 00:0a:bf:00:01:10:23:35</param>
    ///<param name="installCode">Install code of the joining device (must be used with the source_ieee). eg: 1234-5678-1234-5678-AABB-CCDD-AABB-CCDD-EEFF</param>
    ///<param name="qrCode">Value of the QR install code (different between vendors). eg: Z:000D6FFFFED4163B$I:52797BF4A5084DAA8E1712B61741CA024051</param>
    public void Permit(double? duration = null, string? ieee = null, string? sourceIeee = null, string? installCode = null, string? qrCode = null)
    {
        _haContext.CallService("zha", "permit", null, new ZhaPermitParameters { Duration = duration, Ieee = ieee, SourceIeee = sourceIeee, InstallCode = installCode, QrCode = qrCode });
    }

    ///<summary>Removes a node from the Zigbee network.</summary>
    public void Remove(ZhaRemoveParameters data)
    {
        _haContext.CallService("zha", "remove", null, data);
    }

    ///<summary>Removes a node from the Zigbee network.</summary>
    ///<param name="ieee">IEEE address of the node to remove. eg: 00:0d:6f:00:05:7d:2d:34</param>
    public void Remove(string ieee)
    {
        _haContext.CallService("zha", "remove", null, new ZhaRemoveParameters { Ieee = ieee });
    }

    ///<summary>Sets a user code on a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetLockUserCode(ServiceTarget target, ZhaSetLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "set_lock_user_code", target, data);
    }

    ///<summary>Sets a user code on a lock.</summary>
    ///<param name="codeSlot">Code slot to set the code in. eg: 1</param>
    ///<param name="userCode">Code to set. eg: 1234</param>
    public void SetLockUserCode(ServiceTarget target, string codeSlot, string userCode)
    {
        _haContext.CallService("zha", "set_lock_user_code", target, new ZhaSetLockUserCodeParameters { CodeSlot = codeSlot, UserCode = userCode });
    }

    ///<summary>Sets an attribute value for the specified cluster on the specified entity.</summary>
    public void SetZigbeeClusterAttribute(ZhaSetZigbeeClusterAttributeParameters data)
    {
        _haContext.CallService("zha", "set_zigbee_cluster_attribute", null, data);
    }

    ///<summary>Sets an attribute value for the specified cluster on the specified entity.</summary>
    ///<param name="ieee">IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpointId">Endpoint ID for the cluster.</param>
    ///<param name="clusterId">ZCL cluster to retrieve attributes for.</param>
    ///<param name="clusterType">Type of the cluster.</param>
    ///<param name="attribute">ID of the attribute to set. eg: 0</param>
    ///<param name="value">Value to write to the attribute. eg: 1</param>
    ///<param name="manufacturer">Manufacturer code. Use a value of &quot;-1&quot; to force no code to be set. eg: 252</param>
    public void SetZigbeeClusterAttribute(string ieee, double endpointId, double clusterId, double attribute, string value, object? clusterType = null, string? manufacturer = null)
    {
        _haContext.CallService("zha", "set_zigbee_cluster_attribute", null, new ZhaSetZigbeeClusterAttributeParameters { Ieee = ieee, EndpointId = endpointId, ClusterId = clusterId, ClusterType = clusterType, Attribute = attribute, Value = value, Manufacturer = manufacturer });
    }

    ///<summary>This action uses the WD capabilities to emit a quick audible/visible pulse called a &quot;squawk&quot;. The squawk command has no effect if the WD is currently active (warning in progress).</summary>
    public void WarningDeviceSquawk(ZhaWarningDeviceSquawkParameters data)
    {
        _haContext.CallService("zha", "warning_device_squawk", null, data);
    }

    ///<summary>This action uses the WD capabilities to emit a quick audible/visible pulse called a &quot;squawk&quot;. The squawk command has no effect if the WD is currently active (warning in progress).</summary>
    ///<param name="ieee">IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="mode">The Squawk Mode field is used as a 4-bit enumeration, and can have one of the values shown in Table 8-24 of the ZCL spec - Squawk Mode Field. The exact operation of each mode (how the WD “squawks”) is implementation specific.</param>
    ///<param name="strobe">The strobe field is used as a Boolean, and determines if the visual indication is also required in addition to the audible squawk, as shown in Table 8-25 of the ZCL spec - Strobe Bit.</param>
    ///<param name="level">The squawk level field is used as a 2-bit enumeration, and determines the intensity of audible squawk sound as shown in Table 8-26 of the ZCL spec - Squawk Level Field Values.</param>
    public void WarningDeviceSquawk(string ieee, double? mode = null, double? strobe = null, double? level = null)
    {
        _haContext.CallService("zha", "warning_device_squawk", null, new ZhaWarningDeviceSquawkParameters { Ieee = ieee, Mode = mode, Strobe = strobe, Level = level });
    }

    ///<summary>This action starts the operation of the warning device. The warning device alerts the surrounding area by audible (siren) and visual (strobe) signals.</summary>
    public void WarningDeviceWarn(ZhaWarningDeviceWarnParameters data)
    {
        _haContext.CallService("zha", "warning_device_warn", null, data);
    }

    ///<summary>This action starts the operation of the warning device. The warning device alerts the surrounding area by audible (siren) and visual (strobe) signals.</summary>
    ///<param name="ieee">IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="mode">The Warning Mode field is used as a 4-bit enumeration, can have one of the values 0-6 defined below in table 8-20 of the ZCL spec. The exact behavior of the warning device in each mode is according to the relevant security standards.</param>
    ///<param name="strobe">The Strobe field is used as a 2-bit enumeration, and determines if the visual indication is required in addition to the audible siren, as indicated in Table 8-21 of the ZCL spec. &quot;0&quot; means no strobe, &quot;1&quot; means strobe. If the strobe field is “1” and the Warning Mode is “0” (“Stop”), then only the strobe is activated.</param>
    ///<param name="level">The Siren Level field is used as a 2-bit enumeration, and indicates the intensity of audible squawk sound as shown in Table 8-22 of the ZCL spec.</param>
    ///<param name="duration">Requested duration of warning, in seconds (16 bit). If both Strobe and Warning Mode are &quot;0&quot; this field is ignored.</param>
    ///<param name="dutyCycle">Indicates the length of the flash cycle. This allows you to vary the flash duration for different alarm types (e.g., fire, police, burglar). The valid range is 0-100 in increments of 10. All other values must be rounded to the nearest valid value. Strobe calculates a duty cycle over a duration of one second. The ON state must precede the OFF state. For example, if the Strobe Duty Cycle field specifies “40,”, then the strobe flashes ON for 4/10ths of a second and then turns OFF for 6/10ths of a second.</param>
    ///<param name="intensity">Indicates the intensity of the strobe as shown in Table 8-23 of the ZCL spec. This attribute is designed to vary the output of the strobe (i.e., brightness) and not its frequency, which is detailed in section 8.4.2.3.1.6 of the ZCL spec.</param>
    public void WarningDeviceWarn(string ieee, double? mode = null, double? strobe = null, double? level = null, double? duration = null, long? dutyCycle = null, double? intensity = null)
    {
        _haContext.CallService("zha", "warning_device_warn", null, new ZhaWarningDeviceWarnParameters { Ieee = ieee, Mode = mode, Strobe = strobe, Level = level, Duration = duration, DutyCycle = dutyCycle, Intensity = intensity });
    }
}

public partial record ZhaClearLockUserCodeParameters
{
    ///<summary>Code slot to clear code from. eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }
}

public partial record ZhaDisableLockUserCodeParameters
{
    ///<summary>Code slot to disable. eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }
}

public partial record ZhaEnableLockUserCodeParameters
{
    ///<summary>Code slot to enable. eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }
}

public partial record ZhaIssueZigbeeClusterCommandParameters
{
    ///<summary>IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>Endpoint ID for the cluster.</summary>
    [JsonPropertyName("endpoint_id")]
    public double? EndpointId { get; init; }

    ///<summary>ZCL cluster to retrieve attributes for.</summary>
    [JsonPropertyName("cluster_id")]
    public double? ClusterId { get; init; }

    ///<summary>Type of the cluster.</summary>
    [JsonPropertyName("cluster_type")]
    public object? ClusterType { get; init; }

    ///<summary>ID of the command to execute.</summary>
    [JsonPropertyName("command")]
    public double? Command { get; init; }

    ///<summary>Type of the command to execute.</summary>
    [JsonPropertyName("command_type")]
    public object? CommandType { get; init; }

    ///<summary>Arguments to pass to the command. eg: [arg1, arg2, argN]</summary>
    [JsonPropertyName("args")]
    public object? Args { get; init; }

    ///<summary>Parameters to pass to the command.</summary>
    [JsonPropertyName("params")]
    public object? Params { get; init; }

    ///<summary>Manufacturer code. Use a value of &quot;-1&quot; to force no code to be set. eg: 252</summary>
    [JsonPropertyName("manufacturer")]
    public string? Manufacturer { get; init; }
}

public partial record ZhaIssueZigbeeGroupCommandParameters
{
    ///<summary>Hexadecimal address of the group. eg: 546</summary>
    [JsonPropertyName("group")]
    public string? Group { get; init; }

    ///<summary>ZCL cluster to send command to.</summary>
    [JsonPropertyName("cluster_id")]
    public double? ClusterId { get; init; }

    ///<summary>Type of the cluster.</summary>
    [JsonPropertyName("cluster_type")]
    public object? ClusterType { get; init; }

    ///<summary>ID of the command to execute.</summary>
    [JsonPropertyName("command")]
    public double? Command { get; init; }

    ///<summary>Arguments to pass to the command. eg: [arg1, arg2, argN]</summary>
    [JsonPropertyName("args")]
    public object? Args { get; init; }

    ///<summary>Manufacturer code. Use a value of &quot;-1&quot; to force no code to be set. eg: 252</summary>
    [JsonPropertyName("manufacturer")]
    public string? Manufacturer { get; init; }
}

public partial record ZhaPermitParameters
{
    ///<summary>Time to permit joins.</summary>
    [JsonPropertyName("duration")]
    public double? Duration { get; init; }

    ///<summary>IEEE address of the node permitting new joins. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>IEEE address of the joining device (must be used with the install code). eg: 00:0a:bf:00:01:10:23:35</summary>
    [JsonPropertyName("source_ieee")]
    public string? SourceIeee { get; init; }

    ///<summary>Install code of the joining device (must be used with the source_ieee). eg: 1234-5678-1234-5678-AABB-CCDD-AABB-CCDD-EEFF</summary>
    [JsonPropertyName("install_code")]
    public string? InstallCode { get; init; }

    ///<summary>Value of the QR install code (different between vendors). eg: Z:000D6FFFFED4163B$I:52797BF4A5084DAA8E1712B61741CA024051</summary>
    [JsonPropertyName("qr_code")]
    public string? QrCode { get; init; }
}

public partial record ZhaRemoveParameters
{
    ///<summary>IEEE address of the node to remove. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }
}

public partial record ZhaSetLockUserCodeParameters
{
    ///<summary>Code slot to set the code in. eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }

    ///<summary>Code to set. eg: 1234</summary>
    [JsonPropertyName("user_code")]
    public string? UserCode { get; init; }
}

public partial record ZhaSetZigbeeClusterAttributeParameters
{
    ///<summary>IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>Endpoint ID for the cluster.</summary>
    [JsonPropertyName("endpoint_id")]
    public double? EndpointId { get; init; }

    ///<summary>ZCL cluster to retrieve attributes for.</summary>
    [JsonPropertyName("cluster_id")]
    public double? ClusterId { get; init; }

    ///<summary>Type of the cluster.</summary>
    [JsonPropertyName("cluster_type")]
    public object? ClusterType { get; init; }

    ///<summary>ID of the attribute to set. eg: 0</summary>
    [JsonPropertyName("attribute")]
    public double? Attribute { get; init; }

    ///<summary>Value to write to the attribute. eg: 1</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }

    ///<summary>Manufacturer code. Use a value of &quot;-1&quot; to force no code to be set. eg: 252</summary>
    [JsonPropertyName("manufacturer")]
    public string? Manufacturer { get; init; }
}

public partial record ZhaWarningDeviceSquawkParameters
{
    ///<summary>IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>The Squawk Mode field is used as a 4-bit enumeration, and can have one of the values shown in Table 8-24 of the ZCL spec - Squawk Mode Field. The exact operation of each mode (how the WD “squawks”) is implementation specific.</summary>
    [JsonPropertyName("mode")]
    public double? Mode { get; init; }

    ///<summary>The strobe field is used as a Boolean, and determines if the visual indication is also required in addition to the audible squawk, as shown in Table 8-25 of the ZCL spec - Strobe Bit.</summary>
    [JsonPropertyName("strobe")]
    public double? Strobe { get; init; }

    ///<summary>The squawk level field is used as a 2-bit enumeration, and determines the intensity of audible squawk sound as shown in Table 8-26 of the ZCL spec - Squawk Level Field Values.</summary>
    [JsonPropertyName("level")]
    public double? Level { get; init; }
}

public partial record ZhaWarningDeviceWarnParameters
{
    ///<summary>IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>The Warning Mode field is used as a 4-bit enumeration, can have one of the values 0-6 defined below in table 8-20 of the ZCL spec. The exact behavior of the warning device in each mode is according to the relevant security standards.</summary>
    [JsonPropertyName("mode")]
    public double? Mode { get; init; }

    ///<summary>The Strobe field is used as a 2-bit enumeration, and determines if the visual indication is required in addition to the audible siren, as indicated in Table 8-21 of the ZCL spec. &quot;0&quot; means no strobe, &quot;1&quot; means strobe. If the strobe field is “1” and the Warning Mode is “0” (“Stop”), then only the strobe is activated.</summary>
    [JsonPropertyName("strobe")]
    public double? Strobe { get; init; }

    ///<summary>The Siren Level field is used as a 2-bit enumeration, and indicates the intensity of audible squawk sound as shown in Table 8-22 of the ZCL spec.</summary>
    [JsonPropertyName("level")]
    public double? Level { get; init; }

    ///<summary>Requested duration of warning, in seconds (16 bit). If both Strobe and Warning Mode are &quot;0&quot; this field is ignored.</summary>
    [JsonPropertyName("duration")]
    public double? Duration { get; init; }

    ///<summary>Indicates the length of the flash cycle. This allows you to vary the flash duration for different alarm types (e.g., fire, police, burglar). The valid range is 0-100 in increments of 10. All other values must be rounded to the nearest valid value. Strobe calculates a duty cycle over a duration of one second. The ON state must precede the OFF state. For example, if the Strobe Duty Cycle field specifies “40,”, then the strobe flashes ON for 4/10ths of a second and then turns OFF for 6/10ths of a second.</summary>
    [JsonPropertyName("duty_cycle")]
    public long? DutyCycle { get; init; }

    ///<summary>Indicates the intensity of the strobe as shown in Table 8-23 of the ZCL spec. This attribute is designed to vary the output of the strobe (i.e., brightness) and not its frequency, which is detailed in section 8.4.2.3.1.6 of the ZCL spec.</summary>
    [JsonPropertyName("intensity")]
    public double? Intensity { get; init; }
}

public partial class ZoneServices
{
    private readonly IHaContext _haContext;
    public ZoneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads zones from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("zone", "reload", null, data);
    }
}

public partial class ZwaveJsServices
{
    private readonly IHaContext _haContext;
    public ZwaveJsServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clears a user code from a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearLockUsercode(ServiceTarget target, ZwaveJsClearLockUsercodeParameters data)
    {
        _haContext.CallService("zwave_js", "clear_lock_usercode", target, data);
    }

    ///<summary>Clears a user code from a lock.</summary>
    ///<param name="codeSlot">Code slot to clear code from. eg: 1</param>
    public void ClearLockUsercode(ServiceTarget target, string codeSlot)
    {
        _haContext.CallService("zwave_js", "clear_lock_usercode", target, new ZwaveJsClearLockUsercodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Force updates the values of a Z-Wave entity.</summary>
    public void RefreshValue(ZwaveJsRefreshValueParameters data)
    {
        _haContext.CallService("zwave_js", "refresh_value", null, data);
    }

    ///<summary>Force updates the values of a Z-Wave entity.</summary>
    ///<param name="entityId">Entities to refresh. eg: - sensor.family_room_motion - switch.kitchen </param>
    ///<param name="refreshAllValues">Whether to refresh all values (true) or just the primary value (false).</param>
    public void RefreshValue(IEnumerable<string> entityId, bool? refreshAllValues = null)
    {
        _haContext.CallService("zwave_js", "refresh_value", null, new ZwaveJsRefreshValueParameters { EntityId = entityId, RefreshAllValues = refreshAllValues });
    }

    ///<summary>Sets the configuration for a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetLockConfiguration(ServiceTarget target, ZwaveJsSetLockConfigurationParameters data)
    {
        _haContext.CallService("zwave_js", "set_lock_configuration", target, data);
    }

    ///<summary>Sets the configuration for a lock.</summary>
    ///<param name="operationType">The operation type of the lock. eg: timed</param>
    ///<param name="lockTimeout">Seconds until lock mode times out. Should only be used if operation type is `timed`. eg: 1</param>
    ///<param name="outsideHandlesCanOpenDoorConfiguration">A list of four booleans which indicate which outside handles can open the door. eg: [true,true,true,false]</param>
    ///<param name="insideHandlesCanOpenDoorConfiguration">A list of four booleans which indicate which inside handles can open the door. eg: [true,true,true,false]</param>
    ///<param name="autoRelockTime">Duration in seconds until lock returns to secure state. Only enforced when operation type is `constant`. eg: 1</param>
    ///<param name="holdAndReleaseTime">Duration in seconds the latch stays retracted. eg: 1</param>
    ///<param name="twistAssist">Enable Twist Assist. eg: True</param>
    ///<param name="blockToBlock">Enable block-to-block functionality. eg: True</param>
    public void SetLockConfiguration(ServiceTarget target, object operationType, double? lockTimeout = null, object? outsideHandlesCanOpenDoorConfiguration = null, object? insideHandlesCanOpenDoorConfiguration = null, double? autoRelockTime = null, double? holdAndReleaseTime = null, bool? twistAssist = null, bool? blockToBlock = null)
    {
        _haContext.CallService("zwave_js", "set_lock_configuration", target, new ZwaveJsSetLockConfigurationParameters { OperationType = operationType, LockTimeout = lockTimeout, OutsideHandlesCanOpenDoorConfiguration = outsideHandlesCanOpenDoorConfiguration, InsideHandlesCanOpenDoorConfiguration = insideHandlesCanOpenDoorConfiguration, AutoRelockTime = autoRelockTime, HoldAndReleaseTime = holdAndReleaseTime, TwistAssist = twistAssist, BlockToBlock = blockToBlock });
    }

    ///<summary>Sets a user code on a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetLockUsercode(ServiceTarget target, ZwaveJsSetLockUsercodeParameters data)
    {
        _haContext.CallService("zwave_js", "set_lock_usercode", target, data);
    }

    ///<summary>Sets a user code on a lock.</summary>
    ///<param name="codeSlot">Code slot to set the code. eg: 1</param>
    ///<param name="usercode">Lock code to set. eg: 1234</param>
    public void SetLockUsercode(ServiceTarget target, string codeSlot, string usercode)
    {
        _haContext.CallService("zwave_js", "set_lock_usercode", target, new ZwaveJsSetLockUsercodeParameters { CodeSlot = codeSlot, Usercode = usercode });
    }
}

public partial record ZwaveJsClearLockUsercodeParameters
{
    ///<summary>Code slot to clear code from. eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }
}

public partial record ZwaveJsRefreshValueParameters
{
    ///<summary>Entities to refresh. eg: - sensor.family_room_motion - switch.kitchen </summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }

    ///<summary>Whether to refresh all values (true) or just the primary value (false).</summary>
    [JsonPropertyName("refresh_all_values")]
    public bool? RefreshAllValues { get; init; }
}

public partial record ZwaveJsSetLockConfigurationParameters
{
    ///<summary>The operation type of the lock. eg: timed</summary>
    [JsonPropertyName("operation_type")]
    public object? OperationType { get; init; }

    ///<summary>Seconds until lock mode times out. Should only be used if operation type is `timed`. eg: 1</summary>
    [JsonPropertyName("lock_timeout")]
    public double? LockTimeout { get; init; }

    ///<summary>A list of four booleans which indicate which outside handles can open the door. eg: [true,true,true,false]</summary>
    [JsonPropertyName("outside_handles_can_open_door_configuration")]
    public object? OutsideHandlesCanOpenDoorConfiguration { get; init; }

    ///<summary>A list of four booleans which indicate which inside handles can open the door. eg: [true,true,true,false]</summary>
    [JsonPropertyName("inside_handles_can_open_door_configuration")]
    public object? InsideHandlesCanOpenDoorConfiguration { get; init; }

    ///<summary>Duration in seconds until lock returns to secure state. Only enforced when operation type is `constant`. eg: 1</summary>
    [JsonPropertyName("auto_relock_time")]
    public double? AutoRelockTime { get; init; }

    ///<summary>Duration in seconds the latch stays retracted. eg: 1</summary>
    [JsonPropertyName("hold_and_release_time")]
    public double? HoldAndReleaseTime { get; init; }

    ///<summary>Enable Twist Assist. eg: True</summary>
    [JsonPropertyName("twist_assist")]
    public bool? TwistAssist { get; init; }

    ///<summary>Enable block-to-block functionality. eg: True</summary>
    [JsonPropertyName("block_to_block")]
    public bool? BlockToBlock { get; init; }
}

public partial record ZwaveJsSetLockUsercodeParameters
{
    ///<summary>Code slot to set the code. eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }

    ///<summary>Lock code to set. eg: 1234</summary>
    [JsonPropertyName("usercode")]
    public string? Usercode { get; init; }
}

public static class AutomationEntityExtensionMethods
{
    ///<summary>Toggles (enable / disable) an automation.</summary>
    public static void Toggle(this IAutomationEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles (enable / disable) an automation.</summary>
    public static void Toggle(this IEnumerable<IAutomationEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    public static void Trigger(this IAutomationEntityCore target, AutomationTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    public static void Trigger(this IEnumerable<IAutomationEntityCore> target, AutomationTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The IAutomationEntityCore to call this service for</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public static void Trigger(this IAutomationEntityCore target, bool? skipCondition = null)
    {
        target.CallService("trigger", new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The IEnumerable&lt;IAutomationEntityCore&gt; to call this service for</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public static void Trigger(this IEnumerable<IAutomationEntityCore> target, bool? skipCondition = null)
    {
        target.CallService("trigger", new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Disables an automation.</summary>
    public static void TurnOff(this IAutomationEntityCore target, AutomationTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Disables an automation.</summary>
    public static void TurnOff(this IEnumerable<IAutomationEntityCore> target, AutomationTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The IAutomationEntityCore to call this service for</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public static void TurnOff(this IAutomationEntityCore target, bool? stopActions = null)
    {
        target.CallService("turn_off", new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The IEnumerable&lt;IAutomationEntityCore&gt; to call this service for</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public static void TurnOff(this IEnumerable<IAutomationEntityCore> target, bool? stopActions = null)
    {
        target.CallService("turn_off", new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Enables an automation.</summary>
    public static void TurnOn(this IAutomationEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Enables an automation.</summary>
    public static void TurnOn(this IEnumerable<IAutomationEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class ButtonEntityExtensionMethods
{
    ///<summary>Press the button entity.</summary>
    public static void Press(this IButtonEntityCore target, object? data = null)
    {
        target.CallService("press", data);
    }

    ///<summary>Press the button entity.</summary>
    public static void Press(this IEnumerable<IButtonEntityCore> target, object? data = null)
    {
        target.CallService("press", data);
    }
}

public static class CameraEntityExtensionMethods
{
    ///<summary>Disables the motion detection.</summary>
    public static void DisableMotionDetection(this ICameraEntityCore target, object? data = null)
    {
        target.CallService("disable_motion_detection", data);
    }

    ///<summary>Disables the motion detection.</summary>
    public static void DisableMotionDetection(this IEnumerable<ICameraEntityCore> target, object? data = null)
    {
        target.CallService("disable_motion_detection", data);
    }

    ///<summary>Enables the motion detection.</summary>
    public static void EnableMotionDetection(this ICameraEntityCore target, object? data = null)
    {
        target.CallService("enable_motion_detection", data);
    }

    ///<summary>Enables the motion detection.</summary>
    public static void EnableMotionDetection(this IEnumerable<ICameraEntityCore> target, object? data = null)
    {
        target.CallService("enable_motion_detection", data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    public static void PlayStream(this ICameraEntityCore target, CameraPlayStreamParameters data)
    {
        target.CallService("play_stream", data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    public static void PlayStream(this IEnumerable<ICameraEntityCore> target, CameraPlayStreamParameters data)
    {
        target.CallService("play_stream", data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public static void PlayStream(this ICameraEntityCore target, string mediaPlayer, object? format = null)
    {
        target.CallService("play_stream", new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public static void PlayStream(this IEnumerable<ICameraEntityCore> target, string mediaPlayer, object? format = null)
    {
        target.CallService("play_stream", new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    public static void Record(this ICameraEntityCore target, CameraRecordParameters data)
    {
        target.CallService("record", data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    public static void Record(this IEnumerable<ICameraEntityCore> target, CameraRecordParameters data)
    {
        target.CallService("record", data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public static void Record(this ICameraEntityCore target, string filename, double? duration = null, double? lookback = null)
    {
        target.CallService("record", new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public static void Record(this IEnumerable<ICameraEntityCore> target, string filename, double? duration = null, double? lookback = null)
    {
        target.CallService("record", new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    public static void Snapshot(this ICameraEntityCore target, CameraSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    public static void Snapshot(this IEnumerable<ICameraEntityCore> target, CameraSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public static void Snapshot(this ICameraEntityCore target, string filename)
    {
        target.CallService("snapshot", new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public static void Snapshot(this IEnumerable<ICameraEntityCore> target, string filename)
    {
        target.CallService("snapshot", new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Turns off the camera.</summary>
    public static void TurnOff(this ICameraEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns off the camera.</summary>
    public static void TurnOff(this IEnumerable<ICameraEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns on the camera.</summary>
    public static void TurnOn(this ICameraEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns on the camera.</summary>
    public static void TurnOn(this IEnumerable<ICameraEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class ClimateEntityExtensionMethods
{
    ///<summary>Turns auxiliary heater on/off.</summary>
    public static void SetAuxHeat(this IClimateEntityCore target, ClimateSetAuxHeatParameters data)
    {
        target.CallService("set_aux_heat", data);
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    public static void SetAuxHeat(this IEnumerable<IClimateEntityCore> target, ClimateSetAuxHeatParameters data)
    {
        target.CallService("set_aux_heat", data);
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public static void SetAuxHeat(this IClimateEntityCore target, bool auxHeat)
    {
        target.CallService("set_aux_heat", new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public static void SetAuxHeat(this IEnumerable<IClimateEntityCore> target, bool auxHeat)
    {
        target.CallService("set_aux_heat", new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Sets fan operation mode.</summary>
    public static void SetFanMode(this IClimateEntityCore target, ClimateSetFanModeParameters data)
    {
        target.CallService("set_fan_mode", data);
    }

    ///<summary>Sets fan operation mode.</summary>
    public static void SetFanMode(this IEnumerable<IClimateEntityCore> target, ClimateSetFanModeParameters data)
    {
        target.CallService("set_fan_mode", data);
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public static void SetFanMode(this IClimateEntityCore target, string fanMode)
    {
        target.CallService("set_fan_mode", new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public static void SetFanMode(this IEnumerable<IClimateEntityCore> target, string fanMode)
    {
        target.CallService("set_fan_mode", new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets target humidity.</summary>
    public static void SetHumidity(this IClimateEntityCore target, ClimateSetHumidityParameters data)
    {
        target.CallService("set_humidity", data);
    }

    ///<summary>Sets target humidity.</summary>
    public static void SetHumidity(this IEnumerable<IClimateEntityCore> target, ClimateSetHumidityParameters data)
    {
        target.CallService("set_humidity", data);
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="humidity">Target humidity.</param>
    public static void SetHumidity(this IClimateEntityCore target, double humidity)
    {
        target.CallService("set_humidity", new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="humidity">Target humidity.</param>
    public static void SetHumidity(this IEnumerable<IClimateEntityCore> target, double humidity)
    {
        target.CallService("set_humidity", new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    public static void SetHvacMode(this IClimateEntityCore target, ClimateSetHvacModeParameters data)
    {
        target.CallService("set_hvac_mode", data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    public static void SetHvacMode(this IEnumerable<IClimateEntityCore> target, ClimateSetHvacModeParameters data)
    {
        target.CallService("set_hvac_mode", data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetHvacMode(this IClimateEntityCore target, object? hvacMode = null)
    {
        target.CallService("set_hvac_mode", new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetHvacMode(this IEnumerable<IClimateEntityCore> target, object? hvacMode = null)
    {
        target.CallService("set_hvac_mode", new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets preset mode.</summary>
    public static void SetPresetMode(this IClimateEntityCore target, ClimateSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Sets preset mode.</summary>
    public static void SetPresetMode(this IEnumerable<IClimateEntityCore> target, ClimateSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public static void SetPresetMode(this IClimateEntityCore target, string presetMode)
    {
        target.CallService("set_preset_mode", new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public static void SetPresetMode(this IEnumerable<IClimateEntityCore> target, string presetMode)
    {
        target.CallService("set_preset_mode", new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    public static void SetSwingMode(this IClimateEntityCore target, ClimateSetSwingModeParameters data)
    {
        target.CallService("set_swing_mode", data);
    }

    ///<summary>Sets swing operation mode.</summary>
    public static void SetSwingMode(this IEnumerable<IClimateEntityCore> target, ClimateSetSwingModeParameters data)
    {
        target.CallService("set_swing_mode", data);
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="swingMode">Swing operation mode. eg: horizontal</param>
    public static void SetSwingMode(this IClimateEntityCore target, string swingMode)
    {
        target.CallService("set_swing_mode", new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="swingMode">Swing operation mode. eg: horizontal</param>
    public static void SetSwingMode(this IEnumerable<IClimateEntityCore> target, string swingMode)
    {
        target.CallService("set_swing_mode", new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets target temperature.</summary>
    public static void SetTemperature(this IClimateEntityCore target, ClimateSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Sets target temperature.</summary>
    public static void SetTemperature(this IEnumerable<IClimateEntityCore> target, ClimateSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Sets target temperature.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="temperature">Target temperature.</param>
    ///<param name="targetTempHigh">High target temperature.</param>
    ///<param name="targetTempLow">Low target temperature.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetTemperature(this IClimateEntityCore target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        target.CallService("set_temperature", new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Sets target temperature.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="temperature">Target temperature.</param>
    ///<param name="targetTempHigh">High target temperature.</param>
    ///<param name="targetTempLow">Low target temperature.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetTemperature(this IEnumerable<IClimateEntityCore> target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        target.CallService("set_temperature", new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Toggles climate device, from on to off, or off to on.</summary>
    public static void Toggle(this IClimateEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles climate device, from on to off, or off to on.</summary>
    public static void Toggle(this IEnumerable<IClimateEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns climate device off.</summary>
    public static void TurnOff(this IClimateEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns climate device off.</summary>
    public static void TurnOff(this IEnumerable<IClimateEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns climate device on.</summary>
    public static void TurnOn(this IClimateEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns climate device on.</summary>
    public static void TurnOn(this IEnumerable<IClimateEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class CoverEntityExtensionMethods
{
    ///<summary>Closes a cover.</summary>
    public static void CloseCover(this ICoverEntityCore target, object? data = null)
    {
        target.CallService("close_cover", data);
    }

    ///<summary>Closes a cover.</summary>
    public static void CloseCover(this IEnumerable<ICoverEntityCore> target, object? data = null)
    {
        target.CallService("close_cover", data);
    }

    ///<summary>Tilts a cover to close.</summary>
    public static void CloseCoverTilt(this ICoverEntityCore target, object? data = null)
    {
        target.CallService("close_cover_tilt", data);
    }

    ///<summary>Tilts a cover to close.</summary>
    public static void CloseCoverTilt(this IEnumerable<ICoverEntityCore> target, object? data = null)
    {
        target.CallService("close_cover_tilt", data);
    }

    ///<summary>Opens a cover.</summary>
    public static void OpenCover(this ICoverEntityCore target, object? data = null)
    {
        target.CallService("open_cover", data);
    }

    ///<summary>Opens a cover.</summary>
    public static void OpenCover(this IEnumerable<ICoverEntityCore> target, object? data = null)
    {
        target.CallService("open_cover", data);
    }

    ///<summary>Tilts a cover open.</summary>
    public static void OpenCoverTilt(this ICoverEntityCore target, object? data = null)
    {
        target.CallService("open_cover_tilt", data);
    }

    ///<summary>Tilts a cover open.</summary>
    public static void OpenCoverTilt(this IEnumerable<ICoverEntityCore> target, object? data = null)
    {
        target.CallService("open_cover_tilt", data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    public static void SetCoverPosition(this ICoverEntityCore target, CoverSetCoverPositionParameters data)
    {
        target.CallService("set_cover_position", data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    public static void SetCoverPosition(this IEnumerable<ICoverEntityCore> target, CoverSetCoverPositionParameters data)
    {
        target.CallService("set_cover_position", data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The ICoverEntityCore to call this service for</param>
    ///<param name="position">Target position.</param>
    public static void SetCoverPosition(this ICoverEntityCore target, double position)
    {
        target.CallService("set_cover_position", new CoverSetCoverPositionParameters { Position = position });
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The IEnumerable&lt;ICoverEntityCore&gt; to call this service for</param>
    ///<param name="position">Target position.</param>
    public static void SetCoverPosition(this IEnumerable<ICoverEntityCore> target, double position)
    {
        target.CallService("set_cover_position", new CoverSetCoverPositionParameters { Position = position });
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    public static void SetCoverTiltPosition(this ICoverEntityCore target, CoverSetCoverTiltPositionParameters data)
    {
        target.CallService("set_cover_tilt_position", data);
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    public static void SetCoverTiltPosition(this IEnumerable<ICoverEntityCore> target, CoverSetCoverTiltPositionParameters data)
    {
        target.CallService("set_cover_tilt_position", data);
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The ICoverEntityCore to call this service for</param>
    ///<param name="tiltPosition">Target tilt positition.</param>
    public static void SetCoverTiltPosition(this ICoverEntityCore target, double tiltPosition)
    {
        target.CallService("set_cover_tilt_position", new CoverSetCoverTiltPositionParameters { TiltPosition = tiltPosition });
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The IEnumerable&lt;ICoverEntityCore&gt; to call this service for</param>
    ///<param name="tiltPosition">Target tilt positition.</param>
    public static void SetCoverTiltPosition(this IEnumerable<ICoverEntityCore> target, double tiltPosition)
    {
        target.CallService("set_cover_tilt_position", new CoverSetCoverTiltPositionParameters { TiltPosition = tiltPosition });
    }

    ///<summary>Stops the cover movement.</summary>
    public static void StopCover(this ICoverEntityCore target, object? data = null)
    {
        target.CallService("stop_cover", data);
    }

    ///<summary>Stops the cover movement.</summary>
    public static void StopCover(this IEnumerable<ICoverEntityCore> target, object? data = null)
    {
        target.CallService("stop_cover", data);
    }

    ///<summary>Stops a tilting cover movement.</summary>
    public static void StopCoverTilt(this ICoverEntityCore target, object? data = null)
    {
        target.CallService("stop_cover_tilt", data);
    }

    ///<summary>Stops a tilting cover movement.</summary>
    public static void StopCoverTilt(this IEnumerable<ICoverEntityCore> target, object? data = null)
    {
        target.CallService("stop_cover_tilt", data);
    }

    ///<summary>Toggles a cover open/closed.</summary>
    public static void Toggle(this ICoverEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles a cover open/closed.</summary>
    public static void Toggle(this IEnumerable<ICoverEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles a cover tilt open/closed.</summary>
    public static void ToggleCoverTilt(this ICoverEntityCore target, object? data = null)
    {
        target.CallService("toggle_cover_tilt", data);
    }

    ///<summary>Toggles a cover tilt open/closed.</summary>
    public static void ToggleCoverTilt(this IEnumerable<ICoverEntityCore> target, object? data = null)
    {
        target.CallService("toggle_cover_tilt", data);
    }
}

public static class ElgatoEntityExtensionMethods
{
    ///<summary>Identifies an Elgato Light. Blinks the light, which can be useful for, e.g., a visual notification.</summary>
    public static void Identify(this ILightEntityCore target, object? data = null)
    {
        target.CallService("identify", data);
    }

    ///<summary>Identifies an Elgato Light. Blinks the light, which can be useful for, e.g., a visual notification.</summary>
    public static void Identify(this IEnumerable<ILightEntityCore> target, object? data = null)
    {
        target.CallService("identify", data);
    }
}

public static class InputBooleanEntityExtensionMethods
{
    ///<summary>Toggles the helper on/off.</summary>
    public static void Toggle(this IInputBooleanEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles the helper on/off.</summary>
    public static void Toggle(this IEnumerable<IInputBooleanEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns off the helper.</summary>
    public static void TurnOff(this IInputBooleanEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns off the helper.</summary>
    public static void TurnOff(this IEnumerable<IInputBooleanEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns on the helper.</summary>
    public static void TurnOn(this IInputBooleanEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns on the helper.</summary>
    public static void TurnOn(this IEnumerable<IInputBooleanEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class InputDatetimeEntityExtensionMethods
{
    ///<summary>Sets the date and/or time.</summary>
    public static void SetDatetime(this IInputDatetimeEntityCore target, InputDatetimeSetDatetimeParameters data)
    {
        target.CallService("set_datetime", data);
    }

    ///<summary>Sets the date and/or time.</summary>
    public static void SetDatetime(this IEnumerable<IInputDatetimeEntityCore> target, InputDatetimeSetDatetimeParameters data)
    {
        target.CallService("set_datetime", data);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The IInputDatetimeEntityCore to call this service for</param>
    ///<param name="date">The target date. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time, expressed by a UNIX timestamp.</param>
    public static void SetDatetime(this IInputDatetimeEntityCore target, string? date = null, TimeOnly? time = null, string? datetime = null, double? timestamp = null)
    {
        target.CallService("set_datetime", new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The IEnumerable&lt;IInputDatetimeEntityCore&gt; to call this service for</param>
    ///<param name="date">The target date. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time, expressed by a UNIX timestamp.</param>
    public static void SetDatetime(this IEnumerable<IInputDatetimeEntityCore> target, string? date = null, TimeOnly? time = null, string? datetime = null, double? timestamp = null)
    {
        target.CallService("set_datetime", new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }
}

public static class InputNumberEntityExtensionMethods
{
    ///<summary>Decrements the current value by 1 step.</summary>
    public static void Decrement(this IInputNumberEntityCore target, object? data = null)
    {
        target.CallService("decrement", data);
    }

    ///<summary>Decrements the current value by 1 step.</summary>
    public static void Decrement(this IEnumerable<IInputNumberEntityCore> target, object? data = null)
    {
        target.CallService("decrement", data);
    }

    ///<summary>Increments the value by 1 step.</summary>
    public static void Increment(this IInputNumberEntityCore target, object? data = null)
    {
        target.CallService("increment", data);
    }

    ///<summary>Increments the value by 1 step.</summary>
    public static void Increment(this IEnumerable<IInputNumberEntityCore> target, object? data = null)
    {
        target.CallService("increment", data);
    }

    ///<summary>Sets the value.</summary>
    public static void SetValue(this IInputNumberEntityCore target, InputNumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    public static void SetValue(this IEnumerable<IInputNumberEntityCore> target, InputNumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IInputNumberEntityCore to call this service for</param>
    ///<param name="value">The target value.</param>
    public static void SetValue(this IInputNumberEntityCore target, double value)
    {
        target.CallService("set_value", new InputNumberSetValueParameters { Value = value });
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IEnumerable&lt;IInputNumberEntityCore&gt; to call this service for</param>
    ///<param name="value">The target value.</param>
    public static void SetValue(this IEnumerable<IInputNumberEntityCore> target, double value)
    {
        target.CallService("set_value", new InputNumberSetValueParameters { Value = value });
    }
}

public static class InputSelectEntityExtensionMethods
{
    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this IInputSelectEntityCore target, object? data = null)
    {
        target.CallService("select_first", data);
    }

    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this IEnumerable<IInputSelectEntityCore> target, object? data = null)
    {
        target.CallService("select_first", data);
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this IInputSelectEntityCore target, object? data = null)
    {
        target.CallService("select_last", data);
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this IEnumerable<IInputSelectEntityCore> target, object? data = null)
    {
        target.CallService("select_last", data);
    }

    ///<summary>Select the next option.</summary>
    public static void SelectNext(this IInputSelectEntityCore target, InputSelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Select the next option.</summary>
    public static void SelectNext(this IEnumerable<IInputSelectEntityCore> target, InputSelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Select the next option.</summary>
    ///<param name="target">The IInputSelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public static void SelectNext(this IInputSelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_next", new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Select the next option.</summary>
    ///<param name="target">The IEnumerable&lt;IInputSelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public static void SelectNext(this IEnumerable<IInputSelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_next", new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this IInputSelectEntityCore target, InputSelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this IEnumerable<IInputSelectEntityCore> target, InputSelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The IInputSelectEntityCore to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this IInputSelectEntityCore target, string option)
    {
        target.CallService("select_option", new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The IEnumerable&lt;IInputSelectEntityCore&gt; to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this IEnumerable<IInputSelectEntityCore> target, string option)
    {
        target.CallService("select_option", new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this IInputSelectEntityCore target, InputSelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this IEnumerable<IInputSelectEntityCore> target, InputSelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The IInputSelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public static void SelectPrevious(this IInputSelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_previous", new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The IEnumerable&lt;IInputSelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public static void SelectPrevious(this IEnumerable<IInputSelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_previous", new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Sets the options.</summary>
    public static void SetOptions(this IInputSelectEntityCore target, InputSelectSetOptionsParameters data)
    {
        target.CallService("set_options", data);
    }

    ///<summary>Sets the options.</summary>
    public static void SetOptions(this IEnumerable<IInputSelectEntityCore> target, InputSelectSetOptionsParameters data)
    {
        target.CallService("set_options", data);
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The IInputSelectEntityCore to call this service for</param>
    ///<param name="options">List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public static void SetOptions(this IInputSelectEntityCore target, IEnumerable<string> options)
    {
        target.CallService("set_options", new InputSelectSetOptionsParameters { Options = options });
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The IEnumerable&lt;IInputSelectEntityCore&gt; to call this service for</param>
    ///<param name="options">List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public static void SetOptions(this IEnumerable<IInputSelectEntityCore> target, IEnumerable<string> options)
    {
        target.CallService("set_options", new InputSelectSetOptionsParameters { Options = options });
    }
}

public static class LightEntityExtensionMethods
{
    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    public static void Toggle(this ILightEntityCore target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    public static void Toggle(this IEnumerable<ILightEntityCore> target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName"></param>
    ///<param name="hsColor"> eg: [300, 70]</param>
    ///<param name="xyColor"> eg: [0.52, 0.43]</param>
    ///<param name="colorTemp"></param>
    ///<param name="brightness"></param>
    ///<param name="white"></param>
    ///<param name="profile"> eg: relax</param>
    ///<param name="flash"></param>
    public static void Toggle(this ILightEntityCore target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? kelvin = null, double? brightnessPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, object? white = null, string? profile = null, object? flash = null)
    {
        target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, White = white, Profile = profile, Flash = flash });
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName"></param>
    ///<param name="hsColor"> eg: [300, 70]</param>
    ///<param name="xyColor"> eg: [0.52, 0.43]</param>
    ///<param name="colorTemp"></param>
    ///<param name="brightness"></param>
    ///<param name="white"></param>
    ///<param name="profile"> eg: relax</param>
    ///<param name="flash"></param>
    public static void Toggle(this IEnumerable<ILightEntityCore> target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? kelvin = null, double? brightnessPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, object? white = null, string? profile = null, object? flash = null)
    {
        target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, White = white, Profile = profile, Flash = flash });
    }

    ///<summary>Turn off one or more lights.</summary>
    public static void TurnOff(this ILightEntityCore target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turn off one or more lights.</summary>
    public static void TurnOff(this IEnumerable<ILightEntityCore> target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash"></param>
    public static void TurnOff(this ILightEntityCore target, double? transition = null, object? flash = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash"></param>
    public static void TurnOff(this IEnumerable<ILightEntityCore> target, double? transition = null, object? flash = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    public static void TurnOn(this ILightEntityCore target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    public static void TurnOn(this IEnumerable<ILightEntityCore> target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName"></param>
    ///<param name="hsColor"> eg: [300, 70]</param>
    ///<param name="xyColor"> eg: [0.52, 0.43]</param>
    ///<param name="colorTemp"></param>
    ///<param name="brightness"></param>
    ///<param name="brightnessStep"></param>
    ///<param name="white"></param>
    ///<param name="profile"> eg: relax</param>
    ///<param name="flash"></param>
    public static void TurnOn(this ILightEntityCore target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? kelvin = null, double? brightnessPct = null, double? brightnessStepPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, double? brightnessStep = null, object? white = null, string? profile = null, object? flash = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, BrightnessStepPct = brightnessStepPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, BrightnessStep = brightnessStep, White = white, Profile = profile, Flash = flash });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName"></param>
    ///<param name="hsColor"> eg: [300, 70]</param>
    ///<param name="xyColor"> eg: [0.52, 0.43]</param>
    ///<param name="colorTemp"></param>
    ///<param name="brightness"></param>
    ///<param name="brightnessStep"></param>
    ///<param name="white"></param>
    ///<param name="profile"> eg: relax</param>
    ///<param name="flash"></param>
    public static void TurnOn(this IEnumerable<ILightEntityCore> target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? kelvin = null, double? brightnessPct = null, double? brightnessStepPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, double? brightnessStep = null, object? white = null, string? profile = null, object? flash = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, BrightnessStepPct = brightnessStepPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, BrightnessStep = brightnessStep, White = white, Profile = profile, Flash = flash });
    }
}

public static class LockEntityExtensionMethods
{
    ///<summary>Locks a lock.</summary>
    public static void Lock(this ILockEntityCore target, LockLockParameters data)
    {
        target.CallService("lock", data);
    }

    ///<summary>Locks a lock.</summary>
    public static void Lock(this IEnumerable<ILockEntityCore> target, LockLockParameters data)
    {
        target.CallService("lock", data);
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="code">Code used to lock the lock. eg: 1234</param>
    public static void Lock(this ILockEntityCore target, string? code = null)
    {
        target.CallService("lock", new LockLockParameters { Code = code });
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="code">Code used to lock the lock. eg: 1234</param>
    public static void Lock(this IEnumerable<ILockEntityCore> target, string? code = null)
    {
        target.CallService("lock", new LockLockParameters { Code = code });
    }

    ///<summary>Opens a lock.</summary>
    public static void Open(this ILockEntityCore target, LockOpenParameters data)
    {
        target.CallService("open", data);
    }

    ///<summary>Opens a lock.</summary>
    public static void Open(this IEnumerable<ILockEntityCore> target, LockOpenParameters data)
    {
        target.CallService("open", data);
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="code">Code used to open the lock. eg: 1234</param>
    public static void Open(this ILockEntityCore target, string? code = null)
    {
        target.CallService("open", new LockOpenParameters { Code = code });
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="code">Code used to open the lock. eg: 1234</param>
    public static void Open(this IEnumerable<ILockEntityCore> target, string? code = null)
    {
        target.CallService("open", new LockOpenParameters { Code = code });
    }

    ///<summary>Unlocks a lock.</summary>
    public static void Unlock(this ILockEntityCore target, LockUnlockParameters data)
    {
        target.CallService("unlock", data);
    }

    ///<summary>Unlocks a lock.</summary>
    public static void Unlock(this IEnumerable<ILockEntityCore> target, LockUnlockParameters data)
    {
        target.CallService("unlock", data);
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="code">Code used to unlock the lock. eg: 1234</param>
    public static void Unlock(this ILockEntityCore target, string? code = null)
    {
        target.CallService("unlock", new LockUnlockParameters { Code = code });
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="code">Code used to unlock the lock. eg: 1234</param>
    public static void Unlock(this IEnumerable<ILockEntityCore> target, string? code = null)
    {
        target.CallService("unlock", new LockUnlockParameters { Code = code });
    }
}

public static class MediaPlayerEntityExtensionMethods
{
    ///<summary>Clears the playlist.</summary>
    public static void ClearPlaylist(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("clear_playlist", data);
    }

    ///<summary>Clears the playlist.</summary>
    public static void ClearPlaylist(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("clear_playlist", data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    public static void Join(this IMediaPlayerEntityCore target, MediaPlayerJoinParameters data)
    {
        target.CallService("join", data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    public static void Join(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerJoinParameters data)
    {
        target.CallService("join", data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public static void Join(this IMediaPlayerEntityCore target, IEnumerable<string> groupMembers)
    {
        target.CallService("join", new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public static void Join(this IEnumerable<IMediaPlayerEntityCore> target, IEnumerable<string> groupMembers)
    {
        target.CallService("join", new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Selects the next track.</summary>
    public static void MediaNextTrack(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_next_track", data);
    }

    ///<summary>Selects the next track.</summary>
    public static void MediaNextTrack(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_next_track", data);
    }

    ///<summary>Pauses.</summary>
    public static void MediaPause(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_pause", data);
    }

    ///<summary>Pauses.</summary>
    public static void MediaPause(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_pause", data);
    }

    ///<summary>Starts playing.</summary>
    public static void MediaPlay(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_play", data);
    }

    ///<summary>Starts playing.</summary>
    public static void MediaPlay(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_play", data);
    }

    ///<summary>Toggles play/pause.</summary>
    public static void MediaPlayPause(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_play_pause", data);
    }

    ///<summary>Toggles play/pause.</summary>
    public static void MediaPlayPause(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_play_pause", data);
    }

    ///<summary>Selects the previous track.</summary>
    public static void MediaPreviousTrack(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_previous_track", data);
    }

    ///<summary>Selects the previous track.</summary>
    public static void MediaPreviousTrack(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_previous_track", data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    public static void MediaSeek(this IMediaPlayerEntityCore target, MediaPlayerMediaSeekParameters data)
    {
        target.CallService("media_seek", data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    public static void MediaSeek(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerMediaSeekParameters data)
    {
        target.CallService("media_seek", data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public static void MediaSeek(this IMediaPlayerEntityCore target, double seekPosition)
    {
        target.CallService("media_seek", new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public static void MediaSeek(this IEnumerable<IMediaPlayerEntityCore> target, double seekPosition)
    {
        target.CallService("media_seek", new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Stops playing.</summary>
    public static void MediaStop(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_stop", data);
    }

    ///<summary>Stops playing.</summary>
    public static void MediaStop(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_stop", data);
    }

    ///<summary>Starts playing specified media.</summary>
    public static void PlayMedia(this IMediaPlayerEntityCore target, MediaPlayerPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Starts playing specified media.</summary>
    public static void PlayMedia(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public static void PlayMedia(this IMediaPlayerEntityCore target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        target.CallService("play_media", new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public static void PlayMedia(this IEnumerable<IMediaPlayerEntityCore> target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        target.CallService("play_media", new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    public static void RepeatSet(this IMediaPlayerEntityCore target, MediaPlayerRepeatSetParameters data)
    {
        target.CallService("repeat_set", data);
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    public static void RepeatSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerRepeatSetParameters data)
    {
        target.CallService("repeat_set", data);
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public static void RepeatSet(this IMediaPlayerEntityCore target, object repeat)
    {
        target.CallService("repeat_set", new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public static void RepeatSet(this IEnumerable<IMediaPlayerEntityCore> target, object repeat)
    {
        target.CallService("repeat_set", new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Selects a specific sound mode.</summary>
    public static void SelectSoundMode(this IMediaPlayerEntityCore target, MediaPlayerSelectSoundModeParameters data)
    {
        target.CallService("select_sound_mode", data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    public static void SelectSoundMode(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerSelectSoundModeParameters data)
    {
        target.CallService("select_sound_mode", data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public static void SelectSoundMode(this IMediaPlayerEntityCore target, string? soundMode = null)
    {
        target.CallService("select_sound_mode", new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public static void SelectSoundMode(this IEnumerable<IMediaPlayerEntityCore> target, string? soundMode = null)
    {
        target.CallService("select_sound_mode", new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    public static void SelectSource(this IMediaPlayerEntityCore target, MediaPlayerSelectSourceParameters data)
    {
        target.CallService("select_source", data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    public static void SelectSource(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerSelectSourceParameters data)
    {
        target.CallService("select_source", data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public static void SelectSource(this IMediaPlayerEntityCore target, string source)
    {
        target.CallService("select_source", new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public static void SelectSource(this IEnumerable<IMediaPlayerEntityCore> target, string source)
    {
        target.CallService("select_source", new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    public static void ShuffleSet(this IMediaPlayerEntityCore target, MediaPlayerShuffleSetParameters data)
    {
        target.CallService("shuffle_set", data);
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    public static void ShuffleSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerShuffleSetParameters data)
    {
        target.CallService("shuffle_set", data);
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="shuffle">Whether or not shuffle mode is enabled.</param>
    public static void ShuffleSet(this IMediaPlayerEntityCore target, bool shuffle)
    {
        target.CallService("shuffle_set", new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="shuffle">Whether or not shuffle mode is enabled.</param>
    public static void ShuffleSet(this IEnumerable<IMediaPlayerEntityCore> target, bool shuffle)
    {
        target.CallService("shuffle_set", new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Toggles a media player on/off.</summary>
    public static void Toggle(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles a media player on/off.</summary>
    public static void Toggle(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns off the power of the media player.</summary>
    public static void TurnOff(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns off the power of the media player.</summary>
    public static void TurnOff(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns on the power of the media player.</summary>
    public static void TurnOn(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns on the power of the media player.</summary>
    public static void TurnOn(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    public static void Unjoin(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("unjoin", data);
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    public static void Unjoin(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("unjoin", data);
    }

    ///<summary>Turns down the volume.</summary>
    public static void VolumeDown(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("volume_down", data);
    }

    ///<summary>Turns down the volume.</summary>
    public static void VolumeDown(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("volume_down", data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    public static void VolumeMute(this IMediaPlayerEntityCore target, MediaPlayerVolumeMuteParameters data)
    {
        target.CallService("volume_mute", data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    public static void VolumeMute(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerVolumeMuteParameters data)
    {
        target.CallService("volume_mute", data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public static void VolumeMute(this IMediaPlayerEntityCore target, bool isVolumeMuted)
    {
        target.CallService("volume_mute", new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public static void VolumeMute(this IEnumerable<IMediaPlayerEntityCore> target, bool isVolumeMuted)
    {
        target.CallService("volume_mute", new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Sets the volume level.</summary>
    public static void VolumeSet(this IMediaPlayerEntityCore target, MediaPlayerVolumeSetParameters data)
    {
        target.CallService("volume_set", data);
    }

    ///<summary>Sets the volume level.</summary>
    public static void VolumeSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerVolumeSetParameters data)
    {
        target.CallService("volume_set", data);
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public static void VolumeSet(this IMediaPlayerEntityCore target, double volumeLevel)
    {
        target.CallService("volume_set", new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public static void VolumeSet(this IEnumerable<IMediaPlayerEntityCore> target, double volumeLevel)
    {
        target.CallService("volume_set", new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Turns up the volume.</summary>
    public static void VolumeUp(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("volume_up", data);
    }

    ///<summary>Turns up the volume.</summary>
    public static void VolumeUp(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("volume_up", data);
    }
}

public static class NumberEntityExtensionMethods
{
    ///<summary>Sets the value of a number.</summary>
    public static void SetValue(this INumberEntityCore target, NumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value of a number.</summary>
    public static void SetValue(this IEnumerable<INumberEntityCore> target, NumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The INumberEntityCore to call this service for</param>
    ///<param name="value">The target value to set. eg: 42</param>
    public static void SetValue(this INumberEntityCore target, string? value = null)
    {
        target.CallService("set_value", new NumberSetValueParameters { Value = value });
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The IEnumerable&lt;INumberEntityCore&gt; to call this service for</param>
    ///<param name="value">The target value to set. eg: 42</param>
    public static void SetValue(this IEnumerable<INumberEntityCore> target, string? value = null)
    {
        target.CallService("set_value", new NumberSetValueParameters { Value = value });
    }
}

public static class PiHoleEntityExtensionMethods
{
    ///<summary>Disables configured Pi-hole(s) for an amount of time.</summary>
    public static void Disable(this ISwitchEntityCore target, PiHoleDisableParameters data)
    {
        target.CallService("disable", data);
    }

    ///<summary>Disables configured Pi-hole(s) for an amount of time.</summary>
    public static void Disable(this IEnumerable<ISwitchEntityCore> target, PiHoleDisableParameters data)
    {
        target.CallService("disable", data);
    }

    ///<summary>Disables configured Pi-hole(s) for an amount of time.</summary>
    ///<param name="target">The ISwitchEntityCore to call this service for</param>
    ///<param name="duration">Time that the Pi-hole should be disabled for. eg: 00:00:15</param>
    public static void Disable(this ISwitchEntityCore target, string duration)
    {
        target.CallService("disable", new PiHoleDisableParameters { Duration = duration });
    }

    ///<summary>Disables configured Pi-hole(s) for an amount of time.</summary>
    ///<param name="target">The IEnumerable&lt;ISwitchEntityCore&gt; to call this service for</param>
    ///<param name="duration">Time that the Pi-hole should be disabled for. eg: 00:00:15</param>
    public static void Disable(this IEnumerable<ISwitchEntityCore> target, string duration)
    {
        target.CallService("disable", new PiHoleDisableParameters { Duration = duration });
    }
}

public static class RemoteEntityExtensionMethods
{
    ///<summary>Deletes a command or a list of commands from the database.</summary>
    public static void DeleteCommand(this IRemoteEntityCore target, RemoteDeleteCommandParameters data)
    {
        target.CallService("delete_command", data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    public static void DeleteCommand(this IEnumerable<IRemoteEntityCore> target, RemoteDeleteCommandParameters data)
    {
        target.CallService("delete_command", data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public static void DeleteCommand(this IRemoteEntityCore target, object command, string? device = null)
    {
        target.CallService("delete_command", new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public static void DeleteCommand(this IEnumerable<IRemoteEntityCore> target, object command, string? device = null)
    {
        target.CallService("delete_command", new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    public static void LearnCommand(this IRemoteEntityCore target, RemoteLearnCommandParameters data)
    {
        target.CallService("learn_command", data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    public static void LearnCommand(this IEnumerable<IRemoteEntityCore> target, RemoteLearnCommandParameters data)
    {
        target.CallService("learn_command", data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public static void LearnCommand(this IRemoteEntityCore target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        target.CallService("learn_command", new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public static void LearnCommand(this IEnumerable<IRemoteEntityCore> target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        target.CallService("learn_command", new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    public static void SendCommand(this IRemoteEntityCore target, RemoteSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    public static void SendCommand(this IEnumerable<IRemoteEntityCore> target, RemoteSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public static void SendCommand(this IRemoteEntityCore target, object command, string? device = null, double? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        target.CallService("send_command", new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public static void SendCommand(this IEnumerable<IRemoteEntityCore> target, object command, string? device = null, double? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        target.CallService("send_command", new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Toggles a device on/off.</summary>
    public static void Toggle(this IRemoteEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles a device on/off.</summary>
    public static void Toggle(this IEnumerable<IRemoteEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns the device off.</summary>
    public static void TurnOff(this IRemoteEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns the device off.</summary>
    public static void TurnOff(this IEnumerable<IRemoteEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Sends the power on command.</summary>
    public static void TurnOn(this IRemoteEntityCore target, RemoteTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Sends the power on command.</summary>
    public static void TurnOn(this IEnumerable<IRemoteEntityCore> target, RemoteTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Sends the power on command.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public static void TurnOn(this IRemoteEntityCore target, string? activity = null)
    {
        target.CallService("turn_on", new RemoteTurnOnParameters { Activity = activity });
    }

    ///<summary>Sends the power on command.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public static void TurnOn(this IEnumerable<IRemoteEntityCore> target, string? activity = null)
    {
        target.CallService("turn_on", new RemoteTurnOnParameters { Activity = activity });
    }
}

public static class SceneEntityExtensionMethods
{
    ///<summary>Deletes a dynamically created scene.</summary>
    public static void Delete(this ISceneEntityCore target, object? data = null)
    {
        target.CallService("delete", data);
    }

    ///<summary>Deletes a dynamically created scene.</summary>
    public static void Delete(this IEnumerable<ISceneEntityCore> target, object? data = null)
    {
        target.CallService("delete", data);
    }

    ///<summary>Activates a scene.</summary>
    public static void TurnOn(this ISceneEntityCore target, SceneTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Activates a scene.</summary>
    public static void TurnOn(this IEnumerable<ISceneEntityCore> target, SceneTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The ISceneEntityCore to call this service for</param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public static void TurnOn(this ISceneEntityCore target, double? transition = null)
    {
        target.CallService("turn_on", new SceneTurnOnParameters { Transition = transition });
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The IEnumerable&lt;ISceneEntityCore&gt; to call this service for</param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public static void TurnOn(this IEnumerable<ISceneEntityCore> target, double? transition = null)
    {
        target.CallService("turn_on", new SceneTurnOnParameters { Transition = transition });
    }
}

public static class ScriptEntityExtensionMethods
{
    ///<summary>Toggle a script. Starts it, if isn&apos;t running, stops it otherwise.</summary>
    public static void Toggle(this IScriptEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggle a script. Starts it, if isn&apos;t running, stops it otherwise.</summary>
    public static void Toggle(this IEnumerable<IScriptEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Stops a running script.</summary>
    public static void TurnOff(this IScriptEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Stops a running script.</summary>
    public static void TurnOff(this IEnumerable<IScriptEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    public static void TurnOn(this IScriptEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    public static void TurnOn(this IEnumerable<IScriptEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class SelectEntityExtensionMethods
{
    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this ISelectEntityCore target, object? data = null)
    {
        target.CallService("select_first", data);
    }

    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this IEnumerable<ISelectEntityCore> target, object? data = null)
    {
        target.CallService("select_first", data);
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this ISelectEntityCore target, object? data = null)
    {
        target.CallService("select_last", data);
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this IEnumerable<ISelectEntityCore> target, object? data = null)
    {
        target.CallService("select_last", data);
    }

    ///<summary>Selects the next option.</summary>
    public static void SelectNext(this ISelectEntityCore target, SelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Selects the next option.</summary>
    public static void SelectNext(this IEnumerable<ISelectEntityCore> target, SelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this ISelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_next", new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this IEnumerable<ISelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_next", new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this ISelectEntityCore target, SelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this IEnumerable<ISelectEntityCore> target, SelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this ISelectEntityCore target, string option)
    {
        target.CallService("select_option", new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this IEnumerable<ISelectEntityCore> target, string option)
    {
        target.CallService("select_option", new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this ISelectEntityCore target, SelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this IEnumerable<ISelectEntityCore> target, SelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this ISelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_previous", new SelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this IEnumerable<ISelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_previous", new SelectSelectPreviousParameters { Cycle = cycle });
    }
}

public static class SwitchEntityExtensionMethods
{
    ///<summary>Toggles a switch on/off.</summary>
    public static void Toggle(this ISwitchEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles a switch on/off.</summary>
    public static void Toggle(this IEnumerable<ISwitchEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns a switch off.</summary>
    public static void TurnOff(this ISwitchEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns a switch off.</summary>
    public static void TurnOff(this IEnumerable<ISwitchEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns a switch on.</summary>
    public static void TurnOn(this ISwitchEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns a switch on.</summary>
    public static void TurnOn(this IEnumerable<ISwitchEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class TextEntityExtensionMethods
{
    ///<summary>Sets the value.</summary>
    public static void SetValue(this TextEntity target, TextSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    public static void SetValue(this IEnumerable<TextEntity> target, TextSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The TextEntity to call this service for</param>
    ///<param name="value">Enter your text. eg: Hello world!</param>
    public static void SetValue(this TextEntity target, string value)
    {
        target.CallService("set_value", new TextSetValueParameters { Value = value });
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IEnumerable&lt;TextEntity&gt; to call this service for</param>
    ///<param name="value">Enter your text. eg: Hello world!</param>
    public static void SetValue(this IEnumerable<TextEntity> target, string value)
    {
        target.CallService("set_value", new TextSetValueParameters { Value = value });
    }
}

public static class TimerEntityExtensionMethods
{
    ///<summary>Cancels a timer.</summary>
    public static void Cancel(this ITimerEntityCore target, object? data = null)
    {
        target.CallService("cancel", data);
    }

    ///<summary>Cancels a timer.</summary>
    public static void Cancel(this IEnumerable<ITimerEntityCore> target, object? data = null)
    {
        target.CallService("cancel", data);
    }

    ///<summary>Changes a timer.</summary>
    public static void Change(this ITimerEntityCore target, TimerChangeParameters data)
    {
        target.CallService("change", data);
    }

    ///<summary>Changes a timer.</summary>
    public static void Change(this IEnumerable<ITimerEntityCore> target, TimerChangeParameters data)
    {
        target.CallService("change", data);
    }

    ///<summary>Changes a timer.</summary>
    ///<param name="target">The ITimerEntityCore to call this service for</param>
    ///<param name="duration">Duration to add or subtract to the running timer. eg: 00:01:00, 60 or -60</param>
    public static void Change(this ITimerEntityCore target, string duration)
    {
        target.CallService("change", new TimerChangeParameters { Duration = duration });
    }

    ///<summary>Changes a timer.</summary>
    ///<param name="target">The IEnumerable&lt;ITimerEntityCore&gt; to call this service for</param>
    ///<param name="duration">Duration to add or subtract to the running timer. eg: 00:01:00, 60 or -60</param>
    public static void Change(this IEnumerable<ITimerEntityCore> target, string duration)
    {
        target.CallService("change", new TimerChangeParameters { Duration = duration });
    }

    ///<summary>Finishes a timer.</summary>
    public static void Finish(this ITimerEntityCore target, object? data = null)
    {
        target.CallService("finish", data);
    }

    ///<summary>Finishes a timer.</summary>
    public static void Finish(this IEnumerable<ITimerEntityCore> target, object? data = null)
    {
        target.CallService("finish", data);
    }

    ///<summary>Pauses a timer.</summary>
    public static void Pause(this ITimerEntityCore target, object? data = null)
    {
        target.CallService("pause", data);
    }

    ///<summary>Pauses a timer.</summary>
    public static void Pause(this IEnumerable<ITimerEntityCore> target, object? data = null)
    {
        target.CallService("pause", data);
    }

    ///<summary>Starts a timer.</summary>
    public static void Start(this ITimerEntityCore target, TimerStartParameters data)
    {
        target.CallService("start", data);
    }

    ///<summary>Starts a timer.</summary>
    public static void Start(this IEnumerable<ITimerEntityCore> target, TimerStartParameters data)
    {
        target.CallService("start", data);
    }

    ///<summary>Starts a timer.</summary>
    ///<param name="target">The ITimerEntityCore to call this service for</param>
    ///<param name="duration">Duration the timer requires to finish. [optional]. eg: 00:01:00 or 60</param>
    public static void Start(this ITimerEntityCore target, string? duration = null)
    {
        target.CallService("start", new TimerStartParameters { Duration = duration });
    }

    ///<summary>Starts a timer.</summary>
    ///<param name="target">The IEnumerable&lt;ITimerEntityCore&gt; to call this service for</param>
    ///<param name="duration">Duration the timer requires to finish. [optional]. eg: 00:01:00 or 60</param>
    public static void Start(this IEnumerable<ITimerEntityCore> target, string? duration = null)
    {
        target.CallService("start", new TimerStartParameters { Duration = duration });
    }
}

public static class TruenasEntityExtensionMethods
{
    ///<summary>Start a app</summary>
    public static void AppStart(this IBinarySensorEntityCore target, object? data = null)
    {
        target.CallService("app_start", data);
    }

    ///<summary>Start a app</summary>
    public static void AppStart(this IEnumerable<IBinarySensorEntityCore> target, object? data = null)
    {
        target.CallService("app_start", data);
    }

    ///<summary>Stop a app</summary>
    public static void AppStop(this IBinarySensorEntityCore target, object? data = null)
    {
        target.CallService("app_stop", data);
    }

    ///<summary>Stop a app</summary>
    public static void AppStop(this IEnumerable<IBinarySensorEntityCore> target, object? data = null)
    {
        target.CallService("app_stop", data);
    }

    ///<summary>Start a Clousync Job</summary>
    public static void CloudsyncRun(this ISensorEntityCore target, object? data = null)
    {
        target.CallService("cloudsync_run", data);
    }

    ///<summary>Start a Clousync Job</summary>
    public static void CloudsyncRun(this IEnumerable<ISensorEntityCore> target, object? data = null)
    {
        target.CallService("cloudsync_run", data);
    }

    ///<summary>Create a Dataset Snapshot</summary>
    public static void DatasetSnapshot(this ISensorEntityCore target, object? data = null)
    {
        target.CallService("dataset_snapshot", data);
    }

    ///<summary>Create a Dataset Snapshot</summary>
    public static void DatasetSnapshot(this IEnumerable<ISensorEntityCore> target, object? data = null)
    {
        target.CallService("dataset_snapshot", data);
    }

    ///<summary>Restart a Jail</summary>
    public static void JailRestart(this IBinarySensorEntityCore target, object? data = null)
    {
        target.CallService("jail_restart", data);
    }

    ///<summary>Restart a Jail</summary>
    public static void JailRestart(this IEnumerable<IBinarySensorEntityCore> target, object? data = null)
    {
        target.CallService("jail_restart", data);
    }

    ///<summary>Start a Jail</summary>
    public static void JailStart(this IBinarySensorEntityCore target, object? data = null)
    {
        target.CallService("jail_start", data);
    }

    ///<summary>Start a Jail</summary>
    public static void JailStart(this IEnumerable<IBinarySensorEntityCore> target, object? data = null)
    {
        target.CallService("jail_start", data);
    }

    ///<summary>Stop a Jail</summary>
    public static void JailStop(this IBinarySensorEntityCore target, object? data = null)
    {
        target.CallService("jail_stop", data);
    }

    ///<summary>Stop a Jail</summary>
    public static void JailStop(this IEnumerable<IBinarySensorEntityCore> target, object? data = null)
    {
        target.CallService("jail_stop", data);
    }

    ///<summary>Reload a Service</summary>
    public static void ServiceReload(this IBinarySensorEntityCore target, object? data = null)
    {
        target.CallService("service_reload", data);
    }

    ///<summary>Reload a Service</summary>
    public static void ServiceReload(this IEnumerable<IBinarySensorEntityCore> target, object? data = null)
    {
        target.CallService("service_reload", data);
    }

    ///<summary>Restart a Service</summary>
    public static void ServiceRestart(this IBinarySensorEntityCore target, object? data = null)
    {
        target.CallService("service_restart", data);
    }

    ///<summary>Restart a Service</summary>
    public static void ServiceRestart(this IEnumerable<IBinarySensorEntityCore> target, object? data = null)
    {
        target.CallService("service_restart", data);
    }

    ///<summary>Start a Service</summary>
    public static void ServiceStart(this IBinarySensorEntityCore target, object? data = null)
    {
        target.CallService("service_start", data);
    }

    ///<summary>Start a Service</summary>
    public static void ServiceStart(this IEnumerable<IBinarySensorEntityCore> target, object? data = null)
    {
        target.CallService("service_start", data);
    }

    ///<summary>Stop a Service</summary>
    public static void ServiceStop(this IBinarySensorEntityCore target, object? data = null)
    {
        target.CallService("service_stop", data);
    }

    ///<summary>Stop a Service</summary>
    public static void ServiceStop(this IEnumerable<IBinarySensorEntityCore> target, object? data = null)
    {
        target.CallService("service_stop", data);
    }

    ///<summary>Reboot TrueNAS System (Target Uptime Sensor)</summary>
    public static void SystemReboot(this ISensorEntityCore target, object? data = null)
    {
        target.CallService("system_reboot", data);
    }

    ///<summary>Reboot TrueNAS System (Target Uptime Sensor)</summary>
    public static void SystemReboot(this IEnumerable<ISensorEntityCore> target, object? data = null)
    {
        target.CallService("system_reboot", data);
    }

    ///<summary>Shutdown TrueNAS System (Target Uptime Sensor)</summary>
    public static void SystemShutdown(this ISensorEntityCore target, object? data = null)
    {
        target.CallService("system_shutdown", data);
    }

    ///<summary>Shutdown TrueNAS System (Target Uptime Sensor)</summary>
    public static void SystemShutdown(this IEnumerable<ISensorEntityCore> target, object? data = null)
    {
        target.CallService("system_shutdown", data);
    }

    ///<summary>Start a VM</summary>
    public static void VmStart(this IBinarySensorEntityCore target, TruenasVmStartParameters data)
    {
        target.CallService("vm_start", data);
    }

    ///<summary>Start a VM</summary>
    public static void VmStart(this IEnumerable<IBinarySensorEntityCore> target, TruenasVmStartParameters data)
    {
        target.CallService("vm_start", data);
    }

    ///<summary>Start a VM</summary>
    ///<param name="target">The IBinarySensorEntityCore to call this service for</param>
    ///<param name="overcommit">Memory overcommitment allows the VM to launch even though there is insufficient free memory.</param>
    public static void VmStart(this IBinarySensorEntityCore target, bool? overcommit = null)
    {
        target.CallService("vm_start", new TruenasVmStartParameters { Overcommit = overcommit });
    }

    ///<summary>Start a VM</summary>
    ///<param name="target">The IEnumerable&lt;IBinarySensorEntityCore&gt; to call this service for</param>
    ///<param name="overcommit">Memory overcommitment allows the VM to launch even though there is insufficient free memory.</param>
    public static void VmStart(this IEnumerable<IBinarySensorEntityCore> target, bool? overcommit = null)
    {
        target.CallService("vm_start", new TruenasVmStartParameters { Overcommit = overcommit });
    }

    ///<summary>Stop a VM</summary>
    public static void VmStop(this IBinarySensorEntityCore target, object? data = null)
    {
        target.CallService("vm_stop", data);
    }

    ///<summary>Stop a VM</summary>
    public static void VmStop(this IEnumerable<IBinarySensorEntityCore> target, object? data = null)
    {
        target.CallService("vm_stop", data);
    }
}

public static class TtsEntityExtensionMethods
{
    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    public static void Speak(this TtsEntity target, TtsSpeakParameters data)
    {
        target.CallService("speak", data);
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    public static void Speak(this IEnumerable<TtsEntity> target, TtsSpeakParameters data)
    {
        target.CallService("speak", data);
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The TtsEntity to call this service for</param>
    ///<param name="mediaPlayerEntityId">Media players to play the message.</param>
    ///<param name="message">The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</param>
    ///<param name="cache">Stores this message locally so that when the text is requested again, the output can be produced more quickly.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing integration-specific options. eg: platform specific</param>
    public static void Speak(this TtsEntity target, string mediaPlayerEntityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        target.CallService("speak", new TtsSpeakParameters { MediaPlayerEntityId = mediaPlayerEntityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The IEnumerable&lt;TtsEntity&gt; to call this service for</param>
    ///<param name="mediaPlayerEntityId">Media players to play the message.</param>
    ///<param name="message">The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</param>
    ///<param name="cache">Stores this message locally so that when the text is requested again, the output can be produced more quickly.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing integration-specific options. eg: platform specific</param>
    public static void Speak(this IEnumerable<TtsEntity> target, string mediaPlayerEntityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        target.CallService("speak", new TtsSpeakParameters { MediaPlayerEntityId = mediaPlayerEntityId, Message = message, Cache = cache, Language = language, Options = options });
    }
}

public static class UpdateEntityExtensionMethods
{
    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this IUpdateEntityCore target, object? data = null)
    {
        target.CallService("clear_skipped", data);
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this IEnumerable<IUpdateEntityCore> target, object? data = null)
    {
        target.CallService("clear_skipped", data);
    }

    ///<summary>Installs an update for this device or service.</summary>
    public static void Install(this IUpdateEntityCore target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Installs an update for this device or service.</summary>
    public static void Install(this IEnumerable<IUpdateEntityCore> target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Installs an update for this device or service.</summary>
    ///<param name="target">The IUpdateEntityCore to call this service for</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update .</param>
    public static void Install(this IUpdateEntityCore target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Installs an update for this device or service.</summary>
    ///<param name="target">The IEnumerable&lt;IUpdateEntityCore&gt; to call this service for</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update .</param>
    public static void Install(this IEnumerable<IUpdateEntityCore> target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Marks currently available update as skipped.</summary>
    public static void Skip(this IUpdateEntityCore target, object? data = null)
    {
        target.CallService("skip", data);
    }

    ///<summary>Marks currently available update as skipped.</summary>
    public static void Skip(this IEnumerable<IUpdateEntityCore> target, object? data = null)
    {
        target.CallService("skip", data);
    }
}

public static class WeatherEntityExtensionMethods
{
    ///<summary>Get weather forecasts.</summary>
    public static Task<JsonElement?> GetForecastsAsync(this IWeatherEntityCore target, WeatherGetForecastsParameters data)
    {
        return target.CallServiceWithResponseAsync("get_forecasts", data);
    }

    ///<summary>Get weather forecasts.</summary>
    ///<param name="target">The IWeatherEntityCore to call this service for</param>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public static Task<JsonElement?> GetForecastsAsync(this IWeatherEntityCore target, object @type)
    {
        return target.CallServiceWithResponseAsync("get_forecasts", new WeatherGetForecastsParameters { Type = @type });
    }

    ///<summary>Get weather forecasts.</summary>
    public static void GetForecasts(this IWeatherEntityCore target, WeatherGetForecastsParameters data)
    {
        target.CallService("get_forecasts", data);
    }

    ///<summary>Get weather forecasts.</summary>
    public static void GetForecasts(this IEnumerable<IWeatherEntityCore> target, WeatherGetForecastsParameters data)
    {
        target.CallService("get_forecasts", data);
    }

    ///<summary>Get weather forecasts.</summary>
    ///<param name="target">The IWeatherEntityCore to call this service for</param>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public static void GetForecasts(this IWeatherEntityCore target, object @type)
    {
        target.CallService("get_forecasts", new WeatherGetForecastsParameters { Type = @type });
    }

    ///<summary>Get weather forecasts.</summary>
    ///<param name="target">The IEnumerable&lt;IWeatherEntityCore&gt; to call this service for</param>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public static void GetForecasts(this IEnumerable<IWeatherEntityCore> target, object @type)
    {
        target.CallService("get_forecasts", new WeatherGetForecastsParameters { Type = @type });
    }
}

public static class ZhaEntityExtensionMethods
{
    ///<summary>Clears a user code from a lock.</summary>
    public static void ClearLockUserCode(this ILockEntityCore target, ZhaClearLockUserCodeParameters data)
    {
        target.CallService("clear_lock_user_code", data);
    }

    ///<summary>Clears a user code from a lock.</summary>
    public static void ClearLockUserCode(this IEnumerable<ILockEntityCore> target, ZhaClearLockUserCodeParameters data)
    {
        target.CallService("clear_lock_user_code", data);
    }

    ///<summary>Clears a user code from a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="codeSlot">Code slot to clear code from. eg: 1</param>
    public static void ClearLockUserCode(this ILockEntityCore target, string codeSlot)
    {
        target.CallService("clear_lock_user_code", new ZhaClearLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Clears a user code from a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="codeSlot">Code slot to clear code from. eg: 1</param>
    public static void ClearLockUserCode(this IEnumerable<ILockEntityCore> target, string codeSlot)
    {
        target.CallService("clear_lock_user_code", new ZhaClearLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Disables a user code on a lock.</summary>
    public static void DisableLockUserCode(this ILockEntityCore target, ZhaDisableLockUserCodeParameters data)
    {
        target.CallService("disable_lock_user_code", data);
    }

    ///<summary>Disables a user code on a lock.</summary>
    public static void DisableLockUserCode(this IEnumerable<ILockEntityCore> target, ZhaDisableLockUserCodeParameters data)
    {
        target.CallService("disable_lock_user_code", data);
    }

    ///<summary>Disables a user code on a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="codeSlot">Code slot to disable. eg: 1</param>
    public static void DisableLockUserCode(this ILockEntityCore target, string codeSlot)
    {
        target.CallService("disable_lock_user_code", new ZhaDisableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Disables a user code on a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="codeSlot">Code slot to disable. eg: 1</param>
    public static void DisableLockUserCode(this IEnumerable<ILockEntityCore> target, string codeSlot)
    {
        target.CallService("disable_lock_user_code", new ZhaDisableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Enables a user code on a lock.</summary>
    public static void EnableLockUserCode(this ILockEntityCore target, ZhaEnableLockUserCodeParameters data)
    {
        target.CallService("enable_lock_user_code", data);
    }

    ///<summary>Enables a user code on a lock.</summary>
    public static void EnableLockUserCode(this IEnumerable<ILockEntityCore> target, ZhaEnableLockUserCodeParameters data)
    {
        target.CallService("enable_lock_user_code", data);
    }

    ///<summary>Enables a user code on a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="codeSlot">Code slot to enable. eg: 1</param>
    public static void EnableLockUserCode(this ILockEntityCore target, string codeSlot)
    {
        target.CallService("enable_lock_user_code", new ZhaEnableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Enables a user code on a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="codeSlot">Code slot to enable. eg: 1</param>
    public static void EnableLockUserCode(this IEnumerable<ILockEntityCore> target, string codeSlot)
    {
        target.CallService("enable_lock_user_code", new ZhaEnableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Sets a user code on a lock.</summary>
    public static void SetLockUserCode(this ILockEntityCore target, ZhaSetLockUserCodeParameters data)
    {
        target.CallService("set_lock_user_code", data);
    }

    ///<summary>Sets a user code on a lock.</summary>
    public static void SetLockUserCode(this IEnumerable<ILockEntityCore> target, ZhaSetLockUserCodeParameters data)
    {
        target.CallService("set_lock_user_code", data);
    }

    ///<summary>Sets a user code on a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="codeSlot">Code slot to set the code in. eg: 1</param>
    ///<param name="userCode">Code to set. eg: 1234</param>
    public static void SetLockUserCode(this ILockEntityCore target, string codeSlot, string userCode)
    {
        target.CallService("set_lock_user_code", new ZhaSetLockUserCodeParameters { CodeSlot = codeSlot, UserCode = userCode });
    }

    ///<summary>Sets a user code on a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="codeSlot">Code slot to set the code in. eg: 1</param>
    ///<param name="userCode">Code to set. eg: 1234</param>
    public static void SetLockUserCode(this IEnumerable<ILockEntityCore> target, string codeSlot, string userCode)
    {
        target.CallService("set_lock_user_code", new ZhaSetLockUserCodeParameters { CodeSlot = codeSlot, UserCode = userCode });
    }
}

public static class ZwaveJsEntityExtensionMethods
{
    ///<summary>Clears a user code from a lock.</summary>
    public static void ClearLockUsercode(this ILockEntityCore target, ZwaveJsClearLockUsercodeParameters data)
    {
        target.CallService("clear_lock_usercode", data);
    }

    ///<summary>Clears a user code from a lock.</summary>
    public static void ClearLockUsercode(this IEnumerable<ILockEntityCore> target, ZwaveJsClearLockUsercodeParameters data)
    {
        target.CallService("clear_lock_usercode", data);
    }

    ///<summary>Clears a user code from a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="codeSlot">Code slot to clear code from. eg: 1</param>
    public static void ClearLockUsercode(this ILockEntityCore target, string codeSlot)
    {
        target.CallService("clear_lock_usercode", new ZwaveJsClearLockUsercodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Clears a user code from a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="codeSlot">Code slot to clear code from. eg: 1</param>
    public static void ClearLockUsercode(this IEnumerable<ILockEntityCore> target, string codeSlot)
    {
        target.CallService("clear_lock_usercode", new ZwaveJsClearLockUsercodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Sets the configuration for a lock.</summary>
    public static void SetLockConfiguration(this ILockEntityCore target, ZwaveJsSetLockConfigurationParameters data)
    {
        target.CallService("set_lock_configuration", data);
    }

    ///<summary>Sets the configuration for a lock.</summary>
    public static void SetLockConfiguration(this IEnumerable<ILockEntityCore> target, ZwaveJsSetLockConfigurationParameters data)
    {
        target.CallService("set_lock_configuration", data);
    }

    ///<summary>Sets the configuration for a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="operationType">The operation type of the lock. eg: timed</param>
    ///<param name="lockTimeout">Seconds until lock mode times out. Should only be used if operation type is `timed`. eg: 1</param>
    ///<param name="outsideHandlesCanOpenDoorConfiguration">A list of four booleans which indicate which outside handles can open the door. eg: [true,true,true,false]</param>
    ///<param name="insideHandlesCanOpenDoorConfiguration">A list of four booleans which indicate which inside handles can open the door. eg: [true,true,true,false]</param>
    ///<param name="autoRelockTime">Duration in seconds until lock returns to secure state. Only enforced when operation type is `constant`. eg: 1</param>
    ///<param name="holdAndReleaseTime">Duration in seconds the latch stays retracted. eg: 1</param>
    ///<param name="twistAssist">Enable Twist Assist. eg: True</param>
    ///<param name="blockToBlock">Enable block-to-block functionality. eg: True</param>
    public static void SetLockConfiguration(this ILockEntityCore target, object operationType, double? lockTimeout = null, object? outsideHandlesCanOpenDoorConfiguration = null, object? insideHandlesCanOpenDoorConfiguration = null, double? autoRelockTime = null, double? holdAndReleaseTime = null, bool? twistAssist = null, bool? blockToBlock = null)
    {
        target.CallService("set_lock_configuration", new ZwaveJsSetLockConfigurationParameters { OperationType = operationType, LockTimeout = lockTimeout, OutsideHandlesCanOpenDoorConfiguration = outsideHandlesCanOpenDoorConfiguration, InsideHandlesCanOpenDoorConfiguration = insideHandlesCanOpenDoorConfiguration, AutoRelockTime = autoRelockTime, HoldAndReleaseTime = holdAndReleaseTime, TwistAssist = twistAssist, BlockToBlock = blockToBlock });
    }

    ///<summary>Sets the configuration for a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="operationType">The operation type of the lock. eg: timed</param>
    ///<param name="lockTimeout">Seconds until lock mode times out. Should only be used if operation type is `timed`. eg: 1</param>
    ///<param name="outsideHandlesCanOpenDoorConfiguration">A list of four booleans which indicate which outside handles can open the door. eg: [true,true,true,false]</param>
    ///<param name="insideHandlesCanOpenDoorConfiguration">A list of four booleans which indicate which inside handles can open the door. eg: [true,true,true,false]</param>
    ///<param name="autoRelockTime">Duration in seconds until lock returns to secure state. Only enforced when operation type is `constant`. eg: 1</param>
    ///<param name="holdAndReleaseTime">Duration in seconds the latch stays retracted. eg: 1</param>
    ///<param name="twistAssist">Enable Twist Assist. eg: True</param>
    ///<param name="blockToBlock">Enable block-to-block functionality. eg: True</param>
    public static void SetLockConfiguration(this IEnumerable<ILockEntityCore> target, object operationType, double? lockTimeout = null, object? outsideHandlesCanOpenDoorConfiguration = null, object? insideHandlesCanOpenDoorConfiguration = null, double? autoRelockTime = null, double? holdAndReleaseTime = null, bool? twistAssist = null, bool? blockToBlock = null)
    {
        target.CallService("set_lock_configuration", new ZwaveJsSetLockConfigurationParameters { OperationType = operationType, LockTimeout = lockTimeout, OutsideHandlesCanOpenDoorConfiguration = outsideHandlesCanOpenDoorConfiguration, InsideHandlesCanOpenDoorConfiguration = insideHandlesCanOpenDoorConfiguration, AutoRelockTime = autoRelockTime, HoldAndReleaseTime = holdAndReleaseTime, TwistAssist = twistAssist, BlockToBlock = blockToBlock });
    }

    ///<summary>Sets a user code on a lock.</summary>
    public static void SetLockUsercode(this ILockEntityCore target, ZwaveJsSetLockUsercodeParameters data)
    {
        target.CallService("set_lock_usercode", data);
    }

    ///<summary>Sets a user code on a lock.</summary>
    public static void SetLockUsercode(this IEnumerable<ILockEntityCore> target, ZwaveJsSetLockUsercodeParameters data)
    {
        target.CallService("set_lock_usercode", data);
    }

    ///<summary>Sets a user code on a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="codeSlot">Code slot to set the code. eg: 1</param>
    ///<param name="usercode">Lock code to set. eg: 1234</param>
    public static void SetLockUsercode(this ILockEntityCore target, string codeSlot, string usercode)
    {
        target.CallService("set_lock_usercode", new ZwaveJsSetLockUsercodeParameters { CodeSlot = codeSlot, Usercode = usercode });
    }

    ///<summary>Sets a user code on a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="codeSlot">Code slot to set the code. eg: 1</param>
    ///<param name="usercode">Lock code to set. eg: 1234</param>
    public static void SetLockUsercode(this IEnumerable<ILockEntityCore> target, string codeSlot, string usercode)
    {
        target.CallService("set_lock_usercode", new ZwaveJsSetLockUsercodeParameters { CodeSlot = codeSlot, Usercode = usercode });
    }
}